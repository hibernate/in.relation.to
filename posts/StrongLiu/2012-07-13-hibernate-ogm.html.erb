---
title: "Hibernate OGM 实战"
author: "Strong Liu"
blogger_name: "StrongLiu"
creation_date: "13-07-2012"
original_tags: [Hibernate OGM]
tags: [Hibernate OGM]

relative_url: /2012/07/13/hibernate-ogm
slug: hibernate-ogm
lace: http://in.relation.to/23343.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2012/07/13/hibernate-ogm
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
本文是<a href="http://in.relation.to/Bloggers/HibernateOGMNOSQL" target="" class="regularLink">上文</a>的延续.
</p>

<p class="wikiPara">
我想先介绍一下<a href="http://www.jboss.org/jdf" target="" class="regularLink">JBoss Developer Framework</a>, 这是JBoss 社区推出的一个全新的项目, 旨在帮助开发者更好的理解和使用JBoss的相关技术, 它提供了大量的实例教程(50+), 视频, 文章的内容, 迁移向导(从Java EE 5到EE 6, 从Spring到Java EE)等, 
教你一点点的学会Java EE 6相关的各种技术, 并且涵盖了 <i class="wikiEmphasis">REST</i>, <i class="wikiEmphasis">HTML5</i> 等新的热点技术.
</p>

<p class="wikiPara">
本文即以<a href="http://www.jboss.org/jdf/quickstarts/jboss-as-quickstart/kitchensink/" target="" class="regularLink">kitchensink</a>, 一个 <i class="wikiEmphasis">JBoss Developer Framework</i> 提供的实例为基础展开.
</p>

<p class="wikiPara">
首先, 先让我介绍一下<a href="http://www.jboss.org/jdf/quickstarts/jboss-as-quickstart/kitchensink/" target="" class="regularLink">kitchensink</a>吧, 最新的源代码可以在<a href="https://github.com/jbossas/quickstart/tree/master/kitchensink" target="" class="regularLink">这里</a>找到.
</p>

<p class="wikiPara">
这个实例主要演示了如下几种技术:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem">Bean Validation 1.0</li>
<li class="wikiUnorderedListItem">EJB 3.1</li>
<li class="wikiUnorderedListItem">JAX-RS</li>
<li class="wikiUnorderedListItem">JPA 2.0</li>
<li class="wikiUnorderedListItem">JSF 2.0</li>
<li class="wikiUnorderedListItem">CDI 1.0</li>
<li class="wikiUnorderedListItem">Arquillian</li>
</ul>


<p class="wikiPara">
想要运行这个实例的话, 你需要 JDK 6/7, Maven 3 和 <a href="http://www.jboss.org/jbossas/downloads" target="" class="regularLink">JBoss AS 7</a>
</p>

<p class="wikiPara">
注意, 有一些依赖是只存在于JBoss 的maven 仓库中的, 所以, 可能需要对maven 的settings.xml文件做些配置, 添加JBoss maven仓库, 具体请参考<a href="https://community.jboss.org/wiki/MavenGettingStarted-Users" target="" class="regularLink">这里</a> 和<a href="https://github.com/jbossas/quickstart" target="" class="regularLink">这里</a>
</p>

<p class="wikiPara">
具体配置信息就不多说了, 上面给出的链接很详细, 这些也不是本文的重点, 接下来就让我们看看代码
</p>

<p class="wikiPara">
首先是persistence.xml, 位于<tt>main/resources/META-INF/persistence.xml</tt>, 都是标准的位置
</p>

<pre class="wikiPreformatted">    &lt;persistence version="2.0"
       xmlns="http://java.sun.com/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
            http://java.sun.com/xml/ns/persistence
            http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd"&gt;
       &lt;persistence-unit name="primary"&gt;
          &lt;jta-data-source&gt;java:jboss/datasources/KitchensinkQuickstartDS&lt;/jta-data-source&gt;
          &lt;properties&gt;
             &lt;property name="hibernate.hbm2ddl.auto" value="create-drop" /&gt;
             &lt;property name="hibernate.show_sql" value="false" /&gt;
          &lt;/properties&gt;
       &lt;/persistence-unit&gt;
    &lt;/persistence&gt;</pre>


<p class="wikiPara">
可以看到, 这个文件定义的很简单, 就是定义了一个数据源和两个属性, 注意, <tt>hibernate.hbm2ddl.auto=creat-drop</tt>, 意思是在创建session factory的时候自动创建表结构, 关闭session factory的时候会自动drop掉表.
</p>

<p class="wikiPara">
同时, 还可以看到<tt>main/resources</tt>目录中有import.sql这个文件, 当使用hibernate创建表结构的时候, 创建完成之后, hibernate会自动的导入import.sql文件, 这样可以添加一些初始数据.
</p>

<p class="wikiPara">
另外, 引用的数据源是定义在<tt>main/webapp/WEB-INF/kitchensink-quickstart-ds.xml</tt>文件中的.
</p>

<p class="wikiPara">
然后再来看看本文关注的另外一个方面, 实体定义:
</p>


<pre class="wikiPreformatted">    @Entity
    @XmlRootElement
    @Table(uniqueConstraints = @UniqueConstraint(columnNames = "email"))
    public class Member implements Serializable {
       /** Default value included to remove warning. Remove or modify at will. **/
       private static final long serialVersionUID = 1L;
    
       @Id
       @GeneratedValue
       private Long id;
    
       @NotNull
       @Size(min = 1, max = 25)
       @Pattern(regexp = "[A-Za-z ]*", message = "must contain only letters and spaces")
       private String name;
    
       @NotNull
       @NotEmpty
       @Email
       private String email;
    
       @NotNull
       @Size(min = 10, max = 12)
       @Digits(fraction = 0, integer = 12)
       @Column(name = "phone_number")
       private String phoneNumber;    
       // getters / setters
    } </pre>
<p class="wikiPara">
   
</p>


<p class="wikiPara">
    
很简单的一个entity mapping, 需要注意的是<tt>javax.xml.bind.annotation.XmlRootElement</tt> 是JAXB里面的一个annotation, 在这里可以把这个实体对象转化成xml表示
</p>

<p class="wikiPara">
还有就是这个entity里面定义了一些BV的annotation, 具体可以参考<a href="http://hibernate.org/subprojects/validator/docs" target="" class="regularLink">Hibernate Validator的文档</a>.
</p>

<p class="wikiPara">
Okay, 本实例中用到的其它技术暂时不做介绍了, 下面终于该进入正题了
</p>

<p class="wikiPara">
上面介绍过了, 这个实例使用的是JBoss AS7中的数据源(<tt>java:jboss/datasources/KitchensinkQuickstartDS</tt>), 那么, 我们接下来就是看看如何做很少的更改, 让这个实例使用insinispan做为存储替换掉数据源中使用H2
</p>


<p class="wikiPara">
首先, 是添加依赖, 因为我们这里是想要通过Hibernate OGM, 把实体对象保存进Infinispan当中, 所以只需要加入下面的依赖项即可:
</p>


<pre class="wikiPreformatted">        &lt;dependency&gt;
            &lt;groupId&gt;org.hibernate.ogm&lt;/groupId&gt;
            &lt;artifactId&gt;hibernate-ogm-core&lt;/artifactId&gt;
            &lt;version&gt;4.0.0-SNAPSHOT&lt;/version&gt;
            &lt;scope&gt;provided&lt;/scope&gt;
        &lt;/dependency&gt;        
        &lt;dependency&gt;
            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
            &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;
            &lt;version&gt;1.6.6&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;artifactId&gt;infinispan-core&lt;/artifactId&gt;
            &lt;groupId&gt;org.infinispan&lt;/groupId&gt;
            &lt;version&gt;5.1.5.FINAL&lt;/version&gt;
            &lt;scope&gt;provided&lt;/scope&gt;
        &lt;/dependency&gt;</pre>

<p class="wikiPara">
    
接下来就是修改persistence.xml了, 在上文曾经提到过, Hibernate OGM本身也是一个JPA的实现, 但是由于JBoss AS7默认集成的是Hibernate ORM 4, 所以我们需要在persistence.xml中显示的声明我们希望使用Hibernate OGM作为JPA的实现.
</p>

<pre class="wikiPreformatted">     &lt;persistence version="2.0"
       xmlns="http://java.sun.com/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
            http://java.sun.com/xml/ns/persistence
            http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd"&gt;
       &lt;persistence-unit name="primary"&gt;
           &lt;provider&gt;org.hibernate.ogm.jpa.HibernateOgmPersistence&lt;/provider&gt;
           &lt;properties&gt;
               &lt;property name="hibernate.ogm.datastore.provider"
                         value="org.hibernate.ogm.datastore.infinispan.impl.InfinispanDatastoreProvider"/&gt;
               &lt;property name="hibernate.ogm.infinispan.configuration_resourcename" value="infinispan-ogm-config.xml"/&gt;
           &lt;/properties&gt;
           &lt;class&gt;org.jboss.as.quickstarts.kitchensink.model.Member&lt;/class&gt;
       &lt;/persistence-unit&gt;
    &lt;/persistence&gt;</pre>

<p class="wikiPara">
    
在这个更新过的文件中我们可以看到如下的变化:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem">使用 <tt>org.hibernate.ogm.jpa.HibernateOgmPersistence</tt> 作为JPA的实现</li>
<li class="wikiUnorderedListItem">去掉了datasource的引用, Hibernate OGM不使用RMDBS   </li>
<li class="wikiUnorderedListItem">通过 <tt>hibernate.ogm.datastore.provider</tt>指定使用infinispan作为data store</li>
<li class="wikiUnorderedListItem">通过 <tt>hibernate.ogm.infinispan.configuration_resourcename</tt> 属性指定infinispan的配置文件</li>
</ul>

<p class="wikiPara">
<tt>src/main/webapp/WEB-INF/kitchensink-quickstart-ds.xml</tt> 这个文件已经没有用了,可以删掉.
</p>

<p class="wikiPara">
至此, 配置方面就需要这么多的改动, 很简单吧
</p>

<p class="wikiPara">
现在, 我们已经通过使用Hibernate OGM, 把底层的存储从RMDBS切换成了Infinispan, 但是, 由于RMDBS和NO-SQL 本质的不同, 我们还需要做一些修改.
</p>

<h3 class="wikiHeadline3" id="H-Uuid"><a href="/2012/07/13/hibernate-ogm#H-Uuid">使用uuid作为主键</a></h3>

<p class="wikiPara">
在使用Hibernate ORM的时候, 我们通常会使用@GeneratedValue来得到数据库自动生成的id, 并且, 通常我们建议把id设置成long类型的以得到更好的性能.
</p>

<p class="wikiPara">
可是, 如果使用的是NO-SQL的话, 如果是K-V类型的NO-SQL的话,他们是没有一个主键的概念的 (mongodb等文档型数据库是会提供自动生成的id的), 所以为了统一, 并且保证全局唯一, 在Hibernate OGM中我们建议使用UUID作为主键生成策略, 并且, 在Hibernate ORM中早已提供了此种策略, 我们在这里可以直接使用.
</p>

<p class="wikiPara">
<tt>org.jboss.as.quickstarts.kitchensink.model.Member#id</tt> 需要修改成如下的样子.
</p>


<pre class="wikiPreformatted">   @Id
    @GeneratedValue(generator = "uuid")
    @GenericGenerator(name = "uuid", strategy = "uuid2")
    private String id;</pre>


<p class="wikiPara">
注意, 改变了id的类型之后, 我们还需要修改 <tt>org.jboss.as.quickstarts.kitchensink.rest.MemberResourceRESTService#lookupMemberById</tt>
</p>

<pre class="wikiPreformatted">        @GET
    	@Path("/{id:[0-9][0-9,\\-]*}")
        @Produces(MediaType.APPLICATION_JSON)
        public Member lookupMemberById(@PathParam("id") String id) {
            Member member = repository.findById(id);
            if (member == null) {
                throw new WebApplicationException(Response.Status.NOT_FOUND);
            }
            return member;
        }</pre>


<p class="wikiPara">
这个方法提供了一个通过REST接口来查找Member的功能, 但是因为我们已经把id的类型改成了String, 所以我们需要对@Path做一些修改, 让它能够接受字符 -- <tt>@Path("/{id:[0-9,a-z][0-9,a-z,\\-]*}")</tt>
</p>

<h3 class="wikiHeadline3" id="H-"><a href="/2012/07/13/hibernate-ogm#H-">查询</a></h3>

<p class="wikiPara">
因为Hibernate OGM还是一个很年轻的项目, 有一些功能还没有完全的实现, 例如, 我们在JPA/Hibernate中经常使用的Criteria 查询, 但是幸好, Hibernate OGM和Hibernate Search有很好的集成, 我们可以使用Hibernate Search来完成这部分工作.
</p>

<p class="wikiPara">
<tt>org.jboss.as.quickstarts.kitchensink.data.MemberRepository#findByEmail</tt> 方法是通过email来查询一个Member, 内部实现是通过Criteria来查询的.
</p>

<p class="wikiPara">
<tt>org.jboss.as.quickstarts.kitchensink.data.MemberRepository#findAllOrderedByName</tt> 方法是查询所有的Member并且按照name排序, 同样是使用的Criteria.
</p>

<p class="wikiPara">
这两个方法的实现很简单, 相信大家都能看懂.
</p>

<p class="wikiPara">
那么, 我们现在就需要使用Hibernate Search替换掉这两个方法.
</p>

<p class="wikiPara">
首先, 把Hibernate Search相关的依赖添加进pom当中
</p>



<pre class="wikiPreformatted">        &lt;dependency&gt;
            &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
            &lt;artifactId&gt;hibernate-search-orm&lt;/artifactId&gt;
            &lt;version&gt;4.2.0-SNAPSHOT&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
            &lt;artifactId&gt;hibernate-search-engine&lt;/artifactId&gt;
            &lt;version&gt;4.2.0-SNAPSHOT&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
            &lt;artifactId&gt;hibernate-search-analyzers&lt;/artifactId&gt;
            &lt;version&gt;4.2.0-SNAPSHOT&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
            &lt;artifactId&gt;hibernate-search-infinispan&lt;/artifactId&gt;
            &lt;version&gt;4.2.0-SNAPSHOT&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.infinispan&lt;/groupId&gt;
            &lt;artifactId&gt;infinispan-lucene-directory&lt;/artifactId&gt;
            &lt;version&gt;5.1.5.FINAL&lt;/version&gt;
        &lt;/dependency&gt;</pre>

<p class="wikiPara">
        
这里所依赖的<tt>org.hibernate:hibernate-search-infinispan</tt>和<tt>org.infinispan:infinispan-lucene-directory</tt>提供了一个Lucene的Directory的实现, 可以把Lucene的index保存在infinispan当中, 从而实现比保存在文件系统当中更好的性能和可扩展性(因为Infinispan是一个分布式的数据网格系统).        
</p>

<p class="wikiPara">
在persistence.xml当中,我们需要添加上两个Hibernate Search的属性
这里所依赖的<tt>org.hibernate:hibernate-search-infinispan</tt>和<tt>org.infinispan:infinispan-lucene-directory</tt>提供了一个Lucene的Directory的实现, 可以把Lucene的index保存在infinispan当中, 从而实现比保存在文件系统当中更好的性能和可扩展性(因为Infinispan是一个分布式的数据网格系统).        
</p>

<p class="wikiPara">
在persistence.xml当中,我们需要添加上两个Hibernate Search的属性
</p>

<p class="wikiPara">
    </p>
<pre class="wikiPreformatted">&lt;property name="hibernate.search.default.directory_provider" value="infinispan"/&gt;
    &lt;property name="hibernate.search.infinispan.configuration_resourcename" value="infinispan.xml"/&gt;</pre>

    
第一个<tt>hibernate.search.default.directory_provider</tt>告诉Hibernate Search使用Infinispan作为Lucene Index Directory, 第二个指定了Hibernate Search所使用的Infinispan的配置文件.    


<p class="wikiPara">
接下来, 我们需要对<tt>org.jboss.as.quickstarts.kitchensink.model.Member</tt>做一些改动, 添加上Hibernate Search所需要的Annotation.
</p>

<pre class="wikiPreformatted">   @Entity
    @XmlRootElement
    @Indexed
    @Table(uniqueConstraints = @UniqueConstraint(columnNames = "email"))
    @Proxy(lazy = false)
    public class Member implements Serializable {
       /** Default value included to remove warning. Remove or modify at will. **/
       private static final long serialVersionUID = 1L;
    
       @Id
       @GeneratedValue(generator = "uuid")
       @GenericGenerator(name = "uuid", strategy = "uuid2")
       private String id;
    
       @NotNull
       @Size(min = 1, max = 25)
       @Pattern(regexp = "[A-Za-z ]*", message = "must contain only letters and spaces")
       @Fields({
    		   @Field(analyze = Analyze.NO, norms = Norms.NO, store = Store.YES, name = "sortableStoredName"),
    		   @Field(analyze = Analyze.YES, norms = Norms.YES)
       })
       private String name;
    
       @NotNull
       @NotEmpty
       @Email
       @Field(analyze = Analyze.NO)
       private String email;
    
       @NotNull
       @Size(min = 10, max = 12)
       @Digits(fraction = 0, integer = 12)
       @Column(name = "phone_number")
       @Field(analyze = Analyze.NO)
       private String phoneNumber;
</pre>


<p class="wikiPara">
第一个是@Indexed, 它告诉Hibernate Search, 这个实体类是需要被索引的, 还有@Field (在name和phoneNumber属性上)告诉Hibernate Search这两个属性是需要被索引的 
,具体信息请参考<a href="http://hibernate.org/subprojects/search/docs" target="" class="regularLink">Hibernate Search 文档</a>
</p>

<p class="wikiPara">
想要在保存一个实体对象的时候,让Hibernate Search自动索引的话, 我们需要使用<tt>org.hibernate.search.jpa.FullTextEntityManager</tt>来替换<tt>javax.persistence.EntityManager</tt>.
</p>

<p class="wikiPara">
<tt>org.jboss.as.quickstarts.kitchensink.service.MemberRegistration#register</tt>这个方法调用了<tt>EntityManager#persist</tt>, 那么我们需要做的就是把这个类中的<tt>@Inject private EntityManager em;</tt>换成 <tt>@Inject private FullTextEntityManager em</tt>;
       
这里, 之前的EntityManager和现在的FullTextEntityManager都是由CDI负责自动注入的, 可是, CDI并不知道如何创建Hibernate Search所特有的FullTextEntityManager, 所以, 为了让自动注入工作, 我们需要一个Producer.
</p>

<p class="wikiPara">
而这个Producer, 在我们的实例当中就是<tt>org.jboss.as.quickstarts.kitchensink.util.Resources</tt>, 它已经存在了, 用来提供EntityManager的注入和Logger的注入(<tt>org.jboss.as.quickstarts.kitchensink.util.Resources#produceLog</tt>)
</p>

<p class="wikiPara">
我们只需要添加Hibernate Search的内容 (CDI相关内容可以参考<a href="http://seamframework.org/Weld/Documentation" target="" class="regularLink">Weld文档</a>)
</p>

<pre class="wikiPreformatted">	@Produces
	public FullTextEntityManager getFullTextEntityManager() {
		return Search.getFullTextEntityManager( em );
	}

	@Produces
	@ApplicationScoped
	public SearchFactory getSearchFactory() {
		return getFullTextEntityManager().getSearchFactory();
	}

	@Produces
	@ApplicationScoped
	public QueryBuilder getMemberQueryBuilder() {
		return getSearchFactory().buildQueryBuilder().forEntity( Member.class ).get();
	}</pre>


<p class="wikiPara">
Okay, 现在万事俱备, 我们可以使用Hibernate Search来替换<tt>org.jboss.as.quickstarts.kitchensink.data.MemberRepository</tt>中那两个使用了Criteria的方法了
</p>

<p class="wikiPara">
注意, <tt>org.jboss.as.quickstarts.kitchensink.data.CriteriaMemberRepository#findById</tt> 是需要把参数的类型从long改成String的, 除此之外, Hibernate OGM是支持直接使用id进行查询的, 所以不需要修改.
</p>

<p class="wikiPara">
<tt>org.jboss.as.quickstarts.kitchensink.data.MemberRepository#findByEmail</tt> 方法是通过email来查询一个Member, 内部实现是通过Criteria来查询的.
</p>

<p class="wikiPara">
<tt>org.jboss.as.quickstarts.kitchensink.data.MemberRepository#findAllOrderedByName</tt> 方法是查询所有的Member并且按照name排序, 同样是使用的Criteria.
</p>

<p class="wikiPara">
	</p>
<pre class="wikiPreformatted">@Inject
	private QueryBuilder queryBuilder;

	@Inject
	private FullTextEntityManager em;

	@Override
	public Member findById(String id) {
		return em.find( Member.class, id );
	}

	@Override
	public Member findByEmail(String email) {
		Query luceneQuery = queryBuilder
				.keyword()
				.onField( "email" )
				.matching( email )
				.createQuery();
		List resultList = em.createFullTextQuery( luceneQuery )
				.initializeObjectsWith( ObjectLookupMethod.SKIP, DatabaseRetrievalMethod.FIND_BY_ID )
				.getResultList();
		if ( resultList.size() &gt; 0 ) {
			return (Member) resultList.get( 0 );
		}
		else {
			return null;
		}
	}

	@Override
	public List&lt;Member&gt; findAllOrderedByName() {
		Query luceneQuery = queryBuilder
				.all()
				.createQuery();
		List resultList = em.createFullTextQuery( luceneQuery )
				.initializeObjectsWith( ObjectLookupMethod.SKIP, DatabaseRetrievalMethod.FIND_BY_ID )
				.setSort( new Sort( new SortField( "sortableStoredName", SortField.STRING_VAL ) ) )
				.getResultList();
		return resultList;
	}</pre>

	


<p class="wikiPara">
可以看到, 在这个新的类中, 我们首先使用CDI自动注入了Hibernate Search的QueryBuilder和FullTextEntityManager (参见上面修改后的<tt>org.jboss.as.quickstarts.kitchensink.util.Resources</tt> 工厂类)
</p>

<p class="wikiPara">
在findById方法中, <tt>FullTextEntityManager#find</tt>实际上是代理给Hibernate OGM来处理的.
</p>

<p class="wikiPara">
而在其余两个方法中, 则完全是使用Hibernate Search的Query API创建了查询条件, 然后交过Lucene来搜索的, 还记得我们上面修改了Member类, 在它被保存的时候创建Lucene索引的吧 (另, 上面提到过, 这个索引也是保存在infinispan当中的)		       
</p>


<h3 class="wikiHeadline3" id="H-JBossAS7"><a href="/2012/07/13/hibernate-ogm#H-JBossAS7">部属到JBoss AS 7</a></h3>

<p class="wikiPara">
方便的是, 我的同事<a href="https://github.com/hferentschik" target="" class="regularLink">Hardy</a>已经准备好了这样一个修改过的<a href="https://github.com/hferentschik" target="" class="regularLink">项目</a>, 你可以直接从前面的链接中下载到本文中所介绍到的项目的源代码.
</p>

<p class="wikiPara">
这是一个maven项目, 所以你需要先安装好maven, Hardy还很贴心的在pom里面使用了<a href="http://cargo.codehaus.org/" target="" class="regularLink">cargo</a>插件, 所以你不需要下载JBoss AS 7了(尽管我还是推荐你下载一个看看, 很值得的), cargo会自动帮你下载, 并且完成部属等事情.
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem">编译 <tt>$ mvn clean package</tt>
</li>
<li class="wikiUnorderedListItem">运行 <tt>$ mvn cargo:run</tt>
</li>
<li class="wikiUnorderedListItem">测试(基于<a href="http://www.arquillian.org" target="" class="regularLink">Arquillian</a>) <tt>$mvn test</tt>
</li>
</ul>

<p class="wikiPara">
跑起来之后你可以访问<a href="http://127.0.0.1:8080/ogm-kitchensink" target="" class="regularLink">http://127.0.0.1:8080/ogm-kitchensink</a> 来看看具体的效果.
</p>

<p class="wikiPara">
另外, 如果你尝试输入一个不合法的名字, 电话号码或者email地址的话, 你会看到错误提示, 这就是Bean Validation所自动帮你提供的输入校验, 来看看代码, 还记得 <tt>org.jboss.as.quickstarts.kitchensink.model.Member</tt> 类中的属性上定义的Bean Validation Annotations么?(下面代码中我只保留了这部分的annotation)
</p>

<pre class="wikiPreformatted">        @NotNull
	@Size(min = 1, max = 50)
	@Pattern(regexp = "[A-Za-z ]*", message = "must contain only letters and spaces")
	private String name;
	
	@NotNull
	@NotEmpty
	@Email
	private String email;

        @NotNull
	@Size(min = 10, max = 12)
	@Digits(fraction = 0, integer = 12)
	private String phoneNumber;</pre>



<p class="wikiPara">
Okay, 现在你已经有了一个使用Hibernate OGM + NO-SQL的程序跑在 JBoss AS7上面了
</p>

<p class="wikiPara">
另外, JBoss AS 7的启动速度很快, 非常快!
</p>

<p class="wikiPara">
    </p>
<pre class="wikiPreformatted">23:27:10,050 INFO  [org.jboss.as] (Controller Boot Thread) JBAS015874: 
JBoss AS 7.1.1.Final "Brontes" started in 2009ms - Started 133 of 208 services (74 services are passive or on-demand)</pre>
  


<p class="wikiPara">
上面的日志是在我的机器上启动的速度, 应该和Tomcat也差不多了吧, 但是JBoss AS7 可是一个完整的通过Java EE6认证的应用服务器, 而Tomcat只是一个servlet container.
</p>

<p class="wikiPara">
Hardy还非常贴心的提供了一个小工具来帮助我们自动的插入数据, 这就是在项目根目录下的<tt>member-generator.rb</tt>
</p>

<p class="wikiPara">
要使用这个工具的话, 你首先需要安装(gem install)如下的gem:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem">gem install httparty</li>
<li class="wikiUnorderedListItem">gem install nokogiri</li>
<li class="wikiUnorderedListItem">gem install choice</li>
</ul>

<p class="wikiPara">
然后就可以通过执行下面的命令来创建一些测试数据了.
</p>

<pre class="wikiPreformatted">ruby member-generator.rb -a http://localhost:8080/ogm-kitchensink -c 20</pre>


<h3 class="wikiHeadline3" id="H-Openshift"><a href="/2012/07/13/hibernate-ogm#H-Openshift">部属到 Openshift</a></h3>

<p class="wikiPara">
<a href="https://openshift.redhat.com/app/" target="" class="regularLink">openshift</a>是Redhat所提供了一个Paas服务, 它背后的技术已经开源, 可以在<a href="https://github.com/openshift" target="" class="regularLink">这里</a>找到其源代码和众多的实例项目.
</p>

<p class="wikiPara">
openshift同时提供免费的服务和付费的服务, 对于我们简单的玩玩来讲, 免费的账户已经足够了, 但是如果你的项目是一个正式上线的项目, 还是推荐使用收费的带有支持的服务的.
</p>

<p class="wikiPara">
openshift所支持的平台包括:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem">Java</li>
<li class="wikiUnorderedListItem">Ruby</li>
<li class="wikiUnorderedListItem">Node.js</li>
<li class="wikiUnorderedListItem">Python</li>
<li class="wikiUnorderedListItem">PHP</li>
<li class="wikiUnorderedListItem">Perl</li>
</ul>

<p class="wikiPara">
并且它还提供了开箱即用的数据库支持, 包括RMDBS和NO-SQL
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem">Mysql</li>
<li class="wikiUnorderedListItem">PostgreSQL</li>
<li class="wikiUnorderedListItem">Mongodb</li>
</ul>



<p class="wikiPara">
例如我们可以在常见部属一个自己的wordpress或者drupal程序, 很方便.
</p>

<p class="wikiPara">
对于我们Java程序员来讲, openshift最重要的是它内置了JBoss AS7 (和其商业版本JBoss EAP6)的支持, 所以, 对于想要尝试Java EE6的童鞋来说就有福了, 你可以直接使用此服务.
</p>

<p class="wikiPara">
首先, 第一步没得说, 先到<a href="https://openshift.redhat.com/app/account/new" target="" class="regularLink">这里</a>来创建一个免费的账号.
</p>

<p class="wikiPara">
然后从<a href="https://openshift.redhat.com/app/getting_started" target="" class="regularLink">这里</a>下载客户端, Linux / Mac / Windows都有对应的客户端供下载.
</p>

<p class="wikiPara">
接着, 你需要创建一个domain, 命令为 <tt>rhc domain create -n ${my domain name}</tt>, 之后, 你所有部属到openshift上的应用都会是<tt>http://${app name}-${domain name}.rhcloud.com</tt>的格式(免费账户可以创建3个程序, 并且你可以使用自己的域名).
</p>

<p class="wikiPara">
然后该创建应用了, 我们想要把这个程序部属到JBoss AS7上, 使用下面的命令<tt>rhc-create-app -a ${your app name} -t jbossas-7 --nogit</tt>, 命令完成之后, 你会从输出中看到有一个git repo的地址, 现在, 你可以把这个地址作为一个remote添加到之前clone出来的ogm-kitchensink项目当中
</p>

<pre class="wikiPreformatted">git remote add openshift ${repo-url}</pre>


<p class="wikiPara">
然后, 把ogm-kitchensink 推送到openshift提供的git repo当中
</p>

<pre class="wikiPreformatted">git push -f openshift master</pre>


<p class="wikiPara">
最后, 你就可以访问你的应用了, 地址如同之前所说的, 是 </p>
<pre class="wikiPreformatted">http://${your app name}-${your domain name}.rhcloud.com</pre>



<p class="wikiPara">
我创建了一个demo, 可以访问<a href="http://ogm-stliu.rhcloud.com" target="" class="regularLink">http://ogm-stliu.rhcloud.com</a>.
</p>
</div>

