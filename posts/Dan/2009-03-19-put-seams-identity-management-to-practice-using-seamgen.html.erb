---
title: "Put Seam's identity management to practice using seam-gen"
author: "Dan Allen"
blogger_name: "Dan"
creation_date: "19-03-2009"
original_tags: [Seam,Seam News,Security]
tags: [Seam]

relative_url: /2009/03/19/put-seams-identity-management-to-practice-using-seamgen
slug: put-seams-identity-management-to-practice-using-seamgen
lace: http://in.relation.to/10904.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2009/03/19/put-seams-identity-management-to-practice-using-seamgen
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
Adding to the stockpile of features that I've packed into seam-gen in recent months, I just committed a new seam-gen command that generates a front-end to Seam's <a href="http://docs.jboss.com/seam/2.1.0.SP1/reference/en-US/html/security.html#d0e8747" target="" class="regularLink">identity management API</a> (<a href="http://jira.jboss.com/jira/browse/JBSEAM-3717" target="" class="regularLink">JBSEAM-3717</a>). Identity management is one of the most significant additions to Seam in the Seam 2 code base. But since its just set of framework classes, you need something to tie it into your application to truly appreciate (or even give notice to) its potential.
</p>

<p class="wikiPara">
With that in mind, I've introduced the new seam-gen command <tt>add-identity-management</tt>. This command weaves the components, views, and configurations of a front-end for managing users and roles using Seam's identity management API, adopted from the <a href="http://anonsvn.jboss.org/repos/seam/trunk/examples/seamspace" target="" class="regularLink">seamspace</a> example, into an existing seam-gen project. By <i class="wikiEmphasis">manage</i>, I mean create, read, update, and delete (CRUD). While that may sound like it requires a lot of supplemental code, it really doesn't. The API not only provides data access components, it also includes Seam components that prep the data for the view and respond to UI events (i.e., UI controllers), glue code which you would otherwise have to write when creating these screens. The command also generates three JPA entity classes that bridge the API to your database, which I'll introduce shortly. But first, I want to encourage you to just try it.
</p>

<h2 class="wikiHeadline2" id="H-TryingItOut"><a href="/2009/03/19/put-seams-identity-management-to-practice-using-seamgen#H-TryingItOut">Trying it out</a></h2>

<p class="wikiPara">
You can put Seam's identity management to practice using seam-gen in three simple steps:
</p>

<ol class="wikiOrderedList">
<li class="wikiOrderedListItem"> Check out the Seam trunk from SVN and build it (or simply download Seam 2.1.2.GA when it's available)</li>
<li class="wikiOrderedListItem"> Seed a new project by invoking <tt>seam setup</tt>
</li>
<li class="wikiOrderedListItem"> Generate the new project complete with identity management screens by invoking <tt>seam create-project add-identity-management</tt>
</li>
</ol>

<p class="wikiPara">
If you already have a seam-gen project started, and you haven't changed it too much (at least you haven't touched the <tt>&lt;identity:security&gt;</tt> component definition), you simply run <tt>seam add-identity-management</tt> from inside your project (use the full path to <tt>seam</tt> if it's not in your PATH environment variable). In either case, be sure to follow the post-operative instructions that get printed to the console, which are contingent on how your application is setup (in particular, your hibernate.hbm2ddl.auto setting).
</p>

<h2 class="wikiHeadline2" id="H-TakingAPeek"><a href="/2009/03/19/put-seams-identity-management-to-practice-using-seamgen#H-TakingAPeek">Taking a peek</a></h2>

<p class="wikiPara">
So what do you get for your labor? Weeks worth of effort saved. On the next deployment of the application, you'll be able to manage users and roles, then be able to immediately turn around and login in using any one of the users you create. Here's a screenshot of the identity management launch page:
</p>

<p class="wikiPara">
<img src="/images/10899.png" width="595" height="379">
</p>

<p class="wikiPara">
You can then check out the user management page, which lists each user, the roles the user is granted, and whether the user is enabled.
</p>

<p class="wikiPara">
<img src="/images/10901.png" width="595" height="245">
</p>

<p class="wikiPara">
From the user management screen, you can add, edit, or delete a user. The add and edit operations take you to the user detail/editor page, shown here:
</p>

<p class="wikiPara">
<img src="/images/10903.png" width="595" height="381">
</p>

<p class="wikiPara">
There are similar screens for managing the roles that can be assigned to a user. Here's the role management screen, which shows the roles and groups. A group is a role of a role, which is an easy way to assign the same roles to multiple users or to have role inheritance (e.g., a person in the admin role is also a member).
</p>

<p class="wikiPara">
<img src="/images/10900.png" width="595" height="287">
</p>

<p class="wikiPara">
The role management page also supports the add, edit, and delete operations. Here's the detail/editor page for a role:
</p>

<p class="wikiPara">
<img src="/images/10902.png" width="594" height="271">
</p>

<p class="wikiPara">
You'll notice that there is one user and three roles that are supplied out of the box. SQL statements that insert three common roles (admin, member and guest) and a user (admin, who is granted the admin role) into the database get appended to the project's resources/import-dev.sql script. You'll need to run these statements manually unless the database is set to be created by Hibernate's schema export tool when the application starts (i.e., hibernate.hbm2ddl.auto is create or create-drop).
</p>

<h2 class="wikiHeadline2" id="H-HowAccessIsGranted"><a href="/2009/03/19/put-seams-identity-management-to-practice-using-seamgen#H-HowAccessIsGranted">How access is granted</a></h2>

<p class="wikiPara">
What about security? That is the topic of the day after all. Well, you don't have to worry about locking down access, it's already covered. The identity management screens are secured by two built-in permissions, seam.user and seam.role, which are enforced by Seam's permission resolver. Both permissions are granted to users with the admin role by the following rule that gets appended to the project's security rules file, resources/security.drl, by seam-gen. This rule is consulted by Seam's rule-based permission resolver when any identity management CRUD operation is performed.
</p>

<pre class="wikiPreformatted">rule ManageAccount
   no-loop
   activation-group "permissions"
when
   $perm: PermissionCheck(name == "seam.user" || == "seam.role", granted == false)
   Role(name == "admin")
then
   $perm.grant();
end</pre>


<p class="wikiPara">
You can customize this rule as needed, as well as the names of the role and even the admin user. Just use the identity management screens!
</p>

<h2 class="wikiHeadline2" id="H-WhereToLookForAccounts"><a href="/2009/03/19/put-seams-identity-management-to-practice-using-seamgen#H-WhereToLookForAccounts">Where to look for accounts</a></h2>

<p class="wikiPara">
Of course, there's still some work you have to do to solder Seam's notion of a user account onto your domain model, but that's to be expected. Speaking of the user account, let's see how that gets mapped.
</p>

<p class="wikiPara">
Seam provides a pluggable mechanism for defining an identity store. An identity store is what performs that data access for users and roles. Seam provides a JPA and an LDAP provider. We're going to focus on the JPA provider since that's what seam-gen sets up.
</p>

<p class="wikiPara">
In the spirit of a declarative style of programming, you sprinkle identity-related annotations over a handful of properties on the JPA entity classes which you plan on using to map user accounts and roles to the database. These annotations, which are explained in detail in the <a href="http://docs.jboss.com/seam/2.1.0.SP1/reference/en-US/html/security.html#d0e8863" target="" class="regularLink">reference documentation</a> but are pretty self explanatory, are @UserPrincipal, @UserPassword, @UserEnabled, @UserRoles, @RoleName, @RoleGroups (and also @RoleConditional, which has special meaning). You then activate the JPA identity store in the Seam component descriptor and tell it which JPA entity class has the user annotations and which one the role annotations.
</p>

<pre class="wikiPreformatted">&lt;security:jpa-identity-store
    user-class="com.domain.model.UserAccount"
    role-class="com.domain.model.UserRole"/&gt;</pre>


<p class="wikiPara">
Seam has parallel support for persistent permissions, which function as ACLs. Again, you have to instruct Seam as to which annotated JPA entity class will map a permission to the database using a component definition in the component descriptor:
</p>

<pre class="wikiPreformatted">&lt;security:jpa-permission-store
   user-permission-class="com.domain.model.UserPermission"/&gt;</pre>


<p class="wikiPara">
At this point, you have to do the legwork for creating a front-end to manage persistence permissions since they are so closely tied to the business case. But at least the API is all setup and ready to employ. See the seamspace example in the Seam distribution for an example of persistence permissions, as well as how the identity management API is used as a whole. You should also check out the <a href="http://docs.jboss.com/seam/2.1.0.SP1/reference/en-US/html/security.html" target="" class="regularLink">security chapter</a> of the Seam reference documentation to learn about all the components in the identity and permissions management API and how they work.
</p>

<h2 class="wikiHeadline2" id="H-RunningItByYouOneMoreTime"><a href="/2009/03/19/put-seams-identity-management-to-practice-using-seamgen#H-RunningItByYouOneMoreTime">Running it by you one more time</a></h2>

<p class="wikiPara">
In summary, here's what seam-gen adds to your project when you issue the command <tt>seam add-identity-management</tt>
</p>

<ol class="wikiOrderedList">
<li class="wikiOrderedListItem"> The /view/useradmin directory containing views for managing users and roles as well as images and a stylesheet to support them</li>
<li class="wikiOrderedListItem"> A link in the main menu bar to the identity management launch page</li>
<li class="wikiOrderedListItem"> UserAccount, UserRole, and UserPermission annotated JPA entity classes</li>
<li class="wikiOrderedListItem"> A blanket security rule for allowing the admin role to manage users and roles</li>
<li class="wikiOrderedListItem"> SQL statements for seeding the database with an admin user and a typical set of roles</li>
<li class="wikiOrderedListItem"> The component definitions that activate the JPA identity and permission stores </li>
</ol>

<p class="wikiPara">
Now you have no excuse not to give Seam's identity management a try!
</p>

<p class="wikiPara">
<i class="wikiEmphasis">Credit goes to Shane Bryzak for developing the management screens and providing instructions for how to integrate them into a standalone application.</i>
</p>

<p class="wikiPara">
 <b>UPDATE:</b> Thanks to Jason Porter, the <tt>add-identity-management</tt> command is available for ICEfaces projects in addition to RichFaces projects.</p>
</div>

