---
title: "Using an alternate JPA provider with Seam"
author: "Dan Allen"
blogger_name: "Dan"
creation_date: "09-04-2009"
original_tags: [Interoperability,JPA,Seam,Seam News]
tags: [JPA,Seam]

relative_url: /2009/04/09/using-an-alternate-jpa-provider-with-seam
slug: using-an-alternate-jpa-provider-with-seam
lace: http://in.relation.to/11081.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2009/04/09/using-an-alternate-jpa-provider-with-seam
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
What, you didn't think it was possible? Of course it is! Although the Seam development team encourages you to use Hibernate as the JPA provider, Seam is capable of working with any JPA provider. This entry will show you how.
</p>

<h2 class="wikiHeadline2" id="H-WhyHibernateOrWhyNot"><a href="/2009/04/09/using-an-alternate-jpa-provider-with-seam#H-WhyHibernateOrWhyNot">Why Hibernate or why not?</a></h2>

<p class="wikiPara">
Hibernate is recommended for a good reason. It provides several <q>vendor extensions</q> that Seam is able to leverage to your advantage. If you are willing to pass on these enhancements (most notably manual flushing, advanced mappings and Hibernate Search), then you should have no problem swapping out Hibernate for another provider. In fact, I encourage you to try an alternate provider so that you can appreciate the value Hibernate adds ;)
</p>

<p class="wikiPara">
Enough with the advice, let's get to it.
</p>

<h2 class="wikiHeadline2" id="H-ChangingTheJPAPersistenceProvider"><a href="/2009/04/09/using-an-alternate-jpa-provider-with-seam#H-ChangingTheJPAPersistenceProvider">Changing the JPA persistence provider</a></h2>

<p class="wikiPara">
There are three steps to changing the JPA persistence provider in a Seam application:
</p>

<ol class="wikiOrderedList">
<li class="wikiOrderedListItem"> Make sure the JPA provider is deployed to the application server (the JARs are available on the classpath)</li>
<li class="wikiOrderedListItem"> Declare the SPI class in persistence.xml</li>
<li class="wikiOrderedListItem"> Tell Seam to use the generic JPA persistence provider manager component (instead of Hibernate)</li>
</ol>

<p class="wikiPara">
After you have the JPA provider configured, you should check your code for uses of Hibernate-specific extensions. This will keep you from bumping into exceptions.
</p>

<h4 class="wikiHeadline4" id="H-Step1PreparingAnAlternateProvider"><a href="/2009/04/09/using-an-alternate-jpa-provider-with-seam#H-Step1PreparingAnAlternateProvider">Step 1: Preparing an alternate provider</a></h4>

<p class="wikiPara">
The first step is usually just deciding to use the JPA provider that comes with the application server. For instance, if you are using GlassFish V2, TopLink Essentials is the bundled provider. Otherwise, you have to add the JAR files to the application server's extension directory. You had to do this same step if you have ever used Hibernate on GlassFish.
</p>

<h4 class="wikiHeadline4" id="H-Step2AttachingThePersistenceUnitToTheProvider"><a href="/2009/04/09/using-an-alternate-jpa-provider-with-seam#H-Step2AttachingThePersistenceUnitToTheProvider">Step 2: Attaching the persistence unit to the provider</a></h4>

<p class="wikiPara">
The second step is how you tell JPA which provider you want to use. You enter the SPI class that extends the <tt>javax.persistence.spi.PersistenceProvider</tt> interface in the <tt>&lt;provider&gt;</tt> element under <tt>&lt;persistence-unit&gt;</tt> in the persistence unit descriptor (persistence.xml).
</p>

<pre class="wikiPreformatted">&lt;persistence xmlns="http://java.sun.com/xml/ns/persistence" 
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd" 
   version="1.0"&gt;
   &lt;persistence-unit name="pu"&gt;
      &lt;provider&gt;oracle.toplink.essentials.ejb.cmp3.EntityManagerFactoryProvider&lt;/provider&gt;
      ...
   &lt;/persistence-unit&gt;
&lt;/persistence&gt;</pre>


<p class="wikiPara">
If there is only one provider on the classpath, JPA will automatically detect it and use it. It's when you have more than one JPA provider on the classpath that you have to be explicit.
</p>

<p class="wikiPara">
You may need to specify other settings in persistence.xml that are specific to the provider, just like Hibernate has its own set of properties. For instance, with TopLink, you need to add a property that sets the <a href="http://www.oracle.com/technology/products/ias/toplink/JPA/essentials/toplink-jpa-extensions.html#CJAEBIJC" target="" class="regularLink">target database</a>:
</p>

<pre class="wikiPreformatted">&lt;property name="toplink.target-database" value="MySQL4"/&gt;</pre>


<p class="wikiPara">
I also find that when I am using an exploded archive, I have to tell TopLink not to exclude unlisted classes. That's done by adding the following element above the <tt>&lt;properties&gt;</tt> element:
</p>

<pre class="wikiPreformatted">&lt;exclude-unlisted-classes&gt;false&lt;/exclude-unlisted-classes&gt;</pre>


<p class="wikiPara">
Your mileage may vary. I'll admit that depending on your packaging, getting the persistence unit setup right can be hairy. This has nothing to do with Seam.
</p>

<h4 class="wikiHeadline4" id="H-Step3BreakingTheNewsToSeamThatYouWontBeUsingHibernate"><a href="/2009/04/09/using-an-alternate-jpa-provider-with-seam#H-Step3BreakingTheNewsToSeamThatYouWontBeUsingHibernate">Step 3: Breaking the news to Seam that you won't be using Hibernate</a></h4>

<p class="wikiPara">
The third and final step to configuring the application is to give Seam the hint as to which persistence provider manager component to use. That's how Seam keeps straight which JPA providers support which features. For any non-Hibernate JPA provider, you define the generic JPA persistence provider in the Seam component descriptor (components.xml).
</p>

<pre class="wikiPreformatted">&lt;components xmlns="http://jboss.com/products/seam/components"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   ...
   xsi:schemaLocation="
      ...
      http://jboss.com/products/seam/components http://jboss.com/products/seam/components-2.1.xsd"&gt;

   ...
   &lt;component name="org.jboss.seam.persistence.persistenceProvider"
      class="org.jboss.seam.persistence.PersistenceProvider"/&gt;
&lt;/components&gt;</pre>


<p class="wikiPara">
Again, this is only necessary if Hibernate is on the classpath, since Seam assumes you want to use Hibernate in that case (see <a href="http://jira.jboss.com/jira/browse/JBSEAM-2785" target="" class="regularLink">JBSEAM-2785</a> for plans to fix this <q>feature</q>).
</p>

<p class="wikiPara">
However, you will run into problems if you are using Seam &lt; 2.1.2. In older versions, Seam would throw an exception when it attempted to switch the persistence contexts to manual flush mode prior to rendering (<a href="http://jira.jboss.com/jira/browse/JBSEAM-3030" target="" class="regularLink">JBSEAM-3030</a>), a flush mode that is only available in Hibernate. This has now been fixed. Until you have a chance to upgrade, you need to instead add the following component to your application to suppress this exception:
</p>

<pre class="wikiPreformatted">package com.domain.app.persistence;

import javax.persistence.EntityManager;
import org.jboss.seam.annotations.Name;
import org.jboss.seam.persistence.PersistenceProvider;

@Name("org.jboss.seam.persistence.persistenceProvider")
public class NoManualFlushPersistenceProvider extends PersistenceProvider {

   @Override
   public void setFlushModeManual(EntityManager entityManager) {
      // no-op
   }
}</pre>


<p class="wikiPara">
You should now be able to start your Seam application using the alternate JPA provider! Now it's time to reset your expectations.
</p>

<h2 class="wikiHeadline2" id="H-Implications"><a href="/2009/04/09/using-an-alternate-jpa-provider-with-seam#H-Implications">Implications</a></h2>

<p class="wikiPara">
First and foremost, without Hibernate, manual flushing will not be available. Therefore, when using a long-running conversation, you are likely to get flushing of the persistence context after each request. The reason for this is that Seam uses a wrapper (global) transaction around each non-faces request and two transactions for each faces request. Since a JPA provider will flush prior to the transaction committing, you are guaranteed the flush will happen on every request. You can choose to disable Seam's wrapper transactions by configuring the <tt>&lt;core:init&gt;</tt> component in the Seam component descriptor as follows:
</p>

<pre class="wikiPreformatted">&lt;core:init transaction-management-enabled="false"/&gt;</pre>


<p class="wikiPara">
Now you can control flushing by avoiding any calls to transactional methods until you are ready to send dirty changes to the database. That's the JPA way, so to speak.
</p>

<p class="wikiPara">
Also be aware that you cannot cast EntityManager to the FullTextEntityManager (Hibernate Search). Also, when you retrieve the delegate from the EntityManager, it will be the delegate for the provider, which is a <tt>oracle.toplink.essentials.ejb.cmp3.EntityManager</tt> in the case of TopLink.
</p>

<h2 class="wikiHeadline2" id="H-FeelFree"><a href="/2009/04/09/using-an-alternate-jpa-provider-with-seam#H-FeelFree">Feel free</a></h2>

<p class="wikiPara">
There you have it, Seam with an alternate JPA provider! That's the beauty of leveraging the Java EE standards. In fact, you can even grab seam-gen and create a Seam project that you can deploy to GlassFish, the ultimate proof that Seam is a Java EE framework. While you may enjoy your freedom, you'll also miss out on the nice features that Hibernate adds. Still, it's good to know you have options.
</p>

<p class="wikiPara">
<i class="wikiEmphasis">The official instructions are maintained as <a href="http://seamframework.org/Documentation/HowDoIUseAnAlternateJPAProvider" target="" class="regularLink">an FAQ</a> on the Seam wiki.</i></p>
</div>

