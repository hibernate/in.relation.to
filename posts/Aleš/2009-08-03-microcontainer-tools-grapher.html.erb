---
title: "Microcontainer Tools - Grapher"
author: "Aleš Justin"
blogger_name: "Aleš"
creation_date: "03-08-2009"
original_tags: []
tags: []

relative_url: /2009/08/03/microcontainer-tools-grapher
slug: microcontainer-tools-grapher
lace: http://in.relation.to/12065.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2009/08/03/microcontainer-tools-grapher
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
Last few weeks, apart from doing <i class="wikiEmphasis">real</i> work ;-), I've been hacking away a simple tool to display MC's components.
I named the project <a href="http://anonsvn.jboss.org/repos/jbossas/projects/mc-tools/grapher/trunk/" target="" class="regularLink">Grapher</a>, as that's what the project/app does - it creates a plain graph.
</p>

<p class="wikiPara">
<a href="/service/File/12062" target="" class="regularLink"><img src="/images/12062.png"></a>
</p>

<p class="wikiPara">
This is a plain graph of current JBoss5.1.0.GA's MC components.
As we could already learn in <q><a href="http://java.dzone.com/articles/a-look-inside-jboss-microconta" target="" class="regularLink">DZone and MC component models</a></q>, the component types (currently) span from POJOs, MBeans, Aliases, Deployments, Core services to any extension (KernelRegistryPlugin).
And you can see there is a lot of them and it's not easy to put them all on the plain.
</p>

<pre class="wikiPreformatted">[AllGraphCreator] Vertices: 830, Edges: 1563</pre>


<p class="wikiPara">
I'm using <a href="http://www.jgraph.com" target="" class="regularLink">JGraph</a> to do the rendering, while using its layout component only for personal usage (license requirement).
</p>

<p class="wikiPara">
The project source code lives <a href="http://anonsvn.jboss.org/repos/jbossas/projects/mc-tools/grapher/trunk/" target="" class="regularLink">here</a>, and any UI or core contribution is as always welcome.
Specially UI part could do some work as I pretty much suck at it - currently all input/output is done via single servlet and broswer's address line. :-)
</p>

<p class="wikiPara">
The code itself is nicely structured, split into functional pieces
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> graph creation</li>
<li class="wikiUnorderedListItem"> layout</li>
<li class="wikiUnorderedListItem"> request mapping</li>
<li class="wikiUnorderedListItem"> rendering</li>
<li class="wikiUnorderedListItem"> routing</li>
<li class="wikiUnorderedListItem"> analysis (TODO)</li>
</ul>

<p class="wikiPara">
Graph creation has the following impl:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> All - show all components</li>
<li class="wikiUnorderedListItem"> Bean - show component and its first level dependencies</li>
<li class="wikiUnorderedListItem"> Tree - show component and all transitive dependencies</li>
<li class="wikiUnorderedListItem"> Deployment - show deployment's components; recursion/transitivity is optional</li>
</ul>

<p class="wikiPara">
Some examples
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> http://localhost:8080/grapher/</li>
<li class="wikiUnorderedListItem"> http://localhost:8080/grapher/?bean=MainDeployer</li>
<li class="wikiUnorderedListItem"> http://localhost:8080/grapher/?tree=MainDeployer</li>
<li class="wikiUnorderedListItem"> http://localhost:8080/grapher/?deployment=vfs-jboss-beans.xml</li>
<li class="wikiUnorderedListItem"> http://localhost:8080/grapher/?deployment=vfs-jboss-beans.xml&amp;recurse=true</li>
<li class="wikiUnorderedListItem"> http://localhost:8080/grapher/?deployment=metadata-deployer-jboss-beans.xml&amp;folder=deployers</li>
</ul>

<p class="wikiPara">
<a href="/service/File/12063" target="" class="regularLink"><img src="/images/12063.png"></a>
</p>

<p class="wikiPara">
Layout is hacked in via reflection due to license issues, but for personal usage you can use any of the following JGraphLayout impls
</p>

<pre class="wikiPreformatted">
      // a ctor hack
      map.put("simple0", "com.jgraph.layout.graph.JGraphSimpleLayout");
      map.put("simple1", "com.jgraph.layout.graph.JGraphSimpleLayout");
      map.put("simple2", "com.jgraph.layout.graph.JGraphSimpleLayout");

      map.put("tree", "com.jgraph.layout.tree.JGraphTreeLayout");
      map.put("spring", "com.jgraph.layout.graph.JGraphSpringLayout");
      map.put("hierarchical", "com.jgraph.layout.hierarchical.JGrapHierarchicalhLayout");
      map.put("compound", "com.jgraph.layout.JGraphCompoundLayout");
      map.put("compact", "com.jgraph.layout.tree.JGraphCompactTreeLayout");
      map.put("moen", "com.jgraph.layout.tree.JGraphMoenLayout");
      map.put("radial", "com.jgraph.layout.graph.JGraphRadialTreeLayout");
      map.put("annealing", "com.jgraph.layout.graph.JGraphAnnealingLayout");
      map.put("fr", "com.jgraph.layout.graph.JGraphFRLayout");
      map.put("organic", "com.jgraph.layout.organic.JGraphOrganicLayout");
      map.put("self", "com.jgraph.layout.organic.JGraphSelfOrganizingOrganicLayout");
      map.put("isom", "com.jgraph.layout.graph.JGraphISOMLayout");
      map.put("org", "com.jgraph.layout.tree.OrganizationalChart");
      map.put("grid", "com.jgraph.layout.simpl.SimpleGridLayout");
</pre>

<p class="wikiPara">
where the default used is SimpleGridLayout.
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> http://localhost:8080/grapher/?tree=MainDeployer&amp;layout=isom</li>
</ul>

<p class="wikiPara">
Note: I still need to check how to handle layout better, as I see too much of overlaps.
</p>

<p class="wikiPara">
Each of the pieces can be changed at config or runtime.
</p>

<pre class="wikiPreformatted">
public interface GraphComponentMapper&lt;T&gt;
{
   /**
    * Initialize.
    *
    * @param config the config map
    */
   void init(Map&lt;String, String&gt; config);

   /**
    * Map component from request.
    *
    * @param request the request
    * @return mapped component
    */
   T mapComponent(HttpServletRequest request);

   /**
    * Map component to the key.
    *
    * @param key the key
    * @param value the value
    * @return mapped component
    */
   T mapComponent(String key, String value);
}
</pre>

<p class="wikiPara">
Where I have such component mappers for graph creator, layout and renderer.
The defaults are used at servlet initialization, but you can provide your own.
</p>

<p class="wikiPara">
Currenly I support these renderers
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> PNG (default)</li>
<li class="wikiUnorderedListItem"> JPG</li>
<li class="wikiUnorderedListItem"> GIF</li>
<li class="wikiUnorderedListItem"> SVG</li>
<li class="wikiUnorderedListItem"> Html ul/li</li>
</ul>

<p class="wikiPara">
Renderer example
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> http://localhost:8080/grapher/?tree=MainDeployer&amp;renderer=svg</li>
</ul>

<p class="wikiPara">
Any request can use any combination of these, plus some additional filtering.
</p>

<p class="wikiPara">
You can list the component type excludes
</p>

<pre class="wikiPreformatted">
      mapControllerContextClass("pojo", AbstractKernelControllerContext.class, Color.BLUE);
      mapControllerContextClass("alias", AliasControllerContext.class, Color.GRAY);
      mapControllerContextClass("core", BeanKernelRegistryEntry.class, Color.RED);
      mapControllerContextClass("ext", AbstractKernelRegistryEntry.class, Color.ORANGE);
      mapControllerContextClass("mbean", "org.jboss.system.microcontainer.ServiceControllerContext", Color.MAGENTA);
      mapControllerContextClass("dep", "org.jboss.deployers.plugins.deployers.DeploymentControllerContext", Color.GREEN);
</pre>

<p class="wikiPara">
Here you can also see the colors that are mapped against certain component type.
</p>

<p class="wikiPara">
Exclude POJOs example
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> http://localhost:8080/grapher/?exclude=pojo</li>
</ul>

<p class="wikiPara">
Exclude multiple types
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> http://localhost:8080/grapher/?exclude=mbean,ext,alias</li>
</ul>

<p class="wikiPara">
Also availabe option is to define which dependecy type you wanna use to find dependencies
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> IDepenOn (default)</li>
<li class="wikiUnorderedListItem"> DependsOnMe</li>
<li class="wikiUnorderedListItem"> Unresolved</li>
</ul>

<p class="wikiPara">
<img src="/images/12064.png" width="920" height="890">
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> http://localhost:8080/grapher/?tree=MainDeployer&amp;dependency=DependsOnMe</li>
</ul>

<p class="wikiPara">
This leaves us with analysis piece, which is still WIP.
The whole graph is backed by JBoss Common Core Graph code,
hence we already have some of the theoretical algorithms present,
but I would still like to do a bit more.
</p>

<p class="wikiPara">
The current idea that I have is to somehow join rules/scripts with graph theory.
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> give me all sub-graphs whose number of vertices is less than 20</li>
<li class="wikiUnorderedListItem"> give me all sub-graphs with depth less than 5</li>
</ul>

<p class="wikiPara">
This way we could do some proper analysis and easily determine how to place On-Demand mode and define lazy beans.
But like I said, this is still very non-defined, so any help welcome. Wink wink our Drools committers. ;-)
</p>

<p class="wikiPara">
Also good thing about the project is that most of if not all of the code is properly tested,
with each functional piece having its matching test.
So, when you contribute, you know when you broke something. ;-)
</p>

<p class="wikiPara">
ps: Simple <q>mvn package</q> creates the grapher.war, for any useful layout check pom.xml ;-)
</p>
</div>

