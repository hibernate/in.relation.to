---
title: "My JBossAS7 experiments"
author: "Aleš Justin"
blogger_name: "Aleš"
creation_date: "21-03-2011"
original_tags: []
tags: [JBoss AS]

relative_url: /2011/03/21/myjboss-as-7-experiments
slug: myjboss-as-7-experiments
lace: http://in.relation.to/18843.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2011/03/21/myjboss-as-7-experiments
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
We just recently released <a href="http://in.relation.to/Bloggers/AS7BetaStreamBegins" target="" class="regularLink">new JBossAS7.0.0.Beta1</a> (great work guys!):
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> <a href="http://download.jboss.org/jbossas/7.0/jboss-7.0.0.Beta1/jboss-7.0.0.Beta1.zip" target="" class="regularLink">http://download.jboss.org/jbossas/7.0/jboss-7.0.0.Beta1/jboss-7.0.0.Beta1.zip</a>
</li>
</ul>

<p class="wikiPara">
While I’m not so involved (as with JBossAS5 and JBossAS6) with this new runtime / platform,
I do still closely follow what and how things are done. And I must say it’s a real pleasure to work with the new concepts and super easy to add anything new, meaning the good old <i class="wikiEmphasis">JBoss user experience</i>  [1] is here to stay!
</p>

<p class="wikiPara">
To borrow a saying from my colleague, let’s put the code where the mouth is.
So, let me list a few things I did lately to see what could be done with new JBossAS7.
Note: this is experimental stuff, and as such no guarantees apply :-)
</p>

<p class="wikiPara">
<i class="wikiEmphasis">Back to JBoss2?</i>
</p>

<p class="wikiPara">
As probably some of you remember, <a href="http://www.google.com/search?source=ig&amp;hl=en&amp;rlz=&amp;=&amp;q=jboss2+jetty&amp;btnG=Google+Search" target="" class="regularLink">JBossAS used to also ship with Jetty as web container</a>. Since I was already working on Weld and Jetty7/8 integration, I started wondering what it would take to have that old web container option again.
</p>

<p class="wikiPara">
And it turned out, as I expected, that having hello-world functionality was really easy to do. But since my goal was to be able to deploy Weld’s Permalink example, it took a bit more work to get JSF and CDI in place. Specially JSF was a bit of an issue, with all the static factories, etc, not to mention the fact I know little about JSF. While CDI integration turned out to be fairly easy, as it wasn’t much different from what I already did for pure Weld servlet integration.
</p>

<p class="wikiPara">
The code is here:
<a href="https://github.com/alesj/jboss-as/tree/jetty" target="" class="regularLink">https://github.com/alesj/jboss-as/tree/jetty</a>
but with JBossAS7 super fast progress it’s already far behind the current upstream master. So rebasing this would not be so trivial. Hence leave it at POC. :-)
</p>

<p class="wikiPara">
<i class="wikiEmphasis">Grapher2 strikes back</i>
</p>

<p class="wikiPara">
Another history artifact brought back to life. :-)
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> <a href="http://in.relation.to/Bloggers/MicrocontainerToolsGrapher" target="" class="regularLink">http://in.relation.to/Bloggers/MicrocontainerToolsGrapher</a>
</li>
</ul>

<p class="wikiPara">
This is something I did to inspect MC’s dependencies. But with a bit of refactoring and better OO practice, I easily managed to turn this into generic dependency displaying web app [2].
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> <a href="https://github.com/alesj/grapher" target="" class="regularLink">Grapher2 source code</a>
</li>
</ul>

<p class="wikiPara">
Since JBossAS7’ new classloading layer is modular, it is probably a good thing to know what some of these dependencies are. And this is where this tool helps you. At the moment I quickly added just two “commands”:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> <a href="http://localhost:8080/grapher-web-2.0.0-SNAPSHOT/?extension=this-module" target="" class="regularLink">more as a smoke test, let’s display Grapher2 modules</a>
</li>
</ul>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> <a href="http://localhost:8080/grapher-web-2.0.0-SNAPSHOT/?extension=single-module&amp;initial-value=deployment.bar.jar" target="" class="regularLink">let’s see other app’s modules</a>
</li>
</ul>

<p class="wikiPara">
<a href="/service/File/18842" target="" class="regularLink"><img src="/images/18842.jpeg"></a>
</p>

<p class="wikiPara">
<i class="wikiEmphasis">Pull my finger</i>
</p>

<p class="wikiPara">
As already mentioned, the new classloading layer is 100% modular. And looking at JBossAS7 standalone.sh, you can see that the whole app server is actually started as single module, which then pulls in its dependencies and so transitively-forth. So, what about if we only shipped this single jar plus a few descriptor files, making the distribution only (that-jar-size) big?
</p>

<p class="wikiPara">
It turns out this is really easy to do. The whole module loading is left to ModuleLoader class, meaning if we properly implemented this, it would be able to pull our modules remotely.
</p>

<p class="wikiPara">
This is the remote ModuleLoader class that does it:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> <a href="https://github.com/alesj/jboss-modules/blob/f1debb42023bc720708c53dd1801bfc93212e577/src/main/java/org/jboss/modules/RemoteModuleLoader.java" target="" class="regularLink">https://github.com/alesj/jboss-modules/blob/f1debb42023bc720708c53dd1801bfc93212e577/src/main/java/org/jboss/modules/RemoteModuleLoader.java</a>
</li>
</ul>

<p class="wikiPara">
And this is my experimental distribution -- only 377kb!. :-)
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> <a href="http://jboss-as7-modules-repository.googlecode.com/svn/trunk/dist/jboss-7.0.0-20110321-lite.zip" target="" class="regularLink">http://jboss-as7-modules-repository.googlecode.com/svn/trunk/dist/jboss-7.0.0-20110321-lite.zip</a>
</li>
</ul>

<p class="wikiPara">
(this pulls modules from googlecode project experimental repo)
</p>

<p class="wikiPara">
With sub-systems and services already being on demand, this is how you can do the same with modules. Also you can simply delete the existing module from your disc, and the remote ModuleLoader will pull it down for you again, making updates sharing really easy.
</p>

<p class="wikiPara">
OK, back to my Weld work now, and onward to 7.0.0.Beta2!
</p>

<p class="wikiPara">
[1] -- as a user (cca 5y ago) I always loved the way you could easily change default AS behavior, or add new things; aka SpringDeployer ;-)
</p>

<p class="wikiPara">
[2] -- yeah, I know, the default layout sucks :-)
</p>
</div>

