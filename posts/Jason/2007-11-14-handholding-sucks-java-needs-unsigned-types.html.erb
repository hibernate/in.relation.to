---
title: "Hand-holding sucks, Java needs unsigned types!"
author: "Jason Greene"
blogger_name: "Jason"
creation_date: "14-11-2007"
original_tags: []
tags: [Java EE]

relative_url: /2007/11/14/handholding-sucks-java-needs-unsigned-types
slug: handholding-sucks-java-needs-unsigned-types
lace: http://in.relation.to/2920.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2007/11/14/handholding-sucks-java-needs-unsigned-types
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
While there are many things I like about the Java language, the lack of unsigned types has always bothered me.
</p>

<p class="wikiPara">
According to Gosling, <a href="http://www.gotw.ca/publications/c_family_interview.htm" target="" class="regularLink">they were too complicated</a>:
</p>

<blockquote class="wikiBlockquote">
Quiz any C developer about unsigned, and pretty soon you discover that almost no C developers actually understand what goes on with unsigned, what unsigned arithmetic is. Things like that made C complex.
</blockquote>

<p class="wikiPara">
Ironically this kind of hand-holding tends to introduce other complexities that are often more difficult to deal with than the original solution. In this particular case, leaving out unsigned types doesn't stop the need to work with unsigned data. Instead, it forces the developer to work around the language limitation in various unusual ways.
</p>

<p class="wikiPara">
The first major problem in this system is that byte is signed in Java. Out of all of the code I have ever written, I can only think of a select few situations where I needed a signed byte value. In almost all cases I wanted the unsigned version.
</p>

<p class="wikiPara">
Let's look at a very simple example, initializing a byte to be 0xFF (or 255), the following will fail (note: this works in C#, since they made byte unsigned):
</p>

<pre class="wikiPreformatted">byte b = 0xFF;</pre>


<p class="wikiPara">
Java will not narrow this for us because the value is outside the range of the signed byte type (&gt;127). We can, however, work around it with a cast:
</p>

<pre class="wikiPreformatted">byte b = (byte) 0xFF;</pre>


<p class="wikiPara">
If we are clever and know twos compliment we can use a negative equivalent of our simple unsigned value:
</p>

<pre class="wikiPreformatted">byte b = -1;</pre>


<p class="wikiPara">
This is just the tip of the iceberg though. A common technique used in search and compression algorithms is to precompute a table based on the occurrence of a particular byte value. Since a byte can represent 256 values, this is typically done using an array with the byte value as an index, which is very efficient. Ok so you might think you can do the following:
</p>

<pre class="wikiPreformatted">byte b = (byte) 0xFF;
int table[] = new int[256];
table[b] = 1; // OOPS!</pre>


<p class="wikiPara">
While this code will legally compile, it will result in a runtime exception. What happens is that the array index operator requires an integer. Since a byte is specified instead, Java converts the byte to an integer, and this results in sign extension. Again, 0xFF means -1 for a signed byte, so it gets converted to an integer with a value of -1. This, of course, is an invalid array index.
</p>

<p class="wikiPara">
To solve the problem, we must use the bitwise-and operator to force the conversion to occur in the correct (yet unintuitive) way like so:
</p>

<pre class="wikiPreformatted">table[b &amp; 0xFF] = 1;</pre>


<p class="wikiPara">
This technique gets ugly quick. Take a look at composing an int from 4 bytes (Ugh!):
</p>

<pre class="wikiPreformatted">byte b1 = 1;
byte b2 = (byte)0x82;
byte b3 = (byte)0x83;
byte b4 = (byte)0x84;

int i = (b1 &lt;&lt; 24) | ((b2 &amp; 0xFF) &lt;&lt; 16) | ((b3 &amp; 0xFF) &lt;&lt; 8) | (b4 &amp; 0xFF);</pre>

<p class="wikiPara">
 
These issues have in turn lead to odd API workarounds. For example, look at <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/io/InputStream.html#read()" target="" class="regularLink">InputStream.read()</a> , which according to its docs is supposed to return a byte, but instead returns an integer. Why? So it can do the &amp; 0xFF for you.
</p>

<p class="wikiPara">
We also have a <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/io/DataOutput.html#writeShort()" target="" class="regularLink">DataOutput.writeShort()</a> and <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/io/DataOutput.html#writeByte()" target="" class="regularLink">DataOutput.writeByte()</a> that take integers instead of the their respective types. Why? So that you can output unsigned values on the wire. On the reading side we end up with four methods <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/io/DataInput.html#readShort()" target="" class="regularLink">DataInput.readShort()</a>, <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/io/DataInput.html#readUnsignedShort()" target="" class="regularLink">DataInput.readUnsignedShort()</a>, <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/io/DataInput.html#readByte()" target="" class="regularLink">DataInput.readByte()</a>, and <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/io/DataInput.html#readUnsignedByte()" target="" class="regularLink">DataInput.readUnsignedByte()</a>. The <q>unsigned</q> versions return converted integers instead of the described type names.
</p>

<p class="wikiPara">
To add to the confusion, we also have 2 right shift operators in this signed only mess. The <q>unsigned</q> right shift operator, which treats the type as if it were unsigned, and the normal right shift, which preserves the sign (essentially acts like divide by 2). If we want to get the most significant nibble value of an integer we need the unsigned version.
</p>

<pre class="wikiPreformatted">int i = 0xF0000000;

System.out.printf("%x\n", i &gt;&gt; 28); // Returns ffffffff!
System.out.printf("%x\n", i &gt;&gt;&gt; 28); // Returns f, as desired</pre>


<p class="wikiPara">
So I ask all of you, was all of this hassle worth leaving out the simple and well understood <q>unsigned</q> keyword? I think not, and I hope anyone who considers doing this in another language they are designing learns from it. At least C# has.
</p>
</div>

