---
title: "JSF 2.0. Test Drive PDL. Part 1"
author: "Sergey Smirnov"
blogger_name: "Sergey"
creation_date: "16-01-2009"
original_tags: [JavaServer Faces,RichFaces]
tags: [JSF,Rich Faces]

relative_url: /2009/01/16/jsf-20-test-drive-pdl-part-1
slug: jsf-20-test-drive-pdl-part-1
lace: http://in.relation.to/10463.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2009/01/16/jsf-20-test-drive-pdl-part-1
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
When this blog is writing, JSF 2.0 specification reached the Public Review status. Everybody can visit the   <a href="http://jcp.org/en/jsr/detail?id=314" target="" class="regularLink">JSR-314 EG page</a>  and download his own copy of it. Comparing to JSF 1.2 when the implementation appeared about one year after the specification is done, Sun is developing the reference implementation, also known as Project Mojarra, at the time with writing the specification. Thus, you can try new features of JSF 2.0 right away downloading the Mojarra 2.0.0 PR release from the project home page: <a href="https://javaserverfaces.dev.java.net/" target="" class="regularLink">https://javaserverfaces.dev.java.net/</a> . <br><br>
 
JSF 2.0 has some cool innovation features. One of them is PDL (Page Declaration Language). PDL inherits its core functionality from two well known JSF project - Facelets and JSFTemplates. Among all other features, it allows to create new JSF components in declarative manner, without creating a bunch of java classes like it was in the previous JSF versions. In this blog we will test-drive this feature and show the top features of PDL.<br><br>
 
Binary Mojarra distribution already contains <tt>ezcomp00</tt> and <tt>ezcomp01</tt> applications that show the basic of the PDL. We are not going to repeat them, but will create something different. RichFaces has a <tt>rich:panel</tt>, pretty simple, but useful JSF component. It represents the rectangle with a body and an optional header defined by a facet. The look-n-feel of the <tt>rich:panel</tt> is defined with some set of css rules. Some of those rules refer to the parameters taken from the skin parameters. I.e. css has static and dynamically generated rules. If header presents, it is filled with background gradient generated by java class that also uses the skin parameters as base colors for generated gradient. The working example of the rich-panel you can see at the main richfaces demo at:
<a href="http://livedemo.exadel.com/richfaces-demo/richfaces/panel.jsf" target="" class="regularLink">http://livedemo.exadel.com/richfaces-demo/richfaces/panel.jsf</a>
</p>


<p class="wikiPara">
Actually, RichFaces has a CDK (Component Development Kit) that is used for creating all 100+ RichFaces component. CDK is a maven based tool that generates components based on the meta-data, java classes and jspx templates that define a component layout. The <tt>rich:panel</tt> was exactly the component that we use to test-drive the first versions of CDK. Hence, now we just need to follow the same path, but using a new standard of JSF 2.0 - Page Declaration Language.
</p>

<p class="wikiPara">
<tt>Note:</tt> JSF 2.0 PDL and CDK JSPX are not very well comparable things. CDK JSPX templates makes sense only for design time. They are compiled into the java classes and the result library does not contain the templates and some sort of interpretation processor. At least, the result code works faster.
</p>

<p class="wikiPara">
The structure of the <tt>rich:panel</tt> is pretty simple. It has an outer div, body div and header div optionally. 
</p>



<pre class="wikiPreformatted">&lt;div class="rich-panel"&gt;
    &lt;div class="rich-panel-header"&gt;This is a panel header&lt;/div&gt;
    &lt;div class="rich-panel-body"&gt;The is the panel body&lt;/div&gt;
&lt;/div&gt;</pre>


<p class="wikiPara">
 
Let's see what we can do using JSF 2.0 PDL. How to create a simple component like the one shown in the ezcompXX demo and described several times in the <a href="http://jsfTutorials.net" target="" class="regularLink">blogs and introduction articles</a>.  I like the <a href="http://www.prime.com.tr/webcast/jsf2london/jsf2preview.pdf" target="" class="regularLink">JSF 2.0 PREVIEW by Cagatay Civici presentation</a>. It is short and overview the key feature is JSF 2.0.
 
The page where component is used looks like:
 
</p>

<pre class="wikiPreformatted">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:f="http://java.sun.com/jsf/core"
      xmlns:rich="http://java.sun.com/jsf/composite/rich"&gt;
&lt;f:view contentType="text/html"/&gt;

&lt;h:head&gt;
    &lt;title&gt;Panel Test&lt;/title&gt;
&lt;/h:head&gt;

 &lt;h:body&gt;
  &lt;rich:panel&gt;
   &lt;f:facet name="header"&gt;
    &lt;h:outputText value="This is a panel header"/&gt;
   &lt;/f:facet&gt;
   &lt;h:outputText value="The is the panel body"/&gt;
  &lt;/rich:panel&gt;

 &lt;/h:body&gt;

&lt;/html&gt;</pre>



<p class="wikiPara">
 
 
We use <tt>rich:</tt> namespace which is defined at the top of the page as <tt>xmlns:rich="http://java.sun.com/jsf/composite/rich</tt>.
In our case, <tt>http://java.sun.com/jsf/composite/rich</tt> means we have a folder with the name <q>rich</q> that is located in the <tt>{webtoot}/resources/</tt> folder.
<tt>{webtoot}/resources/rich/</tt> folder contains the <tt>panel.xhtml</tt> file where the our panel component is located.
 
This is a content of the <tt>panel.xhtml</tt> file:
 
</p>

<pre class="wikiPreformatted">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:f="http://java.sun.com/jsf/core"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:c="http://java.sun.com/jstl/core"
      xmlns:composite="http://java.sun.com/jsf/composite"&gt;
&lt;head&gt;
 
&lt;title&gt;panel&lt;/title&gt;
 
&lt;/head&gt;
 
&lt;body&gt;
 
&lt;composite:interface&gt;
    &lt;composite:attribute name="style" required="false"/&gt;
    &lt;composite:attribute name="styleClass" required="false"/&gt;
    &lt;composite:attribute name="headerClass" required="false"/&gt;
    &lt;composite:attribute name="bodyClass" required="false"/&gt;
&lt;/composite:interface&gt;
 
 
 
&lt;composite:implementation&gt;
    &lt;h:outputStylesheet name="rich/css/panel.css" /&gt;
 
 &lt;div class="rich-panel #{compositeComponent.attrs.styleClass}"
                       style="#{compositeComponent.attrs.style}"&gt;
  &lt;div class="rich-panel-header #{compositeComponent.attrs.headerClass}"&gt;
   &lt;composite:insertFacet name="header"/&gt;
  &lt;/div&gt;
 
  &lt;div class="rich-panel-body #{compositeComponent.attrs.bodyClass}" &gt; 
   &lt;composite:insertChildren /&gt;
  &lt;/div&gt; 
 
 &lt;/div&gt;
&lt;/composite:implementation&gt;
 
&lt;/body&gt;
 
&lt;/html&gt;</pre>


<p class="wikiPara">
 
Our component is represented with two tags: <tt>composite:interface</tt> and <tt>composite:implementation</tt>. The interface has a declaration for attribute set. For the sake of simplicity, we avoid all other attributes, but add only the ones that represent the component styling. The implementation tag contains the layout of the component. The context of the  header is inserted with:
 
</p>

<pre class="wikiPreformatted">&lt;composite:insertFacet name="header"/&gt;</pre>


<p class="wikiPara">
 
The panel can contains the number of other component insert. We just use the  <tt>composite:insertChildren</tt> to point to the place where the children will be inserted to. Mojarra 2.0 binary distribution has a pdldocs archive. It contains the <a href="http://www.jsftutorials.net/pdldocs/facelets/" target="" class="regularLink">documentation to all PDL related tags</a>.
</p>

<br>
<p class="wikiPara">
 
The class attributes of the  div tags reference the static name of the default component classes and to the user defined classes wired using EL expressions.
 
The classic h: library has some new components including <tt>h:outputStylesheet</tt>. We use it to reference the static CSS file with default panel CSS rules. Note, that the used path is relative. However, the root of this relative path is located not where <tt>panel.xhtml</tt> is located, but where the <tt>{webtoot}/resources/</tt> folder is.
 
Thus, <tt>{webtoot}/resources/rich/css/panel.css</tt> contains:
</p>

<pre class="wikiPreformatted">.rich-panel{
  border-width: 1px;
 border-style: solid;
 padding : 1px;
 color:#000000;
 font-family:Arial,Verdana,sans-serif;
 font-size:11px;
 background-color:#FFFFFF;
 border-color:#BED6F8; 
}
   
.rich-panel-header{
 padding : 2px;
    border-width: 1px;
    border-style: solid;
 background-color:#BED6F8;
 border-color:#BED6F8;
 font-weight:bold;   
}
 
.rich-panel-body{
 padding : 10px;
} 
</pre>


<p class="wikiPara">
At this moment we are done with basic of the panel. Let's see how to reach the rest of the <tt>rich:panel</tt> features. To be continued....</p>
</div>

