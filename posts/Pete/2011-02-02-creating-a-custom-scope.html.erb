---
title: "Creating a custom scope"
author: "Pete Muir"
blogger_name: "Pete"
creation_date: "02-02-2011"
original_tags: [Contexts and Dependency Injection]
tags: [CDI]

relative_url: /2011/02/02/creating-a-custom-scope
slug: creating-a-custom-scope
lace: http://in.relation.to/18227.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2011/02/02/creating-a-custom-scope
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
A number of people have been asking how to create a custom scope, so I wanted to write a short guide. Unfortunately there isn't a universal solution, so the best I can do is offer up a number of guidelines and give you some questions to consider before embarking on the implementation.
</p>

<p class="wikiPara">
Before you begin, read the Javadoc for <a href="http://docs.jboss.org/cdi/api/1.0/javax/enterprise/context/spi/Context.html" target="" class="regularLink">Context</a>, the interface you will be implementing.
</p>



<p class="wikiPara">
The first thing to consider when implementing a context is what you will use to store the bean instances. If you want to share the bean instances between multiple <q>requests</q> (such as the HTTP session scope) then you will need a way to store the bean instances and to associate the correct set of bean instances with the current <q>request</q>. If you want to simply share the bean instances within the <q>request</q> then you have an easier task, as you can use a <tt>ThreadLocal</tt> to store the bean instances, and just remove it at the end of the <q>request</q>.
</p>

<p class="wikiPara">
Note that when I say <q>request</q> I mean any request to the application, not just an HTTP request. CDI doesn't give you any help here, but for inspiration you can think about the built in HTTP contexts such as the session context which uses the <tt>HttpSession</tt> from the Servlet specification to store the bean instances, and request listeners to associate the context with the bean instances at the start of each request.
</p>

<p class="wikiPara">
Having decided on where the bean instances will be stored, you need to think about how to associate the bean instance store with the context at the start of each <q>request</q>, and how to clean up at the end of the <q>request</q>. Luckily, there is a standard formula you can follow here! Within your context, use a <tt>ThreadLocal</tt> to hold the bean instances for the duration of the <q>request</q>; the lifecycle of the context would look something like this:
</p>

<ol class="wikiOrderedList">
<li class="wikiOrderedListItem"> At the start of the <q>request</q> associate the bean instance store with the context by storing it in the thread local</li>
<li class="wikiOrderedListItem"> During the <q>request</q> service any calls to <tt>Context.get()</tt> using the <tt>ThreadLocal</tt>
</li>
<li class="wikiOrderedListItem"> At the end of the request ensure that you clean up the <tt>ThreadLocal</tt> to prevent any memory leaks</li>
</ol>

<p class="wikiPara">
There is a variant of this, where the bean instance store used during the <q>request</q> does not write through to the underlying bean instance store, but is instead synchronised (e.g. last <q>request</q> to end wins) at the end of the <q>request</q>. This has the advantage of improving the apparent consistency of the data (consider multiple concurrent requests, if you write through to the underlying store the state at the end of the request could be a mix of that written in each request), as well as allowing for lazy-creation of the underlying store. This is also relatively simple to implement, the only complex part being the decision on synchronization scheme to use.
</p>

<p class="wikiPara">
Once you have implemented your context, you need to register it, which you do via <a href="http://docs.jboss.org/cdi/api/1.0/javax/enterprise/inject/spi/AfterBeanDiscovery.html#addContext(javax.enterprise.context.spi.Context)" target="" class="regularLink">AfterBeanDiscovery.addContext</a>.
</p>

<p class="wikiPara">
I hope this is of use to people, and if anyone has other useful tips and hints, please do comment on the blog, and I will update it!</p>
</div>

