---
title: "MongoDB object id support and restructured public API - Hibernate OGM 4.1.0.Beta7 is out"
author: "Gunnar Morling"
blogger_name: "Gunnar"
creation_date: "01-10-2014"
original_tags: [Hibernate,Hibernate OGM,News]
tags: [Hibernate OGM]

relative_url: /2014/10/01/mongo-db-object-id-support-and-restructured-public-api-hibernate-ogm-410-beta-7-is-out
slug: mongo-db-object-id-support-and-restructured-public-api-hibernate-ogm-410-beta-7-is-out
lace: http://in.relation.to/32408.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2014/10/01/mongo-db-object-id-support-and-restructured-public-api-hibernate-ogm-410-beta-7-is-out
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
It’s my great pleasure to announce the release of Hibernate OGM 4.1.0.Beta7! The release brings support for MongoDB’s object id, a clarification of what are our public API/SPI packages as well as several bugfixes and many other improvements.
</p>

<p class="wikiPara">
Use the following GAV coordinates with tools such as Maven, Gradle etc.:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> <i class="wikiEmphasis">org.hibernate.ogm:hibernate-ogm-core:4.1.0.Beta7</i> for the Hibernate OGM engine and</li>
<li class="wikiUnorderedListItem"> <i class="wikiEmphasis">org.hibernate.ogm:hibernate-ogm-&lt;%DATASTORE%&gt;:4.1.0.Beta7</i>, depending on the backend you want to use.</li>
</ul>

<p class="wikiPara">
Alternatively, there is a <a href="http://sourceforge.net/projects/hibernate/files/hibernate-ogm/4.1.0.Beta7/" target="" class="regularLink">release bundle</a> containing Hibernate OGM and all its dependencies available for download from SourceForge.
</p>

<h1 class="wikiHeadline1" id="H-SupportForMongoDBsObjectId"><a href="/2014/10/01/mongo-db-object-id-support-and-restructured-public-api-hibernate-ogm-410-beta-7-is-out#H-SupportForMongoDBsObjectId">Support for MongoDB’s object id</a></h1>

<p class="wikiPara">
When talking about Hibernate OGM, one of the most requested features we heard was support for the native object id type in MongoDB. Finally we got around to implementing this feature.
</p>

<p class="wikiPara">
You can map object ids either directly via MongoDB’s <tt>org.bson.types.ObjectId</tt> type or using a String. The following shows an example:
</p>

<pre class="wikiPreformatted brush: java">@Entity
public class GolfPlayer {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Type(type = "objectid")
	private String id;

	// Alternatively, the following could be used:
	// @Id
	// @GeneratedValue(strategy = GenerationType.IDENTITY)
	// private ObjectId id;

	private String name;

	private double handicap;

	//...
}</pre>


<p class="wikiPara">
The <tt>@GeneratedValue</tt> annotation causes the id to be automatically generated by MongoDB upon insertion of the entity, similar to e.g. <tt>AUTO_INCREMENT</tt> columns in MySQL. The <tt>@Type</tt> annotation makes sure the string is mapped as an object id rather than as plain string. So a <tt>GolfPlaye</tt>r document could e.g. look like this:
</p>

<pre class="wikiPreformatted brush: xml">{
    "_id" : ObjectId("542ac33630043ffe5bcb4efa"),
    "name" : "Alexis",
    "handicap" : 9.7
}</pre>


<p class="wikiPara">
Also related to MongoDB is a nice improvement around JP-QL queries. You can now refer to properties of embeddable objects in your queries:
</p>

<pre class="wikiPreformatted brush: java">@Entity
@NamedQuery(name = “PersonsByCity”, query = "FROM Person p WHERE p.address.city = :pCity")
public class Person {

	@Id
	private ObjectId id;

	@Embedded
	private Address address;

	// ...
}</pre>


<p class="wikiPara">
Here, the named query refers to the <tt>city</tt> property of the embedded address object.
</p>

<h1 class="wikiHeadline1" id="H-APISPIPackageRestructuring"><a href="/2014/10/01/mongo-db-object-id-support-and-restructured-public-api-hibernate-ogm-410-beta-7-is-out#H-APISPIPackageRestructuring">API/SPI package restructuring</a></h1>

<p class="wikiPara">
As we’re on our road to the 4.1.0.Final release, we spent a fair amount of time for clearly separating the OGM code base into API, SPI and internal packages. Our goal is to make clear what is supported in the long term and what is not.
</p>

<p class="wikiPara">
API packages (application programming interface) are all those packages which are intended to be accessed by users of Hibernate OGM, i.e. people building applications on top of it. Any package which does not have “spi” or “impl” in its name is an API package. Note that there are only very few API packages in Hibernate OGM. Most of the time you will work with the JPA (<tt>javax.persistence.*</tt> packages) or the “classic” API from Hibernate ORM.
</p>

<p class="wikiPara">
SPI packages (service provider interface) are packages which contain contracts to be used and/or implemented by authors of custom grid dialects. So if for instance you would write a dialect for your favorite NoSQL store (btw. you should consider to contribute it to OGM), then you would access the SPI packages. They have a “spi” in their name. In order to clearly separate API and SPI, we had to rename several packages and move some types around. So existing custom dialects need to be adapted to this new structure. Good news is that it basically is enough to do a “re-organize imports” in your favorite IDE to adapt to most of the changes. We aim at a stable SPI (and of course API as well) with the 4.1 Final release.
</p>

<p class="wikiPara">
Finally, there are internal packages of the Hibernate OGM engine which are not intended for usage by users nor dialect implementors. You can recognize those by the “impl” in their name. Internal packages and types may be changed, removed etc. without notice. So if you think there is a specific internal type which you need to access, please let us know so we can decide what to do and e.g. promote it to API or SPI.
</p>

<p class="wikiPara">
Please refer to the <a href="https://developer.jboss.org/wiki/HibernateOGMMigrationNotes/" target="" class="regularLink">migration notes</a> to learn more about the package changes in this release.
</p>

<h1 class="wikiHeadline1" id="H-UsefulLinks"><a href="/2014/10/01/mongo-db-object-id-support-and-restructured-public-api-hibernate-ogm-410-beta-7-is-out#H-UsefulLinks">Useful links</a></h1>

<p class="wikiPara">
As always we’re very interested in your feedback. Here are some helpful links for you:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> <a href="https://hibernate.atlassian.net/secure/ReleaseNote.jspa?projectId=10160&amp;version=17450" target="" class="regularLink">Change log</a>
</li>
<li class="wikiUnorderedListItem"> <a href="https://forum.hibernate.org/viewforum.php?f=31" target="" class="regularLink">User forum</a>
</li>
<li class="wikiUnorderedListItem"> <a href="https://hibernate.atlassian.net/browse/OGM" target="" class="regularLink">Issue tracker</a>
</li>
<li class="wikiUnorderedListItem"> <a href="https://lists.jboss.org/mailman/listinfo/hibernate-dev" target="" class="regularLink">Mailing list</a>
</li>
</ul>

<p class="wikiPara">
So give it a try and let us know how you like this release!</p>
</div>

