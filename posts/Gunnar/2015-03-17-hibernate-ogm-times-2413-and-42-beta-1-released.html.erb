---
title: "Hibernate OGM times 2: 4.1.3 and 4.2 Beta1 released"
author: "Gunnar Morling"
blogger_name: "Gunnar"
creation_date: "17-03-2015"
original_tags: [Hibernate,Hibernate OGM,News]
tags: [Hibernate OGM]

relative_url: /2015/03/17/hibernate-ogm-times-2413-and-42-beta-1-released
slug: hibernate-ogm-times-2413-and-42-beta-1-released
lace: http://in.relation.to/42588.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2015/03/17/hibernate-ogm-times-2413-and-42-beta-1-released
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
I am happy to announce the release of Hibernate OGM 4.1.3 Final and 4.2.0.Beta1!
</p>

<p class="wikiPara">
The former brings several usability improvements, bug fixes and component upgrades, whereas the latter comes with new query features, an error handling API for non-transactional datastores and more.
</p>

<p class="wikiPara">
The releases can be obtained as ZIP or TAR.GZ from SourceForge (<a href="https://sourceforge.net/projects/hibernate/files/hibernate-ogm/4.1.3.Final/" target="" class="regularLink">4.1.3.Final</a>, <a href="https://sourceforge.net/projects/hibernate/files/hibernate-ogm/4.2.0.Beta1/" target="" class="regularLink">4.2.0.Beta1</a>) or via Maven, Gradle etc., using the following GAV coordinates:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> <i class="wikiEmphasis">org.hibernate.ogm:hibernate-ogm-core:4.1.3.Final</i> or <i class="wikiEmphasis">org.hibernate.ogm:hibernate-ogm-core:4.2.0.Beta1</i> for the Hibernate OGM engine and</li>
<li class="wikiUnorderedListItem"> <i class="wikiEmphasis">org.hibernate.ogm:hibernate-ogm-&lt;%DATASTORE%&gt;:4.1.3.Final</i> or <i class="wikiEmphasis">org.hibernate.ogm:hibernate-ogm-&lt;%DATASTORE%&gt;:4.2.0.Beta1</i>, depending on the backend you want to use.</li>
</ul>

<p class="wikiPara">
Note that from 4.2 onwards, <b>Hibernate OGM requires Java 7</b>. We aimed at Java 6 compatibility for as long as possible, but with more and more of our backends and components requiring Java 7 (e.g. Neo4j and Lucene), we felt that it was time to move on and take advantage of the Java 7 goodies for the Hibernate OGM code base as well.
</p>

<p class="wikiPara">
Let's dive into some of the new functionality of the 4.2 Beta1 release.
</p>

<h3 class="wikiHeadline3" id="H-QueryImprovements"><a href="/2015/03/17/hibernate-ogm-times-2413-and-42-beta-1-released#H-QueryImprovements">Query improvements</a></h3>

<p class="wikiPara">
We continued our quest for extensive query capabilities and enabled more JP-QL constructs, namely queries on element collections. For example consider the following entity <tt>Order</tt> which contains an element collection of its order lines:
</p>

<pre class="wikiPreformatted brush: java; gutter: false;">@Entity
public class Order {

    @Id
    @GeneratedValue
    private long id;

    @ElementCollection
    private List&lt;OrderLine&gt; orderLines = new ArrayList&lt;&gt;();

    // getter, setters etc. ...
}

@Embeddable
public class OrderLine {

    private String item;
    private BigDecimal price;

    // getter, setters etc. ...
}
</pre>


<p class="wikiPara">
To obtain a list of all orders which contain a wooden toy train order line, you could run the following JP-QL query:
</p>

<pre class="wikiPreformatted brush: java; gutter: false;">List&lt;Order&gt; toyTrainOrders = entityManager
    .createQuery( "FROM Order o JOIN o.orderLines ol WHERE ol.item LIKE '%wooden toy train%'" )
    .getResultList();
</pre>


<p class="wikiPara">
As with other JP-QL queries, Hibernate OGM will convert the query string into a native query for MongoDB and Neo4j. For the other backends a Lucene-based full-text query will be created.
</p>

<p class="wikiPara">
Note that the JOIN syntax at this point is only supported for element collections, i.e. you cannot create join queries for arbitrary associations to other entities. The reason is that most NoSQL stores don't support joins between different tables/collections, therefore such query can't be translated in a sensible way. An exception are graph databases such as Neo4j where joins can be converted into queries based on relationships (which is what actually happens for the element collection case), but we are not quite there yet :)
</p>

<h3 class="wikiHeadline3" id="H-APIForRetrievingAllExecutedAndFailedDatastoreOperations"><a href="/2015/03/17/hibernate-ogm-times-2413-and-42-beta-1-released#H-APIForRetrievingAllExecutedAndFailedDatastoreOperations">API for retrieving all executed and failed datastore operations</a></h3>

<p class="wikiPara">
Hibernate ORM collects all write operations internally and propagates them to the database in most cases only upon transaction commit (in addition, changes will also be flushed prior to query execution or upon explicite <tt>flush()</tt> calls). This enables many optimizations such as batched inserts. Hibernate OGM follows this approach and also uses transaction boundaries for demarcating units of work and triggering writes to the datastore.
</p>

<p class="wikiPara">
While this naturally works great with transactional NoSQL stores such as Infinispan or Neo4j, it poses some challenges on non-transactional datastores. The 4.2 release therefore provides the initial draft of an API which notifies you upon failed datastore operations, letting you take appropriate action such as e.g. logging all previously applied operations or retrying a failed operation.
</p>

<p class="wikiPara">
In order to not let this release announcement grow too big, there is a <a href="http://in.relation.to/Bloggers/HibernateOGMErrorHandlingOnNontransactionalNoSQLStores" target="" class="regularLink">separate post</a> just dedicated to this new API.
</p>

<h3 class="wikiHeadline3" id="H-SupportForFongo"><a href="/2015/03/17/hibernate-ogm-times-2413-and-42-beta-1-released#H-SupportForFongo">Support for Fongo</a></h3>

<p class="wikiPara">
<a href="https://github.com/fakemongo/fongo" target="" class="regularLink">Fongo</a> ("Fake Mongo") is a very nice tool when it comes to testing MongoDB applications. It provides a pure in-memory implementation of the MongoDB Java API which allows to test MongoDB-based applications without starting up an actual MongoDB instance.
</p>

<p class="wikiPara">
Thanks to community member <a href="https://twitter.com/alexsotob" target="" class="regularLink">Alex Soto</a>, you can use Fongo now also for testing your Hibernate OGM based application. To do so, simply add the following dependencies to your project (assuming you work with Maven and have added the Hibernate OGM BOM to the <i class="wikiEmphasis">dependencyManagement</i> block of your POM file):
</p>

<pre class="wikiPreformatted brush: xml; gutter: false;">&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.hibernate.ogm&lt;/groupId&gt;
        &lt;artifactId&gt;hibernate-ogm-mongodb&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.github.fakemongo&lt;/groupId&gt;
        &lt;artifactId&gt;fongo&lt;/artifactId&gt;
        &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
        &lt;artifactId&gt;slf4j-simple&lt;/artifactId&gt;
        &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</pre>


<p class="wikiPara">
Then specify "fongodb" as the Hibernate OGM datastore provider, e.g. via a persistence unit property in <i class="wikiEmphasis">META-INF/persistence.xml</i>:
</p>

<pre class="wikiPreformatted brush: xml; gutter: false;">&lt;persistence-unit name="example-PU" transaction-type="RESOURCE_LOCAL"&gt;
    &lt;provider&gt;org.hibernate.ogm.jpa.HibernateOgmPersistence&lt;/provider&gt;
    &lt;properties&gt;
        &lt;property name="hibernate.ogm.datastore.provider" value="fongodb"/&gt;
    &lt;/properties&gt;
&lt;/persistence-unit&gt;
</pre>


<p class="wikiPara">
Hibernate OGM will now use Fongo rather than a real MongoDB server as the backend. As said, this can be quite handy when testing your application, just do not forget to switch to a real datastore when deploying to production ;-)
</p>

<h3 class="wikiHeadline3" id="H-UsabilityImprovements"><a href="/2015/03/17/hibernate-ogm-times-2413-and-42-beta-1-released#H-UsabilityImprovements">Usability improvements</a></h3>

<p class="wikiPara">
Finally, let's take a quick look at two nice usability improvements which you already get with the update to 4.1.3.
</p>

<p class="wikiPara">
The first is a better support for the <tt>RESOURCE_LOCAL</tt> transaction type when working with stores such as MongoDB under Java SE. As described above, Hibernate OGM relies on transaction demarcation to gather data changes and write them to the datastore in an optimized way. This used to require a JTA implementation on the classpath, also if the underlying datastore actually is not transactional. This is obsolete now, i.e. you can work with <tt>RESOURCE_LOCAL</tt> and MongoDB, CouchDB etc. without any further dependencies.
</p>

<p class="wikiPara">
If you work with Hibernate OGM and Hibernate Search, you will be happy to learn that the creation of full-text queries became easier. It is not necessary any longer to configure the database retrieval method for each and every <tt>FullTextQuery</tt>, instead this happens automatically on a global level now when bootstrapping the Hibernate OGM engine.
</p>

<h3 class="wikiHeadline3" id="H-SomeUsefulLinks"><a href="/2015/03/17/hibernate-ogm-times-2413-and-42-beta-1-released#H-SomeUsefulLinks">Some useful links</a></h3>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> Change logs: <a href="https://hibernate.atlassian.net/secure/ReleaseNote.jspa?projectId=10160&amp;version=19251" target="" class="regularLink">4.1.3</a>, <a href="https://hibernate.atlassian.net/secure/ReleaseNote.jspa?projectId=10160&amp;version=19050" target="" class="regularLink">4.2 Beta1</a>
</li>
<li class="wikiUnorderedListItem"> <a href="https://forum.hibernate.org/viewforum.php?f=31" target="" class="regularLink">User forum</a>
</li>
<li class="wikiUnorderedListItem"> <a href="https://hibernate.atlassian.net/browse/OGM" target="" class="regularLink">Issue tracker</a>
</li>
<li class="wikiUnorderedListItem"> <a href="http://lists.jboss.org/pipermail/hibernate-dev/" target="" class="regularLink">Mailing list</a>
</li>
</ul>
</div>

