---
title: "Hibernate Validator 5.1.0.Alpha1 Released"
author: "Gunnar Morling"
blogger_name: "Gunnar"
creation_date: "09-08-2013"
original_tags: [Beam Validation,Hibernate Validator,News]
tags: [Bean Validation,Hibernate Validator]

relative_url: /2013/08/09/hibernate-validator-510-alpha-1-released
slug: hibernate-validator-510-alpha-1-released
lace: http://in.relation.to/24334.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2013/08/09/hibernate-validator-510-alpha-1-released
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
It's my pleasure to announce the first alpha release of Hibernate Validator 5.1. This release brings you several new features based on top of the Bean Validation 1.1 APIs, substantial performance improvements as well as some bug fixes.
</p>

<p class="wikiPara">
As usual, you can obtain this release either as <a href="http://sourceforge.net/projects/hibernate/files/hibernate-validator/5.1.0.Alpha1/" target="" class="regularLink">distribution bundle</a> (ZIP or TAR.GZ) from SourceForge or retrieve it using your preferred dependency management tool under the GAV coordinates <i class="wikiEmphasis">org.hibernate:hibernate-validator:5.1.0.Alpha1</i>. The binaries have been pushed to the JBoss <a href="https://repository.jboss.org/nexus/content/groups/public/org/hibernate/hibernate-validator/5.1.0.Alpha1/" target="" class="regularLink">Maven repository</a> and should soon be synched to Maven Central as well.
</p>

<h1 class="wikiHeadline1" id="H-WhatsInIt"><a href="/2013/08/09/hibernate-validator-510-alpha-1-released#H-WhatsInIt">What's in it?</a></h1>

<p class="wikiPara">
The features added in this release are centered around the new APIs and functionality provided by Bean Validation 1.1, such as method validation and expression based message interpolation. Let's have a closer look at some of them.
</p>

<p class="wikiPara">
With <a href="https://hibernate.atlassian.net/browse/HV-714" target="" class="regularLink">HV-714</a> we added a new constraint, <tt>@ParameterScriptAssert</tt> which allows to validate the parameters of a method or constructor using a script expression:
</p>

<pre class="wikiPreformatted">@ParametersScriptAssert(script = "arg0.before(arg1)", lang = "javascript")
public void createCalendarEvent(Date start, Date end, String title) { ... }</pre>

<p class="wikiPara">
    
Similar to <tt>@ScriptAssert</tt> (which applies to the class level) this constraint can be used with every scripting language for which a JSR 223 compatible engine exists. You can choose between a wide variety of options such as JavaScript (for which the JDK provides an engine out of the box), Groovy, JRuby and many others.
</p>

<p class="wikiPara">
As shown in the example, the names <i class="wikiEmphasis">arg0</i>, <i class="wikiEmphasis">arg1</i> etc. are used by default to refer to the parameters of the validated method or constructor. This does not read very well, but unfortunately Java doesn't provide a standardized way to obtain parameter names at runtime (this will change with Java 8 where parameter names can be accessed via reflection).
</p>

<p class="wikiPara">
To address this issue, Bean Validation <a href="http://docs.oracle.com/javaee/7/api/index.html?javax/validation/ParameterNameProvider.html" target="" class="regularLink">defines an SPI</a> which allows to plug in custom parameter name providers. Hibernate Validator offers now an implementation of that SPI (<a href="https://hibernate.atlassian.net/browse/HV-802" target="" class="regularLink">HV-802</a>) which is based on the <a href="http://paranamer.codehaus.org/" target="" class="regularLink">ParaNamer</a> project. ParaNamer is a nice little library which provides several ways for obtaining parameter names at runtime:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> based on debug symbols created by the Java compiler,</li>
<li class="wikiUnorderedListItem"> constants with the parameter names woven into the bytecode in a post-compile step or</li>
<li class="wikiUnorderedListItem"> annotations such as the @Named annotation from JSR 330.</li>
</ul>

<p class="wikiPara">
To use this parameter name provider, add the ParaNamer library to the classpath and configure the provider like this when bootstrapping a validator:
</p>

<pre class="wikiPreformatted">Validator validator = Validation.byDefaultProvider()
    .configure()
    .parameterNameProvider( new ParanamerParameterNameProvider() )
    .buildValidatorFactory()
    .getValidator();</pre>


<p class="wikiPara">
With the parameter name provider configured, you can refer to the parameters using their actual names from within the <tt>@ParameterScriptAssert</tt> constraint (the names will also be used by constraint violations for invalid parameter constraints):
</p>

<pre class="wikiPreformatted">@ParametersScriptAssert(script = "start.before(end)", lang = "javascript")
public void createCalendarEvent(Date start, Date end, String title) { ... }</pre>


<p class="wikiPara">
Refer to the <a href="http://paranamer.codehaus.org/" target="" class="regularLink">ParaNamer</a> documentation to learn more about the different ways it provides for accessing parameter names.
</p>

<h1 class="wikiHeadline1" id="H-MessageInterpolation"><a href="/2013/08/09/hibernate-validator-510-alpha-1-released#H-MessageInterpolation">Message interpolation</a></h1>

<p class="wikiPara">
Another nice new feature is an extension of the <tt>ConstraintValidatorContext</tt> API which allows to add arbitrary objects to constraint violation messages (<a href="https://hibernate.atlassian.net/browse/HV-701" target="" class="regularLink">HV-701</a>). As an example, let's consider this custom validator for the <tt>@Future</tt> constraint:
</p>

<pre class="wikiPreformatted">public class MyFutureValidator implements ConstraintValidator&lt;Future, Date&gt; {

    public void initialize(Future constraintAnnotation) {}

    public boolean isValid(Date value, ConstraintValidatorContext context) {
        if ( value == null ) { return true; }

        Date now = GregorianCalendar.getInstance().getTime();

        if ( value.before( now ) ) {
            HibernateConstraintValidatorContext hibernateContext =
                context.unwrap( HibernateConstraintValidatorContext.class );

            hibernateContext.disableDefaultConstraintViolation();
            hibernateContext.addExpressionVariable( "now", now )
                .buildConstraintViolationWithTemplate( 
                    "Must be after ${formatter.format( '%1$te.%1$tm.%1$tY %1$tH:%1$tM', now ) }"
                )
                .addConstraintViolation();

            return false;
        }

        return true;
    }
}</pre>

<p class="wikiPara">
    
Instead of just using "Must be in the future" as constraint violation message, this validator adds the current time to the message. For that purpose an expression variable with the name "now" is added to the validation context, holding a <tt>Date</tt> object representing the current time. Using the variable name, it can be accessed from within the violation message and formatted as shown in the example.
</p>

<h1 class="wikiHeadline1" id="H-PerformanceImprovements"><a href="/2013/08/09/hibernate-validator-510-alpha-1-released#H-PerformanceImprovements">Performance improvements</a></h1>

<p class="wikiPara">
Besides adding new functionality, we also worked hard to make sure that Hibernate Validator gives you the performance you deserve. Throughout extensive profiling sessions we identified and addressed several performance bottlenecks, e.g. around message interpolation (<a href="https://hibernate.atlassian.net/browse/HV-637" target="" class="regularLink">HV-637</a>). Performance tuning - with respect to memory consumption as well as execution speed - is an ongoing effort and you can look forward to further improvements in that area in the next releases.
</p>

<p class="wikiPara">
This concludes our tour through the new features of Hibernate Validator 5.1.0.Alpha1. You can find the complete list of all fixed issues in the <a href="https://hibernate.atlassian.net/secure/ReleaseNote.jspa?projectId=10060&amp;version=13450" target="" class="regularLink">release notes</a>. The <a href="http://docs.jboss.org/hibernate/validator/5.1/reference/en-US/html/index.html" target="" class="regularLink">reference guide</a> describes all added functionality in detail.
</p>

<p class="wikiPara">
Let us know how you like the new release by adding a comment or posting to the <a href="https://forum.hibernate.org/viewforum.php?f=9" target="" class="regularLink">forum</a>. If you have found a bug be sure to file a <a href="https://hibernate.atlassian.net/browse/HV" target="" class="regularLink">JIRA issue</a> for it. Or, even better, fork the <a href="https://github.com/hibernate/hibernate-validator" target="" class="regularLink">code base</a> and submit a pull request with the required fix. To discuss any development related issues, just send a message to the <a href="http://lists.jboss.org/pipermail/hibernate-dev/" target="" class="regularLink">hibernate-dev</a> list.</p>
</div>

