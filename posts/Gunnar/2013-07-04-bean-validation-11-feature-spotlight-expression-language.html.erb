---
title: "Bean Validation 1.1 Feature Spotlight - Expression Language"
author: "Gunnar Morling"
blogger_name: "Gunnar"
creation_date: "04-07-2013"
original_tags: [Bean Validation,Hibernate Validator]
tags: [Bean Validation,Hibernate Validator]

relative_url: /2013/07/04/bean-validation-11-feature-spotlight-expression-language
slug: bean-validation-11-feature-spotlight-expression-language
lace: http://in.relation.to/24284.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2013/07/04/bean-validation-11-feature-spotlight-expression-language
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
It has been a couple of weeks since Bean Validation 1.1 has <a href="http://beanvalidation.org/news/2013/05/02/bean-validation-1-1-is-a-spec/" target="" class="regularLink">gone final</a>. In the mean time, the Java EE 7 platform spec has <a href="http://www.oracle.com/us/corporate/press/1957557" target="" class="regularLink">been finalized</a> as well, so it's about time to have a closer look at what you can expect from these updates in relation to Bean Validation and its reference implementation, <a href="http://www.hibernate.org/subprojects/validator.html" target="" class="regularLink">Hibernate Validator 5</a>.
</p>

<p class="wikiPara">
Over the following weeks, we'll dive into the most exciting new features in a series of blog posts, starting today with the usage of expression language in error messages.
</p>

<h2 class="wikiHeadline2" id="H-ExecutiveSummary"><a href="/2013/07/04/bean-validation-11-feature-spotlight-expression-language#H-ExecutiveSummary">Executive summary</a></h2>

<p class="wikiPara">
Many users relate the <a href="http://jcp.org/en/jsr/detail?id=341" target="" class="regularLink">Unified Expression Language</a> (EL) only to JSF and JSP. But it doesn't stop there. Actually, EL has matured over time into an independent language with it's own specification and nice features such as Lambda expressions. It can be used in any application layer, in Java EE as well as Java SE based applications.
</p>

<p class="wikiPara">
Bean Validation 1.1 makes use of EL to offer advanced functionality around constraint violation messages such as conditional messages and customizable message formatting.
</p>

<h2 class="wikiHeadline2" id="H-UsingELExpressionsInConstraintMessages"><a href="/2013/07/04/bean-validation-11-feature-spotlight-expression-language#H-UsingELExpressionsInConstraintMessages">Using EL expressions in constraint messages</a></h2>

<p class="wikiPara">
As an example, let's take a look at the built-in <a href="http://docs.jboss.org/hibernate/beanvalidation/spec/1.1/api/index.html?javax/validation/constraints/DecimalMax.html" target="" class="regularLink">@DecimalMax</a> constraint. As of Bean Validation 1.1, this constraint has a new flag named <tt>inclusive</tt> which specifies whether the given maximum value is inclusive or not. Depending on the flag's value, the constraint's error message should either be <i class="wikiEmphasis">must be less than {value}</i> or <i class="wikiEmphasis">must be less than or equal to {value}</i>.
</p>

<p class="wikiPara">
This kind of behaviour was not easily achievable in Bean Validation 1.0 but it is straight-forward using an EL expression which conditionally adds the <i class="wikiEmphasis">or equal to</i> part:
</p>

<pre class="wikiPreformatted">must be less than ${inclusive == true ? 'or equal to ' : ''}{value}"</pre>


<p class="wikiPara">
EL expressions are given in the form <tt>${expression}</tt>. You can use them to implement conditional logic as in the example, perform calculations, nicely format values etc. Refer to the <a href="http://download.oracle.com/otndocs/jcp/el-3_0-fr-eval-spec/index.html" target="" class="regularLink">EL specification</a> to learn more about the provided functionality and the syntax.
</p>

<p class="wikiPara">
As the <tt>{value}</tt> expression from the example shows, the Bean Validation 1.0 syntax for referencing attributes is still supported and takes precedence over expression evaluation. So for instance the message <i class="wikiEmphasis">${amount}</i> would be interpolated into something like <i class="wikiEmphasis">$50</i>.
</p>

<h2 class="wikiHeadline2" id="H-ReferringToTheValidatedValue"><a href="/2013/07/04/bean-validation-11-feature-spotlight-expression-language#H-ReferringToTheValidatedValue">Referring to the validated value</a></h2>

<p class="wikiPara">
Besides all attributes of the validated constraint (such as <tt>inclusive</tt>) you can access the value to which the constraint is applied using the name <tt>validatedValue</tt> as shown in the following example:
</p>

<pre class="wikiPreformatted">@ValidCustomer( message = "Not a valid customer: ${validatedValue.getName()}" )
public class Customer {

    //...

    public String getName() {
        return name;
    }
}</pre>


<p class="wikiPara">
Here, a violation of the <tt>@ValidCustomer</tt> constraint would produce a message such as <q>Not a valid customer: Bob</q>.
</p>

<h2 class="wikiHeadline2" id="H-DoingSomeFormatting"><a href="/2013/07/04/bean-validation-11-feature-spotlight-expression-language#H-DoingSomeFormatting">Doing some formatting</a></h2>

<p class="wikiPara">
Finally, a helper for formatting strings is exposed under the name <tt>formatter</tt>, providing a var-args method <tt>format(String format, Object... args)</tt> which exactly behaves like <tt>java.util.Formatter.format(String format, Object... args)</tt>. This comes in handy if you e.g. want to format number values in a special way:
</p>

<pre class="wikiPreformatted">public class Order {

    @DecimalMin(value="20.00", message="Order value too low: € ${formatter.format('%08.2f', validatedValue)}")
    private final BigDecimal value;

    //...
}</pre>


<p class="wikiPara">
The shown format expression causes the value to be padded with leading zeros, so if the <tt>@DecimalMin</tt> constraint is violated, you would get a message such as <q>Order value too low: € 00017.89</q>.
</p>

<h2 class="wikiHeadline2" id="H-ELAndTheClasspath"><a href="/2013/07/04/bean-validation-11-feature-spotlight-expression-language#H-ELAndTheClasspath">EL and the classpath</a></h2>

<p class="wikiPara">
In order to use the expression language feature, you need an EL implementation on your classpath. That's usually the case when running in a Java EE container such as <a href="http://www.wildfly.org/" target="" class="regularLink">WildFly</a>, but you'll have to add an implementation by yourself if your application runs in a plain Java SE environment. Two implementations known to work with Hibernate Validator are the EL <a href="https://uel.java.net/" target="" class="regularLink">reference implementation</a> and <a href="http://juel.sourceforge.net/" target="" class="regularLink">JUEL</a>.
</p>

<p class="wikiPara">
Finally a special tip to all the Tomcat users out there. Hibernate Validator requires at least EL 2.2. This is part of Tomcat 7, so you should be all set there. Tomcat 6 only comes with an EL 2.1 implementation, though. So does this mean you can't experience all the Bean Validation 1.1 goodness on Tomcat 6 then? Luckily not, it just requires a little preparation. Check out the Hibernate Validator FAQ to learn how <a href="https://community.jboss.org/wiki/HibernateValidatorFAQ#Does_Hibernate_Validator_5x_work_with_Tomcat_6" target="" class="regularLink">to update</a> the Tomcat EL libraries.
</p>

<h2 class="wikiHeadline2" id="H-TryingItOutYourself"><a href="/2013/07/04/bean-validation-11-feature-spotlight-expression-language#H-TryingItOutYourself">Trying it out yourself</a></h2>

<p class="wikiPara">
If you'd like to give the expression language feature a spin, just grab the latest Hibernate Validator release from <a href="http://sourceforge.net/projects/hibernate/files/hibernate-validator/5.0.1.Final/" target="" class="regularLink">here</a>. If you work with Maven, Gradle or similar, you can pull it into your project using its GAV coordinates <u>org.hibernate.hibernate-validator.5.0.1.Final</u>. And if you feel adventurous and like playing with the latest bits, you even may build WildFly yourself from <a href="https://github.com/wildfly/wildfly" target="" class="regularLink">its sources</a>. It has been updated to Hibernate Validator 5 a couple of days ago.
</p>

<p class="wikiPara">
The recently revamped <a href="http://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#section-interpolation-with-message-expressions" target="" class="regularLink">reference guide</a> has all the information you need, and we're happy to help you with any questions in the <a href="https://forum.hibernate.org/viewforum.php?f=9" target="" class="regularLink">forum</a>.</p>
</div>

