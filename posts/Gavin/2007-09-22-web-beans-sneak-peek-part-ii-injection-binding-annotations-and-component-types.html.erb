---
title: "Web Beans Sneak Peek Part II: Injection, binding annotations and component types"
author: "Gavin King"
blogger_name: "Gavin"
creation_date: "22-09-2007"
original_tags: [Web Beans,Web Beans Sneak Peek]
tags: [CDI]

relative_url: /2007/09/22/web-beans-sneak-peek-part-ii-injection-binding-annotations-and-component-types
slug: web-beans-sneak-peek-part-ii-injection-binding-annotations-and-component-types
lace: http://in.relation.to/2426.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2007/09/22/web-beans-sneak-peek-part-ii-injection-binding-annotations-and-component-types
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
/This is the second installment of a series of articles describing the 
current status of the Web Beans specification. You can find the first
installment <a href="/Bloggers/WebBeansSneakPeekPartIIntroducingWebBeans" target="" class="regularLink">here</a>./
</p>

<p class="wikiPara">
Web Beans supports three primary mechanisms for dependency injection:
</p>

<p class="wikiPara">
Direct field injection:
</p>

<pre class="wikiPreformatted">@Component
public class Checkout {

    @In ShoppingCart cart;
    
}</pre>


<p class="wikiPara">
Method injection:
</p>

<pre class="wikiPreformatted">@Component
public class Checkout {
        
    private ShoppingCart cart;

    @In void setShoppingCart(ShoppingCart cart) {
        this.cart = cart;
    }
    
}</pre>


<p class="wikiPara">
And constructor injection:
</p>

<pre class="wikiPreformatted">@Component
public class Checkout {
        
    private final ShoppingCart cart;

    public Checkout(ShoppingCart cart) {
        this.cart = cart;
    }

}</pre>


<p class="wikiPara">
In addition, resolver methods support parameter injection:
</p>

<pre class="wikiPreformatted">@Resolves Checkout createCheckout(ShoppingCart cart) {
    return new Checkout(cart);
}</pre>


<p class="wikiPara">
Dependency injection always occurs when the component instance is
first instantiated.
</p>

<p class="wikiPara">
The Web Beans specification defines a procedure, called the /typesafe
resolution algorithm/, that the Web Beans container follows when identifying 
the component to inject to an injection point. This algorithm looks complex 
at first, but once you understand it, it's really quite intuitive. Typesafe
resolution is performed at system initialization time, which means that
the container will inform the user immediately if a component's dependencies 
cannot be satisfied.
</p>

<p class="wikiPara">
The purpose of this algorithm is to allow multiple components to implement the
same API type and either:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> allow the client to select which implementation it requires using /binding annotations/, or</li>
<li class="wikiUnorderedListItem"> allow one implementation of an API to override another implementation of the same API at deployment time, without changes to the client, using /component type precedence/.</li>
</ul>

<p class="wikiPara">
Let's explore how the Web Beans container determines a component to
be injected.
</p>

<h2 class="wikiHeadline2" id="H-BindingAnnotations"><a href="/2007/09/22/web-beans-sneak-peek-part-ii-injection-binding-annotations-and-component-types#H-BindingAnnotations">Binding annotations</a></h2>

<p class="wikiPara">
If we have more than one component that implements a particular API
type, the injection point can specify exactly which component should
be injected using a binding annotation. For example, there might
be two implementations of <tt>PaymentProcessor</tt>:
</p>

<pre class="wikiPreformatted">@Component @PayByCheque
public class ChequePaymentProcessor implements PaymentProcessor {
    public void process(Payment payment) { ... }
}</pre>
<p class="wikiPara">
      
</p>

<pre class="wikiPreformatted">@Component @PayByCreditCard
public class CreditCardPaymentProcessor implements PaymentProcessor {
    public void process(Payment payment) { ... }
}</pre>


<p class="wikiPara">
Where <tt>@PayByCheque</tt> and <tt>@PayByCreditCard</tt> are binding annotations:
</p>

<pre class="wikiPreformatted">@Retention(RUNTIME)
@Target({TYPE, METHOD, FIELD})
@BindingType
public @interface PayByCheque {}</pre>


<pre class="wikiPreformatted">@Retention(RUNTIME)
@Target({TYPE, METHOD, FIELD})
@BindingType
public @interface PayByCreditCard {}</pre>


<p class="wikiPara">
A client component developer uses the binding annotation to specify
exactly which component should be injected:
</p>

<pre class="wikiPreformatted">@In @PayByCheque PaymentProcessor chequePaymentProcessor;
@In @PayByCreditCard PaymentProcessor creditCardPaymentProcessor;</pre>


<p class="wikiPara">
Equivalently, using constructor injection:
</p>

<pre class="wikiPreformatted">public Checkout(@PayByCheque PaymentProcessor chequePaymentProcessor, 
                 @PayByCreditCard PaymentProcessor creditCardPaymentProcessor) {
   this.chequePaymentProcessor = chequePaymentProcessor;
   this.creditCardPaymentProcessor = creditCardPaymentProcessor;
}</pre>


<h2 class="wikiHeadline2" id="H-BindingAnnotationsWithMembers"><a href="/2007/09/22/web-beans-sneak-peek-part-ii-injection-binding-annotations-and-component-types#H-BindingAnnotationsWithMembers">Binding annotations with members</a></h2>

<p class="wikiPara">
Binding annotations may have members:
</p>

<pre class="wikiPreformatted">@Retention(RUNTIME)
@Target({TYPE, METHOD, FIELD})
@BindingType
public @interface PayBy {
    PaymentType value();
}</pre>


<p class="wikiPara">
In which case, the member value is significant:
</p>

<pre class="wikiPreformatted">@In @PayBy(CHEQUE) PaymentProcessor chequePaymentProcessor;
@In @PayBy(CREDIT_CARD) PaymentProcessor creditCardPaymentProcessor;</pre>


<h3 class="wikiHeadline3" id="H-CombinationsOfBindingAnnnotations"><a href="/2007/09/22/web-beans-sneak-peek-part-ii-injection-binding-annotations-and-component-types#H-CombinationsOfBindingAnnnotations">Combinations of binding annnotations</a></h3>

<p class="wikiPara">
An injection point may even specify multiple binding annotations:
</p>

<pre class="wikiPreformatted">@In @Asynchronous @PayByCheque paymentProcessor</pre>


<p class="wikiPara">
In this case, only a component which supports /both/ binding annotation
would be eligable for injection.
</p>

<h2 class="wikiHeadline2" id="H-BindingAnnotationsAndResolverMethods"><a href="/2007/09/22/web-beans-sneak-peek-part-ii-injection-binding-annotations-and-component-types#H-BindingAnnotationsAndResolverMethods">Binding annotations and resolver methods</a></h2>

<p class="wikiPara">
Of course, even resolver methods may specify binding annotations:
</p>

<pre class="wikiPreformatted">@Resolves 
@Asynchronous @PayByCheque 
PaymentProcessorService createAsyncPaymentProcessor(@PayByCheque PaymentProcessor processor) {
    return new AsynchronousPaymentProcessorService(processor);
}</pre>


<p class="wikiPara">
This method would be called to create an instance for injection to 
the following injection point:
</p>

<pre class="wikiPreformatted">@In @Asynchronous @PayByCheque PaymentProcessorService service;</pre>


<h2 class="wikiHeadline2" id="H-ComponentTypes"><a href="/2007/09/22/web-beans-sneak-peek-part-ii-injection-binding-annotations-and-component-types#H-ComponentTypes">Component types</a></h2>

<p class="wikiPara">
All Web Bean components have a /component type/. Each component type
identifies a set of components that should be conditionally installed
in some deployments of the system.
</p>

<p class="wikiPara">
For example, we could define a component type named <tt>@Mock</tt>, which 
would identify components that should only be installed when the system
executes inside an integration testing environment:
</p>

<pre class="wikiPreformatted">@Retention(RUNTIME)
@Target({TYPE, METHOD})
@ComponentType
public @interface Mock {}</pre>


<p class="wikiPara">
Suppose we had some component that interacted with an external system to
process payments:
</p>

<pre class="wikiPreformatted">@Component
public class PaymentProcessor {
        
    public void process(Payment p) {
        ...
    }
    
}</pre>


<p class="wikiPara">
For integration or unit testing, the external system is slow or unavailable.
So we would create a mock object:
</p>

<pre class="wikiPreformatted">@Mock 
public class MockPaymentProcessor extends PaymentProcessor {

    @Override
    public void process(Payment p) {
        p.setSuccessful(true);
    }

}</pre>


<h2 class="wikiHeadline2" id="H-InstallingComponentTypes"><a href="/2007/09/22/web-beans-sneak-peek-part-ii-injection-binding-annotations-and-component-types#H-InstallingComponentTypes">Installing component types</a></h2>

<p class="wikiPara">
Web Beans defines two built-in component types: <tt>@Component</tt> and <tt>@Standard</tt>.
By default, only components with the built-in component types are installed
when the system is deployed. We can identify additional component types to
be installed in a particular deployment by listing them in <tt>web-beans.xml</tt>.
</p>

<p class="wikiPara">
Going back to our example, when we deploy our integration tests, we want all 
our <tt>@Mock</tt> objects to be installed:
</p>

<pre class="wikiPreformatted">&lt;web-beans&gt;
    &lt;component-types&gt;
        &lt;component-type&gt;javax.webbeans.Standard&lt;/component-type&gt;
        &lt;component-type&gt;javax.webbeans.Component&lt;/component-type&gt;
        &lt;component-type&gt;org.jboss.test.Mock&lt;/component-type&gt;
    &lt;/component-types&gt;
&lt;/web-beans&gt;</pre>


<p class="wikiPara">
Now the Web Beans container will identify and install all components annotated
<tt>@Component</tt>, <tt>@Standard</tt> or <tt>@Mock</tt> at deployment time. 
</p>

<p class="wikiPara">
(Note that a component with no component type annotation will never be discovered 
by the Web Beans container; the container searches for classes with component type 
annotations when scanning the classpath to discover components.)
</p>

<p class="wikiPara">
It's interesting to compare this facility to today's popular container 
architectures. Various <q>lightweight</q> containers also allow conditional 
deployment of components
that exist in the classpath, but the components that are to be deployed must
be explicity, individually, listed in configuration code or in some XML 
configuration file.
Web Beans does support component definition and configuration via XML, but in
the common case where no complex configuration is required, component types
allow a whole set of components to be enabled with a single line of XML.
Meanwhile, a developer browsing the code can easily identify what context the 
component will be used in.
</p>

<h2 class="wikiHeadline2" id="H-ComponentTypePrecedence"><a href="/2007/09/22/web-beans-sneak-peek-part-ii-injection-binding-annotations-and-component-types#H-ComponentTypePrecedence">Component type precedence</a></h2>

<p class="wikiPara">
If you've been paying attention, you're probably wondering how the container
decides which implementation - <tt>PaymentProcessor</tt> or <tt>MockPaymentProcessor</tt> -
to choose. Consider what happens when the container encounters this injection 
point:
</p>

<pre class="wikiPreformatted">@In PaymentProcessor pp;</pre>


<p class="wikiPara">
There are now two components which satisfy the <tt>PaymentProcessor</tt> contract. 
Of course, we can't use a binding annotation to disambiguate, since binding 
annotations are hardcoded into the source at the injection point, and we want 
the container to be able to decide at deployment time!
</p>

<p class="wikiPara">
The solution to this problem is that each component type has a different
/precedence/. The precedence of the component types is determined by the order 
in which they appear in <tt>web-beans.xml</tt>. In our example, <tt>@Mock</tt> appears 
later than <tt>@Component</tt> so it has a higher precedence.
</p>

<p class="wikiPara">
Whenever the container discovers that more than one component could satisfy 
the contract (API type plus binding annotations) specified by an injection point,
it considers the relative precedence of the components. If one has a higher 
precedence than the others, it chooses the higher precedence component to
inject. So, in our example, the container will inject <tt>MockPaymentProcessor</tt>
when executing in the integration testing environment, and <tt>PaymentProcessor</tt>
when executing in production (which is exactly what we want).
</p>

<h2 class="wikiHeadline2" id="H-ExampleComponentTypes"><a href="/2007/09/22/web-beans-sneak-peek-part-ii-injection-binding-annotations-and-component-types#H-ExampleComponentTypes">Example component types</a></h2>

<p class="wikiPara">
Component types are useful for all kinds of things, some more examples:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> <tt>@Mock</tt> and <tt>@Staging</tt> component types for testing</li>
<li class="wikiUnorderedListItem"> <tt>@AustralianTaxLaw</tt> for site-specific components</li>
<li class="wikiUnorderedListItem"> <tt>@SeamFramework</tt>, <tt>@Guice</tt> for third-party frameworks which build on Web Beans</li>
<li class="wikiUnorderedListItem"> <tt>@Standard</tt> for standard components defined by the Web Beans specification</li>
</ul>

<p class="wikiPara">
I'm sure you can think of more applications...
</p>

<h2 class="wikiHeadline2" id="H-TwoMoreRulesToRemember"><a href="/2007/09/22/web-beans-sneak-peek-part-ii-injection-binding-annotations-and-component-types#H-TwoMoreRulesToRemember">Two more rules to remember?</a></h2>

<p class="wikiPara">
As we've seen, the typesafe resolution algorith considers:
</p>

<ol class="wikiOrderedList">
<li class="wikiOrderedListItem"> API type</li>
<li class="wikiOrderedListItem"> binding annotations</li>
<li class="wikiOrderedListItem"> component type precedence</li>
</ol>

<p class="wikiPara">
when resolving a component to be injected. If these rules fail to produce a
unique component (if there are multiple components which all have the same high 
precedence, implement the required API type and support the required binding 
annotations),
an exception will be thrown by the container at system initialization time.
</p>

<p class="wikiPara">
The Web Beans group has discussed the possibility of introducing two additional 
rules to be used only when the rules above fail to narrow the list of components 
to a unique component. On balance, I'm in favor of these rules, since I think
they're useful. However, the group as a whole is concerned that the additional
complexity is confusing to developers. Therefore, we're seeking feedback from
the community on the following ideas.
</p>

<p class="wikiPara">
/Note:/ If you're not used to thinking in terms of binding annotations and 
component precendence, you're probably thinking that component resolution
is already complex enough! But I'm confident that once you get used to it, the 
resolution algorithm is extremely robust and will grow to become totally 
intuitive.
</p>

<h3 class="wikiHeadline3" id="H-Rule1TheLeastderivedImplementationRule"><a href="/2007/09/22/web-beans-sneak-peek-part-ii-injection-binding-annotations-and-component-types#H-Rule1TheLeastderivedImplementationRule">Rule 1: The /least-derived implementation/ rule</a></h3>

<p class="wikiPara">
This proposed rule states that if the algorithm above fails to result in a
unique component, and if there is a /least-derived/ component in the set 
of candidates - one candidate that the other candidates all (directly or 
indirectly) extend, then the least-derived component will be chosen.
</p>

<p class="wikiPara">
This rule is designed to ensure that it is easy to introduce new components
into the system using implementation inheritance from pre-existing components,
without breaking or changing the behavior of pre-existing clients.
</p>

<p class="wikiPara">
For example, if I have this pre-existing component:
</p>

<pre class="wikiPreformatted">@Component @PayByCheque
ChequePaymentProcessor implements PaymentProcessor { ... }</pre>


<p class="wikiPara">
and I introduce a new component that extends this one:
</p>

<pre class="wikiPreformatted">@Component @PayByCheque
AsynchronousChequePaymentProcessor 
    extends ChequePaymentProcessor 
    implements AsynchronousPaymentProcessor { ... }</pre>


<p class="wikiPara">
Then the following injection point would continue to resolve to the base
<tt>ChequePaymentProcessor</tt> component:
</p>

<pre class="wikiPreformatted">@In @PayByCheque PaymentProcessor processor;</pre>


<p class="wikiPara">
While this new injection point would of course receive an instance of 
<tt>AsynchronousChequePaymentProcessor</tt>:
</p>

<pre class="wikiPreformatted">@In @PayByCheque AsynchronousPaymentProcessor processor;</pre>


<h3 class="wikiHeadline3" id="H-Rule2TheLeastspecificBindingsRule"><a href="/2007/09/22/web-beans-sneak-peek-part-ii-injection-binding-annotations-and-component-types#H-Rule2TheLeastspecificBindingsRule">Rule 2: The /least-specific bindings/ rule</a></h3>

<p class="wikiPara">
This proposed rule is analogous to the previous rule, but refers to binding
annotations rather than API types. It could be adopted either in addition 
to, or as an alternative to, Rule 1. It states that if the algorithm above
fails to result in a unique component, and if there is exactly one component
in the set of candidates that has /exactly/ the same binding annotations
specified at the injection point, then this least-specific component will
be chosen.
</p>

<p class="wikiPara">
For example, if I have this pre-existing component:
</p>

<pre class="wikiPreformatted">@Component @PayByCheque 
ChequePaymentProcessor implements PaymentProcessor { ... }</pre>


<p class="wikiPara">
and I introduce a new component that also supports the <tt>@PayByCheque</tt>
binding annotation:
</p>

<pre class="wikiPreformatted">@Component @PayByCheque @Asynchronous
AsynchronousChequePaymentProcessor 
    extends ChequePaymentProcessor { ... }</pre>


<p class="wikiPara">
Then the following injection point would continue to resolve to the base
<tt>ChequePaymentProcessor</tt> component:
</p>

<pre class="wikiPreformatted">@In @PayByCheque PaymentProcessor paymentProcessor;</pre>


<p class="wikiPara">
While this new injection point would of course receive an instance of 
<tt>AsynchronousPaymentProcessor</tt>:
</p>

<pre class="wikiPreformatted">@In @PayByCheque @Asynchronous PaymentProcessor paymentProcessor;</pre>


<h3 class="wikiHeadline3" id="H-AreYouScaredYet"><a href="/2007/09/22/web-beans-sneak-peek-part-ii-injection-binding-annotations-and-component-types#H-AreYouScaredYet">Are you scared yet?</a></h3>

<p class="wikiPara">
Phew, we started to get a bit esoteric there! Don't worry, this is as complex
as it gets, and if we get too much negative feedback about the two proposed
rules above, it won't even get /that/ complex.
</p>
</div>

