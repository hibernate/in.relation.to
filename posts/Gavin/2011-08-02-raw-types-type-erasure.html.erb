---
title: "Raw types != type erasure"
author: "Gavin King"
blogger_name: "Gavin"
creation_date: "02-08-2011"
original_tags: []
tags: []

relative_url: /2011/08/02/raw-types-type-erasure
slug: raw-types-type-erasure
lace: http://in.relation.to/21426.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2011/08/02/raw-types-type-erasure
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
In connection with <a href="/Bloggers/ThreeArgumentsForReifiedGenerics" target="" class="regularLink">this discussion</a> it's worth making explicit what I guess everybody knows, but that sometimes seems to get a bit mixed up in conversation: that Java's support for raw types (necessary for backward compatibility with pre-generics code) doesn't really have anything much to do with type argument erasure. In a hypothetical language:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> you could have raw types without type argument erasure, or</li>
<li class="wikiUnorderedListItem"> you could have type argument erasure without raw types.</li>
</ul>

<p class="wikiPara">
Raw types have their own problems, of course (they're a designed-in hole in the type system). But a defense of the existence of raw types does <i class="wikiEmphasis">not</i> amount to a defense of partially reified types.</p>
</div>

