---
title: "XML configuration in Web Beans"
author: "Gavin King"
blogger_name: "Gavin"
creation_date: "21-12-2008"
original_tags: [Web Beans]
tags: [CDI]

relative_url: /2008/12/21/xml-configuration-in-web-beans
slug: xml-configuration-in-web-beans
lace: http://in.relation.to/10246.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2008/12/21/xml-configuration-in-web-beans
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
The Web Beans specification <a href="http://docs.jboss.org/webbeans/spec/PDR/html/xmlconfiguration.html" target="" class="regularLink">defines</a> an XML configuration format that uses XML namespaces to achieve typesafety.
</p>

<p class="wikiPara">
Imagine that we have the following class:
</p>

<pre class="wikiPreformatted">public class ShoppingCart {
    
    private final PaymentProcessor paymentProcessor;
    private final User customer;
    
    public ShoppingCart(PaymentProcessor paymentProcessor, User customer) { 
        this.paymentProcessor = paymentProcessor;
        customer = customer;
    }

    ...

}</pre>


<p class="wikiPara">
Of course, we could configure its scope, name and dependencies using annotations:
</p>

<pre class="wikiPreformatted">@SessionScoped
@Named("cart")
public class ShoppingCart {
    
    private final PaymentProcessor paymentProcessor;
    private final User customer;
    
    @Initializer
    public ShoppingCart(@PayBy(CREDIT_CARD) PaymentProcessor paymentProcessor, @LoggedIn User customer) { 
        this.paymentProcessor = paymentProcessor;
        customer = customer;
    }

    ...

}</pre>


<p class="wikiPara">
But suppose that this class is defined in a reusable library, and that this metadata depends upon the application in which it is deployed. Then it would be better to define the metadata in XML. The Web Beans Early Draft defined a configuration format that was similar to other Java EE deployment descriptors: 
</p>

<pre class="wikiPreformatted">&lt;web-beans ...&gt;

   &lt;component&gt;

      &lt;class&gt;org.example.ShoppingCart&lt;/class&gt;
      &lt;named&gt;cart&lt;/named&gt;
      &lt;scope&gt;javax.webbeans.SessionScoped&lt;/scope&gt;

      &lt;constructor&gt;
         &lt;param&gt;
            &lt;type&gt;org.example.PaymentProcessor&lt;/type&gt;
            &lt;binding&gt;org.example.PayBy(CREDIT_CARD)&lt;/binding&gt;
         &lt;/param&gt;
         &lt;param&gt;
            &lt;type&gt;org.example.User&lt;/type&gt;
            &lt;binding&gt;org.example.LoggedIn&lt;/binding&gt;
         &lt;/param&gt;
      &lt;/constructor&gt;

   &lt;/component&gt;

&lt;/web-beans&gt;</pre>


<p class="wikiPara">
There are several problems with this approach:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> it's quite verbose</li>
<li class="wikiUnorderedListItem"> the interesting information (the type names) can't be validated against an XML schema</li>
<li class="wikiUnorderedListItem"> the interesting information can't be autocompleted without special tooling that is aware of the Java types</li>
</ul>

<p class="wikiPara">
Even worse, the XML format places a bit too much emphasis upon the actual Java constructs (<q>constructor</q>, <q>param</q>, etc) which is inappropriate if the use case is configuration of a third-party library.
</p>

<p class="wikiPara">
Therefore, the Web Beans public draft defines a different approach, inspired by Spring 2 and Seam 2. The idea is to define an XML namespace corresponding to each Java package. For example, the namespace <tt>urn:java:org.example</tt> represents the Java package <tt>org.example</tt>. XML elements in this namespace represent types or members of types in that package.
</p>

<p class="wikiPara">
We can re-write our example as follows:
</p>

<pre class="wikiPreformatted">&lt;WebBeans xmlns="urn:java:javax.webbeans"
          xmlns:eg="urn:java:org.example"&gt;

   &lt;eg:ShoppingCart&gt;
      &lt;Named&gt;cart&lt;/Named&gt;
      &lt;SessionScoped/&gt;
      
      &lt;eg:PaymentProcessor&gt;
         &lt;eg:PayBy&gt;CREDIT_CARD&lt;eg:PayBy&gt;
      &lt;/eg:PaymentProcessor&gt;
      
      &lt;eg:User&gt;
         &lt;eg:LoggedIn/&gt;
      &lt;/eg:User&gt;
      
   &lt;/eg:ShoppingCart&gt;
   
&lt;/WebBeans&gt;</pre>


<p class="wikiPara">
Now, what's really fantastic about this approach is that we can write an XML schema for each namespace, letting us take advantage of autocompletion and validation when we write the XML document. Even better, the RI project plans to create a Java 6 annotation processor (a compiler plugin for <tt>javac</tt>) that automatically generates this schema as part of the compilation process. So every time you compile your code, you'll immediately see any resulting errors in your XML configurations! Thus, this approach tackles one of the main causes of the <q>XML hell</q> that affects Java development.
</p>

<p class="wikiPara">
Personally, I'm pretty bewitched by any solution which is simultaneously more typesafe and less verbose (usually typesafety costs in verbosity). However, at least one of the members of the Web Beans EG is concerned that the typesafe XML format is inconsistent with the format used by other Java EE deployment descriptors, and potentially confusing.
</p>

<p class="wikiPara">
Therefore, I would like to gather feedback from the community on this issue. Which style do you prefer? Please let us know what you think in comments.
</p>
</div>

