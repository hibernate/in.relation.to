---
title: "Web Beans and the EE platform"
author: "Gavin King"
blogger_name: "Gavin"
creation_date: "09-11-2008"
original_tags: [Web Beans]
tags: [CDI,Hibernate ORM]

relative_url: /2008/11/09/web-beans-and-the-ee-platform
slug: web-beans-and-the-ee-platform
lace: http://in.relation.to/9799.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2008/11/09/web-beans-and-the-ee-platform
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
If there's one thing that we really want to get right as <a href="http://jcp.org/en/jsr/detail?id=299" target="" class="regularLink">Web Beans</a> goes from <a href="http://docs.jboss.org/webbeans/spec/PDR/pdf/Web%20Beans%2020081029.pdf" target="" class="regularLink">Public Draft</a> to Proposed Final draft, it's integration with the Java EE platform. Up to this point, most of the work we've been doing as an EG was focused on nailing down the programming model, the semantics of the Web Beans services, and the behavior of the Web Bean manager. We've been writing the spec to assume that Web Beans implementations should be pluggable between different Java EE containers, because this is a direction that a lot of folks in the Java EE community believe that the EE platform should move in, and because we would like Web Beans to help show the way for other specifications such as EJB, JTA and perhaps even Servlets (note that JPA and JSF already support this).
</p>

<p class="wikiPara">
Since the release of the Public Draft, our main focus has shifted to the integration problem. Web Beans generated a bunch of controversy when the draft was circulated to the EE platform expert group and proposed by Sun for inclusion in the Web Profile. That's not surprising - Web Beans solves some very important problems that lots of people have strong opinions on. I've also had a number of more technical discussions with the EE and EJB spec leads and with the EJB expert group. A number of concerns have emerged, which we're now attempting to address.
</p>

<p class="wikiPara">
Let me share my take on these issues, and some directions we might pursue. But first...
</p>

<h2 class="wikiHeadline2" id="H-SomeHistory"><a href="/2008/11/09/web-beans-and-the-ee-platform#H-SomeHistory">...some history</a></h2>

<p class="wikiPara">
In the days of EJB 1.x and 2.x, a major complaint against EJB was that the programming model was too restrictive. The specification imposed many annoying, distracting and unnecessary requirements upon developers. EJB 3.0 changed all that. Gone were the most of these annoying coding restrictions. In place of verbose XML deployment descriptors, EJB 3.0 was the first Java component model to be based around the use of annotations. In place of JNDI lookups was a simple dependency injection model, which ended up being generalized at the EE 5 platform level. I was a member of the EJB 3.0 expert group, and remain proud of what we accomplished.
</p>

<p class="wikiPara">
However, the Java EE 5 dependency injection model was criticized from the outset. Many folks, including Rod Johnson of SpringSource, argued that the lack of support for injection of Java classes which were not EJBs was a fatal flaw. (At the time I did not agree, but I've changed my mind since.) On the other hand, I was dissatisfied with the lack of a contextual lifecycle model - though, in fairness, some other DI solutions of the time, including Spring, also lacked a contextual model. I was also unhappy with the mismatch between the JSF (XML-based, contextual) dependency injection model and the platform-level (annotation-based, non-contextual) model. This mismatch made it difficult to integrate EJB components with JSF.
</p>

<p class="wikiPara">
Most of the changes introduced in EJB 3.0 and JPA 1.0 have stood the test of time remarkably well. The EE 5 dependency injection model has not. Contextual lifecycle management is now a standard feature of dependency injection solutions including Seam, Spring and Guice. Most importantly, Guice showed us the folly of using string-based names to identify implementations of an API. And Seam showed how to simplify application development by unifying dependency management in the web and EJB tiers.
</p>

<p class="wikiPara">
Web Beans was initiated to address these problems. The original <a href="http://jcp.org/en/jsr/detail?id=299" target="" class="regularLink">JSR proposal</a> complained that:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> <q>EJB components are not aware of the web-tier request, session and application contexts and do not have access to state associated with those contexts. Nor may the lifecycle of a stateful EJB component be scoped to a web-tier context.</q>
</li>
<li class="wikiUnorderedListItem"> <q>The JSF component model is not consistent with Java EE ... dependency injection...</q>
</li>
</ul>

<p class="wikiPara">
The JSR promised to <q>unif[y] the two component models and enabl[e] a considerable simplification to the programming model</q>.
</p>

<p class="wikiPara">
A new dependency injection model was needed: a model that provided contextual lifecycle management to transactional EE components.
</p>

<h2 class="wikiHeadline2" id="H-IsWebBeansAComponentModel"><a href="/2008/11/09/web-beans-and-the-ee-platform#H-IsWebBeansAComponentModel">Is Web Beans a component model?</a></h2>

<p class="wikiPara">
In the Web Beans Early Draft, we characterized Web Beans as a component model. The specification defined two things:
</p>

<ol class="wikiOrderedList">
<li class="wikiOrderedListItem"> a set of restrictions that a Java class or EJB session bean must satisfy in order to be a Web Bean (principally, but not only, that it must explicitly specify <tt>@Component</tt> or another deployment type), and</li>
<li class="wikiOrderedListItem"> the services that would then be available to the Web Bean.</li>
</ol>

<p class="wikiPara">
I viewed this as a <i class="wikiEmphasis">unifying</i> component model: a unification that would solve a major problem that has existed since J2EE - that the Java EE web tier has a completely different component model (actually, component models plural) to the transactional tier. It promised to <q>tear down the wall</q> between the two tiers, allowing transactional components to be aware of state related to the Web request. It promised a truly uniform programming model for components concerned with orchestration of the Web request, and components concerned with managing data access (at least when JSF was used).
</p>

<p class="wikiPara">
This turned out to be the wrong approach. The strong feedback from the EE group was that Web Beans shouldn't define a new component model. The feedback from the EE spec leads at Sun was that the services defined by Web Beans should be available to all kinds of Java EE components - not just those which satisfied our definition of a <q>Web Bean</q>.
</p>

<p class="wikiPara">
At Sun's urging, we made two changes to the specification. The first was primarily a language change. We repositioned Web Beans as a set of services, provided by a <tt>Manager</tt> analogous to the JTA <tt>TransactionManager</tt>, instead of a <q>component model</q> with a <tt>Container</tt>. But this also implied two more technical changes:
</p>

<ol class="wikiOrderedList">
<li class="wikiOrderedListItem"> we dramatically loosened the restrictions on what objects are Web Beans, so that every EJB session bean and every JavaBean is now a Web Bean, without any requirement for explicit declaration, and</li>
<li class="wikiOrderedListItem"> we provided a set of SPIs to allow objects which are <i class="wikiEmphasis">not</i> JavaBeans or EJB session beans to take advantage of the services provided by the Web Bean manager.</li>
</ol>

<p class="wikiPara">
In particular, we provided injection into Servlets and message-driven beans (objects which by nature are not injectable) and an SPI that allowed other EE technologies and thirdparty frameworks to offer their components up for injection by Web Beans, and take advantage of the Web Beans services.
</p>

<p class="wikiPara">
This was certainly the right thing to do, and the Web Beans specification is now more powerful and less intrusive. It still promises a more uniform programming model, but a side effect of these changes was that the model became even more generally useful, and even less specific to JSF and EJB. This isn't the first time I've seen something like that happen: the EJB 3.0 expert group also produced some technology (JPA, EE 5 dependency injection) that ended up being applied more generally than was originally envisaged.
</p>

<h2 class="wikiHeadline2" id="H-IsWebBeansIClasswikiEmphasisstilliAComponentModel"><a href="/2008/11/09/web-beans-and-the-ee-platform#H-IsWebBeansIClasswikiEmphasisstilliAComponentModel">Is Web Beans <i class="wikiEmphasis">still</i> a component model?</a></h2>

<p class="wikiPara">
Unfortunately, some people are still not satisfied. A number of members of the platform expert group believe that the notion of a <i class="wikiEmphasis">simple Web Bean</i> still specifies a new component model. So what, exactly, is a simple Web Bean, and why do we need them?
</p>

<p class="wikiPara">
A simple Web Bean is nothing new. It's just a Java class. You've already written hundreds or even thousands of simple Web Beans. Every JavaBean is a simple Web Bean. All we're trying to do is allow objects which were not specifically written as EJBs to be injectable and take advantage of the Web Beans services.
</p>

<p class="wikiPara">
A simple Web Bean has the following <q>advantages</q> over an EJB session bean:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> it does not need to be explicitly declared as an EJB using a component-defining annotation or XML</li>
<li class="wikiUnorderedListItem"> its interfaces do not need to be explicitly declared using <tt>@Local</tt> or <tt>@LocalBean</tt>
</li>
<li class="wikiUnorderedListItem"> it can be final, or have final methods</li>
<li class="wikiUnorderedListItem"> it has a more <q>natural</q> lifecycle and concurrency model - the normal lifecycle for a Java class, instead of the <q>enhanced</q> lifecycle/concurrency semantics defined by EJB</li>
<li class="wikiUnorderedListItem"> if it's a stateful object, it does not require a <tt>@Remove</tt> method</li>
<li class="wikiUnorderedListItem"> it can take advantage of constructor injection</li>
</ul>

<p class="wikiPara">
You can use preexisting JavaBeans and many other Java classes as simple Web Beans. As a side effect, simple Web Beans reduce the mental <q>gap</q> for new Java EE users who might be, initially, scared off by the unfamiliar EJB semantics - and the rather painful requirements to explicitly designate business interfaces and add empty <tt>@Remove</tt> methods - and let these new users get started with container-managed objects more easily.
</p>

<p class="wikiPara">
On the other hand, unlike session beans, simple Web Beans, as currently defined:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> don't have method-level transaction demarcation or security</li>
<li class="wikiUnorderedListItem"> can't have timeouts or asynchronous methods</li>
<li class="wikiUnorderedListItem"> can't have remote interfaces or be web service endpoints</li>
<li class="wikiUnorderedListItem"> don't have container-managed concurrency (locks)</li>
<li class="wikiUnorderedListItem"> don't support instance-level passivation or pooling</li>
</ul>

<p class="wikiPara">
Therefore, in my opinion (an opinion shared the current and previous EJB spec leads), simple Web Beans don't compete with EJB as a solution for the transactional tier of the application. In fact, simple Web Beans aren't really anything new - Java EE developers <i class="wikiEmphasis">already</i> use EJBs and JavaBeans side by side. Web Beans just makes their life a little easier.
</p>

<p class="wikiPara">
But some folks disagree. For example, one expert is worried that by providing something called a <q>simple</q> Web Bean, we're encouraging people to use them instead of EJB. The risk is that developers will be guided away from the use of <q>non-simple</q> EJBs. This has become a real sticking point in the EE group, and threatens to derail the whole Web Beans effort.
</p>

<p class="wikiPara">
Of course, we're trying to work through this. One possibility is that we could move the definition of a simple Web Bean to the EJB specification, as a new EJB component type. Another possibility is to simply drop simple Web Beans from the specification, and ask everyone to write all their objects as EJBs. 
</p>

<p class="wikiPara">
Personally, I can't imagine releasing Java EE 6 with a dependency injection solution that doesn't support JavaBeans. <i class="wikiEmphasis">All</i> the other solutions in the space support both JavaBeans and EJB. EE 5 missed this boat - I don't want EE 6 to repeat the mistake. And I think that this is a case where users want to make the decision about when to use EJB. They don't want us to force a decision down their throats.
</p>

<h2 class="wikiHeadline2" id="H-InjectionOfOtherEEResourceTypes"><a href="/2008/11/09/web-beans-and-the-ee-platform#H-InjectionOfOtherEEResourceTypes">Injection of other EE resource types</a></h2>

<p class="wikiPara">
A second issue raised by the EE experts is that the Web Beans specification does not currently define support for injection of all the various Java EE resource types. Specifically, Web Beans does not explicitly define injection of JDBC datasources, connections, web service endpoints, remote EJBs or persistence contexts. Of course, you can still use the existing Java EE 5 <tt>@Resource</tt> and <tt>@PersistenceContext</tt> annotations to inject Java EE resources, but then you'll miss out on the advantages of the more flexible and more typesafe model defined by Web Beans.
</p>

<p class="wikiPara">
Well, the true situation is that injection of EE resources (or anything else at all) <i class="wikiEmphasis">is</i> already supported by Web Beans, assuming that the Java EE container calls an appropriate Web Beans SPI at initialization time. But neither the EE specification nor the Web Beans specification requires it to do so. So this is an issue that should be easy to fix.
</p>

<h2 class="wikiHeadline2" id="H-Pluggability"><a href="/2008/11/09/web-beans-and-the-ee-platform#H-Pluggability">Pluggability</a></h2>

<p class="wikiPara">
We put a fair amount of effort into defining the interaction between the EE container and the Web Bean manager, for the purpose of supporting pluggable Web Bean managers. However, nothing that is currently defined imposes any new requirement upon the EE container. Unfortunately, at this point, there remain a number of open issues in the specification that can only be resolved by either:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> dropping the requirement for pluggability or </li>
<li class="wikiUnorderedListItem"> imposing new requirements upon the EE container. </li>
</ul>

<p class="wikiPara">
(Search for <q>Open issue</q> in the Public Draft if you're interested in knowing exactly what new requirements would be imposed upon the Java EE container.)
</p>

<p class="wikiPara">
Either of these paths is technically feasible, but one of them is a lot more work and involves a lot more coordination between the various expert groups, some of which are already struggling to meet tight deadlines. If Web Beans is required in Java EE 6, it's not clear that pluggability is truly of great value to users. Does anyone <i class="wikiEmphasis">really</i> need to switch out their Web Bean manager?
</p>

<p class="wikiPara">
I'd love to hear from the community whether pluggability is really worth pursuing.
</p>

<h2 class="wikiHeadline2" id="H-PackagesAndNaming"><a href="/2008/11/09/web-beans-and-the-ee-platform#H-PackagesAndNaming">Packages and naming</a></h2>

<p class="wikiPara">
Quite a number of people hate the name <q>Web Beans</q>, which they see as obscuring the generality of the model we've defined. I view the name as more of a catchy brand than a definition of what Web Beans does. Think of Microsoft and <q>.net</q>. I don't mind changing the name, but nobody has yet suggested a great alternative. For one thing, I hate acronyms, and something descriptive like <i class="wikiEmphasis">Java Dependency Injection</i> wouldn't really capture all that Web Beans does.
</p>

<p class="wikiPara">
Independently of this objection, quite a number of people think that it would be better to package our annotations by concern rather than putting them all in the package <tt>javax.webbeans</tt>. For example, the following package layout might make better sense:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> <tt>javax.dependency</tt> - DI-related annotations: binding types, deployment types, <tt>@Initializer</tt>, <tt>@Produces</tt>, etc.</li>
<li class="wikiUnorderedListItem"> <tt>javax.contexts</tt> - scope-related annotations, <tt>Context</tt> interface</li>
<li class="wikiUnorderedListItem"> <tt>javax.interceptor</tt> (which already exists) - interceptor and decorator related annotations</li>
<li class="wikiUnorderedListItem"> <tt>javax.events</tt> - <tt>@Observes</tt>, event bus interfaces</li>
</ul>

<p class="wikiPara">
I see repackaging as a great idea.
</p>

<h2 class="wikiHeadline2" id="H-TheGoodNews"><a href="/2008/11/09/web-beans-and-the-ee-platform#H-TheGoodNews">The good news</a></h2>

<p class="wikiPara">
The good news is that there's very little debate about the actual technical details of the (Guice and Seam inspired) dependency injection model in Web Beans. The feedback I'm getting from spec reviewers is uniformly positive. This gives me a lot of confidence that the more <q>political</q> issues are also solvable.
</p>

<h2 class="wikiHeadline2" id="H-WhatDoIClasswikiEmphasisyouiThink"><a href="/2008/11/09/web-beans-and-the-ee-platform#H-WhatDoIClasswikiEmphasisyouiThink">What do <i class="wikiEmphasis">you</i> think?</a></h2>

<p class="wikiPara">
The issues I've discussed in this post are important to all members of the Java EE community and to the future direction of the Java EE platform. I don't believe that we should be making these decisions <q>behind closed doors</q>, without the involvement of users. Please speak up and let us know what <i class="wikiEmphasis">you</i> want us to do. And please take the time to <a href="http://docs.jboss.org/webbeans/reference/1.0/en-US/pdf/guide.pdf" target="" class="regularLink">learn more about Web Beans</a>.
</p>
</div>

