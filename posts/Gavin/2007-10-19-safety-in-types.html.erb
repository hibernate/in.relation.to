---
title: "Safety In Types"
author: "Gavin King"
blogger_name: "Gavin"
creation_date: "19-10-2007"
original_tags: []
tags: []

relative_url: /2007/10/19/safety-in-types
slug: safety-in-types
lace: http://in.relation.to/2604.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2007/10/19/safety-in-types
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
Kevin Bourrillion, one of the creators of Guice, has written an <a href="http://smallwig.blogspot.com/2007/03/by-way-what-does-extraordinarily.html" target="" class="regularLink">excellent post</a> on the subject of typesafety. 
</p>

<p class="wikiPara">
There's a seachange going on right now in the Java world that is taking Java, in some sense, in /exactly the opposite direction/ that people championing dynamic languages might expect. With language innovations like generics and annotations, we can now express so much more in a typesafe way, and get so many more benefits from static code analysis. 
</p>

<p class="wikiPara">
In pre-JDK5 days, we worked around the lack of support for a declarative mode of expression by embracing XML for all kinds of tasks, and convincing ourselves that this was a good thing: we were supposedly making our system more <q>configurable</q>. But, of course, we've now realized that XML is just code - or rather, that /code is just text/. And we've realized that by making too many things <q>configurable</q>, we merely make our system easier to break, and more difficult to change in meaningful ways. Our obsession with <q>configuration</q> crippled our refactoring tools.
</p>

<p class="wikiPara">
The challenge now is to marry dynamic behavior with this new, typesafe, mode of expression, proving that systems that can be understood through static analysis need not be /too static/; that we need not pay for precision with tight coupling and verbosity. </p>
</div>

