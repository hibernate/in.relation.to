---
title: "Plugin literal formats"
author: "Gavin King"
blogger_name: "Gavin"
creation_date: "24-05-2011"
original_tags: [Ceylon]
tags: [Ceylon,Hibernate ORM]

relative_url: /2011/05/24/plugin-literal-formats
slug: plugin-literal-formats
lace: http://in.relation.to/20267.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2011/05/24/plugin-literal-formats
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
Ceylon is a language for defining structured data as well as regular procedural code. One of the first things you run into when defining data formats is the need for <q>micro-languages</q> - syntactic validation for character strings that represent literal values of some data type. For example:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> email addresses</li>
<li class="wikiUnorderedListItem"> phone numbers</li>
<li class="wikiUnorderedListItem"> dates, times, and durations</li>
<li class="wikiUnorderedListItem"> regular expressions</li>
<li class="wikiUnorderedListItem"> cron expressions</li>
<li class="wikiUnorderedListItem"> URLs and URIs</li>
<li class="wikiUnorderedListItem"> hexadecimal numbers</li>
</ul>

<p class="wikiPara">
For example, we would like to be able to write things like:
</p>

<pre class="wikiPreformatted brush: ceylon">Date date = '25/03/2005';</pre>

<pre class="wikiPreformatted brush: ceylon">Time time = '12:00 AM PST';</pre>

<pre class="wikiPreformatted brush: ceylon">Boolean isEmail = '^\w+@((\w+)\.)+$'.matches(email);</pre>

<pre class="wikiPreformatted brush: ceylon">Cron schedule = '0 0 23 ? * MON-FRI';</pre>

<pre class="wikiPreformatted brush: ceylon">Color color = 'FF3B66';</pre>

<pre class="wikiPreformatted brush: ceylon">Url url = 'http://jboss.org/ceylon';</pre>

<pre class="wikiPreformatted brush: ceylon">mail.to:='gavin@hibernate.org';</pre>

<pre class="wikiPreformatted brush: ceylon">PhoneNumber ph = '+1 (404) 129 3456';</pre>

<pre class="wikiPreformatted brush: ceylon">Duration duration = '1h 30m';</pre>


<p class="wikiPara">
And we want the compiler to be able to perform some kind of syntactic validation on the format of these character strings. Sometimes, this validation might be as simple as a regular expression. But in other cases, more complex syntactic validations are thinkable.
</p>

<p class="wikiPara">
So in Ceylon we've reserved single quoted character strings for this usecase. What we have not yet figured out is how to handle the problem of determining what particular format a single-quoted literal adheres to (what type of literal it represents), and how to validate the literal against that format at compile time. Ceylon doesn't do left-to-right type inference, so we might end up needing to make you specify the type explicitly, for example:
</p>

<pre class="wikiPreformatted brush: ceylon">Date date = Date '25/03/2005';</pre>

<pre class="wikiPreformatted brush: ceylon">Time time = Time '12:00 AM PST';</pre>

<pre class="wikiPreformatted brush: ceylon">Boolean isEmail = Regex '^\w+@((\w+)\.)+$'.matches(email);</pre>

<pre class="wikiPreformatted brush: ceylon">Cron schedule = Cron '0 0 23 ? * MON-FRI';</pre>

<pre class="wikiPreformatted brush: ceylon">Color color = Color 'FF3B66';</pre>

<pre class="wikiPreformatted brush: ceylon">Url url = Url 'http://jboss.org/ceylon';</pre>

<pre class="wikiPreformatted brush: ceylon">mail.to:=Email 'gavin@hibernate.org';</pre>

<pre class="wikiPreformatted brush: ceylon">PhoneNumber ph = PhoneNumber '+1 (404) 129 3456';</pre>

<pre class="wikiPreformatted brush: ceylon">Duration duration = Duration '1h 30m';</pre>


<p class="wikiPara">
I don't think that's ideal, but it's probably the safest thing. As for validation, I can see two possibilities:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> allow the application to supply a plugin validator, a Ceylon object that gets called at compile time, or</li>
<li class="wikiUnorderedListItem"> allow a type to specify its literal format using an annotation (which might specify a regex, or perhaps even some more powerful BNF).</li>
</ul>

<p class="wikiPara">
These days, I'm leaning towards the second option:
</p>

<pre class="wikiPreformatted;brush:ceylon">class Color(format(Bnf '(`0`..`9`|`A`..`F`){6}') Quoted quoted) { ... }</pre>

<p class="wikiPara">
One consequence of the support for quoted literals is that we might end up using backticks to quote single-character literals, for example: <tt>`A`</tt> or <tt>`\n`</tt>.
</p>

<p class="wikiPara">
The truth is, some more thinking and experimentation is needed in this area.
</p>
</div>

