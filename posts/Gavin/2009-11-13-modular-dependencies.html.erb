---
title: "Modular dependencies"
author: "Gavin King"
blogger_name: "Gavin"
creation_date: "13-11-2009"
original_tags: [Contexts and Dependency Injection,Weld]
tags: [CDI,Weld]

relative_url: /2009/11/13/modular-dependencies
slug: modular-dependencies
lace: http://in.relation.to/12947.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2009/11/13/modular-dependencies
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
I've written a <a href="/Bloggers/MakingExternalResourcesConfigurableWithoutLotsOfXML" target="" class="regularLink">couple</a> of <a href="/Bloggers/MakingExternalResourcesConfigurableWithoutLotsOfXMLPart2" target="" class="regularLink">posts</a> about using <tt>@Alternative</tt> to achieve deployment-time polymorphism. What I've never really talked about is its role in CDI modularity.
</p>

<h2 class="wikiHeadline2" id="H-ModularityAndAlternatives"><a href="/2009/11/13/modular-dependencies#H-ModularityAndAlternatives">Modularity and alternatives</a></h2>

<p class="wikiPara">
From our point of view, support for <q>modularity</q> in dependency management means that injection points of the same type, in different modules, can resolve to different beans. For example, suppose I have an interface <tt>Supplier</tt>, with two implementations. Let's say they are beans like <tt>BookSupplier</tt> and <tt>CameraSupplier</tt>, but they could easily be something more exotic. Now, in one module, <tt>bookshop.war</tt>, of my application, I have a <tt>BookShop</tt>:
</p>

<pre class="wikiPreformatted brush:java;">class BookShop {
   @Inject
   BookShop(Supplier supplier) { ... }
   ...
}</pre>


<p class="wikiPara">
In another module, <tt>camerashop.war</tt>, I have a <tt>CameraShop</tt>:
</p>

<pre class="wikiPreformatted brush:java;">class CameraShop {
   @Inject
   CameraShop(Supplier supplier) { ... }
   ...
}</pre>


<p class="wikiPara">
Now, how does the container tell that the <tt>Supplier</tt> in <tt>BookShop</tt> is a <tt>BookSupplier</tt>, but the <tt>Supplier</tt> in <tt>CameraShop</tt> is a <tt>CameraSupplier</tt>?
</p>

<p class="wikiPara">
Well, there's two possibilities:
</p>

<p class="wikiPara">
<u><tt>BookSupplier</tt> and <tt>CameraSupplier</tt> are deployed in different modules</u>
</p>

<p class="wikiPara">
Suppose that <tt>BookSupplier</tt> and <tt>CameraSupplier</tt> are deployed in separate modules, <tt>books.jar</tt> and <tt>cameras.jar</tt> respectively. Then the solution is easy. Just declare that <tt>bookshop.war</tt> depends on <tt>books.jar</tt> and that <tt>camerashop.war</tt> has a dependency to <tt>cameras.jar</tt>, and we're done. That's enough information for CDI to know what to inject where.
</p>

<p class="wikiPara">
So <tt>bookshop.war</tt> would contain the following line in <tt>MANIFEST.MF</tt>:
</p>

<pre class="wikiPreformatted">Class-Path: books.jar</pre>


<p class="wikiPara">
Meanwhile, <tt>camerashop.war</tt> would contain <i class="wikiEmphasis">this</i> line in its <tt>MANIFEST.MF</tt>:
</p>

<pre class="wikiPreformatted">Class-Path: cameras.jar</pre>


<p class="wikiPara">
<u><tt>BookSupplier</tt> and <tt>CameraSupplier</tt> are deployed in the same module</u>
</p>

<p class="wikiPara">
But what if <tt>BookSupplier</tt> and <tt>CameraSupplier</tt> are both deployed in <tt>suppliers.jar</tt>? Well, there's a solution in this case, too. 
</p>

<p class="wikiPara">
First we need to add the <tt>@Alternative</tt> annotation to <tt>BookSupplier</tt> and <tt>CameraSupplier</tt>. <tt>@Alternative</tt> tells CDI not to inject a bean into a module that does not explicitly declare its dependency to the bean.
</p>

<p class="wikiPara">
Next, we need to declare the appropriate alternative in each module. In <tt>bookshop.war</tt>, we specify:
</p>

<pre class="wikiPreformatted brush:xml;">&lt;beans&gt;
   &lt;alternatives&gt;
      &lt;class&gt;org.mydomain.supplier.BookSupplier&lt;/class&gt;
   &lt;/alternatives&gt;
&lt;/beans&gt;</pre>


<p class="wikiPara">
In <tt>camerashop.war</tt>, we specify:
</p>

<pre class="wikiPreformatted brush:xml;">&lt;beans&gt;
   &lt;alternatives&gt;
      &lt;class&gt;org.mydomain.supplier.CameraSupplier&lt;/class&gt;
   &lt;/alternatives&gt;
&lt;/beans&gt;</pre>


<p class="wikiPara">
And now each module has it's own, private, implementation of <tt>Supplier</tt>.
</p>

<p class="wikiPara">
<u>What if <tt>BookShop</tt> and <tt>CameraShop</tt> are deployed in the same module?</u>
</p>

<p class="wikiPara">
I suppose, at this point, you're wondering what happens if the clients, <tt>BookShop</tt> and <tt>CameraShop</tt> are deployed in the same module. Well, in this case we need to look for another solution. CDI doesn't support more granular alternative activation. There are no bean-level or package-level alternatives. (At least not in <i class="wikiEmphasis">this</i> release of CDI.)
</p>

<p class="wikiPara">
Instead we need to add a qualifier, for example:
</p>

<pre class="wikiPreformatted brush:java;">class BookShop {
   @Inject
   BookShop(@Supplies(Book.class) Supplier supplier) { ... }
   ...
}</pre>


<p class="wikiPara">
or, more likely, add a generic type parameter to <tt>Supplier</tt>:
</p>

<pre class="wikiPreformatted brush:java;">class BookShop {
   @Inject
   BookShop(Supplier&lt;Book&gt; supplier) { ... }
   ...
}</pre>


<h2 class="wikiHeadline2" id="H-UnifiedEL"><a href="/2009/11/13/modular-dependencies#H-UnifiedEL">Unified EL</a></h2>

<p class="wikiPara">
The example we've worked with involves Java classes using injection to obtain their dependencies. But what about JSP or JSF pages, which use Unified EL expressions to interact with beans. Well, happily, <i class="wikiEmphasis">exactly</i> the same rules apply during EL name resolution.
</p>

<h2 class="wikiHeadline2" id="H-ModularityBeyondJavaEE"><a href="/2009/11/13/modular-dependencies#H-ModularityBeyondJavaEE">Modularity beyond Java EE</a></h2>

<p class="wikiPara">
I've given examples from the Java EE environment. In this environment, a <q>module</q> is a Java EE module like a war, EJB jar or rar, or a library jar. But what about other module architectures like OSGi or a future Java language-level module system?
</p>

<p class="wikiPara">
Well, the CDI spec is slightly future-proof in this respect. This functionality is defined for an abstract notion of a module in an abstract <q>module architecture</q>. So it's more or less well-defined what a CDI implementation should do in an OSGi architecture, if it wanted to support OSGi.
</p>
</div>

