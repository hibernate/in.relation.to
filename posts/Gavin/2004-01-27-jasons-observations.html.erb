---
title: "Jason's observations"
author: "Gavin King"
blogger_name: "Gavin"
creation_date: "27-01-2004"
original_tags: []
tags: []

relative_url: /2004/01/27/jasons-observations
slug: jasons-observations
lace: http://in.relation.to/1481.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2004/01/27/jasons-observations
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
Jason has <a href="http://freeroller.net/page/jcarreira/20040126#things_i_learned_about_hibernate" target="" class="regularLink">pointed out </a>
some interesting things about the current release of Hibernate.
</p>

<p class="wikiPara">
First, he notes that Hibernate's query cache may not currently be used with SwarmCache. This is due to SwarmCache not being a /replicated/ cache - it uses clustered eviction. Hibernate's query cache may be used with any replicated clustered cache, as long as clocks are synchronized in the cluster. Our documentation should make this requirement clearer. (For most applications, the query cache is not an especially useful feature, so this issue affects only a small number of users.)
</p>

<p class="wikiPara">
Second, he has noticed that Hibernate currently writes to the second-level cache too often. I had not previously been aware of this issue. Hibernate was optimized with local, perhaps disk-backed, cache implementations in mind, where lookups are at least as expensive (in the case of a disk-backed cache, /more/ expensive) than puts. Jason has pointed out that in the case of a clustered cache, this is reversed and puts are much more expensive than lookups. We will provide a switch in a future point release of Hibernate 2.1 to adjust this behavior.
</p>

<p class="wikiPara">
Finally, Jason is unhappy that we are not supporting JDK dynamic proxies and require CGLIB for lazy association fetching. (CGLIB causes problems if the JVM is running with a restrictive security policy.) Well, as I explained to Jason, Hibernate already provides a hook to allow the proxy implementation to be customized using a custom persister. (Dynamic proxy support could be implemented with a very small amount of code.) This evening I actually refactored this stuff slightly and introduced a ProxyFactory interface to make the hook more <q>obvious</q>. 
</p>

<p class="wikiPara">
I'd like to point out that the Hibernate project has many thousands of users and just a handful of active developers. As a result, we must prioritize feature requests by two considerations: first, how many users beg for the feature; second, how <q>strategic</q> a feature is with respect to the future direction of the project. We simply do not implement every requested feature since we have limited resources and are fighting a continual battle against code bloat (bloat is a /very/ serious issue if you are the person maintaining and enhancing the codebase). Hibernate is open source, so users with special requirements can always use a patched version in their application. In addition, we do not usually process feature requests via IM or javablogs.com! The correct process is to submit an enhancement request to JIRA (and let other users comment and vote) or, even better, to start a discussion in the mailing list. We may be an open source project; this does not mean that we are completely unprofessional and disorganized!
</p>
</div>

