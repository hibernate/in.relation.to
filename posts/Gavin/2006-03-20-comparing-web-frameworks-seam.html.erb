---
title: "Comparing web frameworks: Seam"
author: "Gavin King"
blogger_name: "Gavin"
creation_date: "20-03-2006"
original_tags: [Seam,Web Frameworks]
tags: [Seam]

relative_url: /2006/03/20/comparing-web-frameworks-seam
slug: comparing-web-frameworks-seam
lace: http://in.relation.to/1886.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2006/03/20/comparing-web-frameworks-seam
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
Recently, Simon Brown put together a set of 
<a href="http://weblogs.java.net/blog/simongbrown/archive/2005/11/comparing_webap_1.html" target="" class="regularLink">requirements</a> 
for a very simple blogger application that could be used to compare Java web frameworks. I have
my reservations about the actual requirememts he put together (in particular, there is no
form submission!) but since some other 
<a href="http://javageek.org/2006/03/08/comparing_web_frameworks_wicket.html" target="" class="regularLink">framework</a> 
<a href="http://rifers.org/blogs/gbevin/2006/3/16/comparing_web_frameworks_rife" target="" class="regularLink">authors</a>
have bitten, I've gone ahead and ported the example to Seam. I want to put a massive caveat around 
this post: Seam is absolutely not designed for applications like blogs or web forums; these kind of
problems are very easy to solve using something like PHP or Ruby on Rails and there is no really
good reason to use Java for a problem like this (unless Java is all you know). We have a set
of requirements here with /no conversations/ and /no business processes/, so all the sophisticated
state management machinery of Seam is redundant. Nevertheless, frameworks need to make simple things
easy, and you'll see how little Java code we need to write to solve this simple problem using Seam.
</p>

<p class="wikiPara">
To begin, I copied the standard Seam <tt>web.xml</tt>, <tt>faces-config.xml</tt>, <tt>application.xml</tt> and
<tt>build.xml</tt> files from the Seam booking demo, changing names in a couple of places, and removing
all the JSF navigation rules from <tt>faces-config.xml</tt>. None of this stuff is interesting, and
it is always almost identical in every Seam application. I also copied Simon's <tt>screen.css</tt> 
stylesheet.
</p>

<p class="wikiPara">
Simon started out with a domain model with <tt>Blog</tt> and <tt>BlogEntry</tt> classes that in a real 
application would be mapped to the database via Hibernate or EJB3, along with a <tt>BlogService</tt>
class, which implements a static singleton containing some test data. The static variable and
static initializer is an incredibly ugly way to implement a singleton in Seam, so I took the
liberty of rewriting this class as an application-scope Seam component.
</p>

<pre class="wikiPreformatted">
@Name("blog")
@Startup
@Scope(APPLICATION)
public class BlogService 
{

   private Blog blog;

   @Create
   public void initBlog()
   {
      blog = new Blog();
      blog.setName("Webapp framework blog");
      blog.setDescription("Comparison of J2EE web application frameworks");
      blog.setLocale(new Locale("en", "AU"));
      blog.setTimeZone(TimeZone.getTimeZone("PST"));
      blog.addBlogEntry(new BlogEntry(...);
      blog.addBlogEntry(new BlogEntry(...);
      blog.addBlogEntry(new BlogEntry(...);
   }
  
  @Unwrap
  public Blog getBlog()
  {
     return blog;
  }

}
</pre>


<p class="wikiPara">
I left <tt>Blog</tt> and <tt>BlogEntry</tt> the way I found them and just copied them across.
</p>

<p class="wikiPara">
That's all we need to start work on the first page of the web application.
</p>

<p class="wikiPara">
There is some common header information on all pages of the application, so we'll use a facelets
template, <tt>template.xhtml</tt>, to define the common stuff.
</p>

<pre class="wikiPreformatted">
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 
                      "[=&gt;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd]"&gt;
&lt;html xmlns="[=&gt;http://www.w3.org/1999/xhtml]"
      [=&gt;xmlns:ui=]"=&gt;http://java.sun.com/jsf/facelets"
      [=&gt;xmlns:h=]"=&gt;http://java.sun.com/jsf/html"
      [=&gt;xmlns:f=]"=&gt;http://java.sun.com/jsf/core"
      [=&gt;xml:lang=]"en"  
      lang="en"&gt;
      
&lt;f:view&gt;
   &lt;head&gt;
      &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /&gt;
      &lt;title&gt;#{blog.name}&lt;/title&gt;
      &lt;link href="screen.css" rel="stylesheet" type="text/css" /&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;div id="container"&gt;
         &lt;h1&gt;#{blog.name}&lt;/h1&gt;
         &lt;h2&gt;#{blog.description}&lt;/h2&gt;
         &lt;[=&gt;ui:insert] name="content"/&gt;
      &lt;/div&gt;
   &lt;/body&gt;
&lt;/f:view&gt;

&lt;/html&gt;
</pre>


<p class="wikiPara">
Note that this is all plain XML with namespaces, no <q>wierd</q> tags.
</p>

<p class="wikiPara">
The index page, <tt>index.xhtml</tt>, in the example application displays a list of the three 
latest blog entries.
</p>

<pre class="wikiPreformatted">
&lt;!DOCTYPE composition PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 
                             "[=&gt;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd]"&gt;
&lt;[=&gt;ui:composition] xmlns="=&gt;http://www.w3.org/1999/xhtml"
    [=&gt;xmlns:ui=]"=&gt;http://java.sun.com/jsf/facelets"
    [=&gt;xmlns:h=]"=&gt;http://java.sun.com/jsf/html"
    [=&gt;xmlns:f=]"=&gt;http://java.sun.com/jsf/core"
    template="template.xhtml"&gt;

&lt;[=&gt;ui:define] name="content"&gt;
   &lt;h:dataTable value="#{blog.recentBlogEntries}" var="blogEntry" rows="3"&gt;
      &lt;h:column&gt;
         &lt;div class="blogEntry"&gt;
            &lt;h3&gt;#{blogEntry.title}&lt;/h3&gt;
            &lt;div&gt;
               #{blogEntry.excerpt==null ? blogEntry.body : blogEntry.excerpt}
            &lt;/div&gt;
            &lt;p&gt;
               &lt;h:outputLink value="entry.seam" rendered="#{blogEntry.excerpt!=null}"&gt;
                  &lt;f:param name="blogEntryId" value="#{blogEntry.id}"/&gt;
                  Read more
               &lt;/h:outputLink&gt;
            &lt;/p&gt;
            &lt;p&gt;
               Posted on 
               &lt;h:outputText value="#{blogEntry.date}"&gt;
                  &lt;f:convertDateTime timeZone="#{blog.timeZone}" locale="#{blog.locale}" type="both"/&gt;
               &lt;/h:outputText&gt;
            &lt;/p&gt;
         &lt;/div&gt;
      &lt;/h:column&gt;
   &lt;/h:dataTable&gt;
&lt;/[=&gt;ui:define]&gt;

&lt;/[=&gt;ui:composition]&gt;
</pre>


<p class="wikiPara">
This is of course also plain XML.
</p>

<p class="wikiPara">
(Usually I would not need to explicitly define locales in my templates. JSF and Seam use the 
request locale by default. But Simon's requirements say that I have to use the locale of the 
<tt>Blog</tt>.)
</p>

<p class="wikiPara">
Now, if we hit <a href="http://localhost:8080/seam-blog/index.seam" target="" class="regularLink">http://localhost:8080/seam-blog/index.seam</a>, this is the result:
</p>

<p class="wikiPara">
<a href="http://hibernate.org/~gavin/blog_index.png" target="" class="regularLink">http://hibernate.org/~gavin/blog_index.png</a>
</p>

<p class="wikiPara">
Now for the blog entry page (which we get to by clicking <q>Read more</q>). Assuming I've understood 
them correctly, Simon's requirements say that if a nonexistent entry is requested, we are supposed
to send a 404 error and forward to an error page. Now, this is not the most natural thing to do
in JSF or Seam. Usually, JSF applications use <q>pull</q>-style MVC when handling GET requests. 
Normally I would write the entry page to be able to handle the case of a nonexistent entry
(this is easy). But Simon is the boss here, and his requirements call for a <q>push</q>-style
design. We'll use a Seam /page action/.
</p>

<pre class="wikiPreformatted">
@Name("entryAction")
public class EntryAction
{
   @In private Blog blog;
   @In private FacesContext facesContext;
 
   @RequestParameter
   private String blogEntryId;
   
   @Out(scope=EVENT, required=false)
   private BlogEntry blogEntry;

   public void getBlogEntry() throws IOException
   {
      blogEntry = blog.getBlogEntry(blogEntryId);
      if (blogEntry==null)
      {
         HttpServletResponse response = (HttpServletResponse) facesContext.getExternalContext().getResponse();
         response.sendError(HttpServletResponse.SC_NOT_FOUND);
         facesContext.responseComplete();
      }
   }

}
</pre>


<p class="wikiPara">
This action is meant to run before the entry page is rendered. It retrieves the requested 
<tt>BlogEntry</tt> from the singleton instance of <tt>Blog</tt> and outjects it to the event context.
If no <tt>BlogEntry</tt> matches the request parameter, it sends a 404 error.
</p>

<p class="wikiPara">
We need to list the page action in <tt>WEB-INF/pages.xml</tt>.
</p>

<pre class="wikiPreformatted">
&lt;pages&gt;
   &lt;page view-id="/entry.xhtml" action="#{entryAction.getBlogEntry}"/&gt;
&lt;/pages&gt;
</pre>


<p class="wikiPara">
Now we can write the entry page, <tt>entry.xhtml</tt>:
</p>

<pre class="wikiPreformatted">
&lt;!DOCTYPE composition PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 
                             "[=&gt;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd]"&gt;
&lt;[=&gt;ui:composition] xmlns="=&gt;http://www.w3.org/1999/xhtml"
                [=&gt;xmlns:ui=]"=&gt;http://java.sun.com/jsf/facelets"
                [=&gt;xmlns:h=]"=&gt;http://java.sun.com/jsf/html"
                [=&gt;xmlns:f=]"=&gt;http://java.sun.com/jsf/core"
                template="template.xhtml"&gt;

&lt;[=&gt;ui:define] name="content"&gt;
   &lt;div class="blogEntry"&gt;
      &lt;h3&gt;#{blogEntry.title}&lt;/h3&gt;
      &lt;div&gt;#{blogEntry.body}&lt;/div&gt;
      &lt;p&gt;
         Posted on 
         &lt;h:outputText value="#{blogEntry.date}"&gt;
            &lt;f:convertDateTime timezone="#{blog.timeZone}" locale="#{blog.locale}" type="both"/&gt;
         &lt;/h:outputText&gt;
      &lt;/p&gt;
   &lt;/div&gt;
&lt;/[=&gt;ui:define]&gt;

&lt;/[=&gt;ui:composition]&gt;
</pre>


<p class="wikiPara">
Along with the 404 error page, <tt>404.xhtml</tt>:
</p>

<pre class="wikiPreformatted">
&lt;!DOCTYPE composition PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 
                             "[=&gt;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd]"&gt;
&lt;[=&gt;ui:composition] xmlns="=&gt;http://www.w3.org/1999/xhtml"
                [=&gt;xmlns:ui=]"=&gt;http://java.sun.com/jsf/facelets"
                [=&gt;xmlns:h=]"=&gt;http://java.sun.com/jsf/html"
                [=&gt;xmlns:f=]"=&gt;http://java.sun.com/jsf/core"
                template="template.xhtml"&gt;

&lt;[=&gt;ui:define] name="content"&gt;
   &lt;h3&gt;Page not found&lt;/h3&gt;
&lt;/[=&gt;ui:define]&gt;

&lt;/[=&gt;ui:composition]&gt;
</pre>


<p class="wikiPara">
This page needs to be listed in <tt>web.xml</tt>:
</p>

<pre class="wikiPreformatted">
&lt;error-page&gt;
   &lt;error-code&gt;404&lt;/error-code&gt;
   &lt;location&gt;/404.seam&lt;/location&gt;
&lt;/error-page&gt;
</pre>


<p class="wikiPara">
Now if I click the <q>Read more</q> link, I get to the URL 
<a href="http://localhost:8080/seam-blog/entry.seam?blogEntryId=3" target="" class="regularLink">http://localhost:8080/seam-blog/entry.seam?blogEntryId=3</a> 
and see the following:
</p>

<p class="wikiPara">
<a href="http://hibernate.org/~gavin/blog_entry.png" target="" class="regularLink">http://hibernate.org/~gavin/blog_entry.png</a>
</p>

<p class="wikiPara">
If I edit the URL and change the id to 6, I'll get a 404:
</p>

<p class="wikiPara">
<a href="http://hibernate.org/~gavin/blog_404.png" target="" class="regularLink">http://hibernate.org/~gavin/blog_404.png</a>
</p>

<p class="wikiPara">
And so we're done :-)
</p>
</div>

