---
title: "On Religion (why I'm an ignorant C programmer and don't know what an object is)"
author: "Gavin King"
blogger_name: "Gavin"
creation_date: "12-11-2007"
original_tags: []
tags: []

relative_url: /2007/11/12/on-religion-why-im-an-ignorant-c-programmer-and-dont-know-what-an-object-is
slug: on-religion-why-im-an-ignorant-c-programmer-and-dont-know-what-an-object-is
lace: http://in.relation.to/2843.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2007/11/12/on-religion-why-im-an-ignorant-c-programmer-and-dont-know-what-an-object-is
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
Well, <a href="/Bloggers/SilliestPersistencePostEver" target="" class="regularLink">this post</a> really brought out the crazies. Folks told me that I <q>don't know what an object is</q>, called me <q>ignorant</q> twice, quoted Alan Kay at me, and accused me of being a C programmer. :-)
</p>

<p class="wikiPara">
(What is it about the Internet that makes it okay to call someone ignorant just because you happen to disagree with them?)
</p>

<p class="wikiPara">
Best I can tell, what infuriated these (well-informed, intelligent, passionate) people was the following statement:
</p>

<blockquote class="wikiBlockquote">
Objects are stateful, and one of the main purposes of the methods of an object is to export that state (data) to the world.
</blockquote>

<p class="wikiPara">
A typical objection was:
</p>

<blockquote class="wikiBlockquote">
The fundamental tenet of Object Orientation is that the state of an object is not exported out through the public behavioral API.
</blockquote>

<p class="wikiPara">
<i class="wikiEmphasis">The</i> fundamental tenet. Got that? ;-)
</p>

<p class="wikiPara">
Okay, so let's take this idea seriously, and see what kind of impact it would have upon the design of our system. Let's start with <tt>Order</tt>. According to these guys, this is the perfect object:
</p>

<pre class="wikiPreformatted">class Order {
        private Status status;
        private List&lt;OrderLine&gt; orderLines;
        private Customer customer;
}</pre>


<p class="wikiPara">
This class obeys <i class="wikiEmphasis">the fundamental tenet.</i> It exposes no state to its clients. Unfortunately, it's also totally useless for anything except looking at and admiring its pure, beautiful objectyness. If we want to actually <i class="wikiEmphasis">use</i> it for something, we're going to need to be able to add new <tt>OrderLine</tt>s.
</p>

<pre class="wikiPreformatted">class Order {
        ...
        private List&lt;OrderLine&gt; orderLines;
        ...
        void addOrderLine(OrderLine line) {
                orderLines.add(line);
        }
}</pre>


<p class="wikiPara">
Does this violate <i class="wikiEmphasis">the fundamental tenet?</i> I'm not sure. It's not clear to me whether a mutator method <q>exports</q> the state of an object. I would say it does, but we've already established that I don't know what an object is.
</p>

<p class="wikiPara">
Unfortunately, we're not quite done. We can only add new <tt>OrderLine</tt>s if the <tt>Order</tt> is in a certain state. Let's fix this:
</p>

<pre class="wikiPreformatted">class Order {
        private Status status;
        private List&lt;OrderLine&gt; orderLines;
        ...
        void addOrderLine(OrderLine line) {
                if ( status.isSubmitted() ) {
                        throw new IllegalStateException();
                }
                orderLines.add(line);
        }
}</pre>


<p class="wikiPara">
Nice! We obeyed <i class="wikiEmphasis">the fundamental tenet!</i>
</p>

<p class="wikiPara">
But ... when we display an order to our user we really need to know <i class="wikiEmphasis">in advance</i> whether its okay to add new lines. It's not okay to let them find out when the <tt>addOrderLine()</tt> method blows up!
</p>

<pre class="wikiPreformatted">class Order {
        private Status status;
        private List&lt;OrderLine&gt; orderLines;
        ...
        boolean canAddNewOrderLines() {
                return !status.isSubmitted();
        }
}</pre>


<p class="wikiPara">
Oooop! Wrong! <i class="wikiEmphasis">We violated the fundamental tenet!</i> We exposed the state of the object to its clients! What can we do to fix this? Well, we could try to make the object responsible for rendering itself to the user interface:
</p>

<pre class="wikiPreformatted">class Order {
        private Status status;
        private List&lt;OrderLine&gt; orderLines;
        ...
        public void render(Panel panel) {
                ...
                if ( !status.isSubmitted() ) {
                        panel.addButton( .... );
                }
        }
}</pre>


<p class="wikiPara">
But ... doesn't this approach just expose the state of another object (the user interface for <tt>Order</tt>) to the <tt>Order</tt> class? Worse, it creates a dependency from the domain model to the user interface, a deep error in terms of architecture. But this is just the beginning of our problems! We really need to be able display the total price of the order to our users:
</p>

<pre class="wikiPreformatted">class Order {
        ...
        private List&lt;OrderLine&gt; orderLines;
        public Amount getTotal() {
               Amount amount = ZERO;
               for (OrderLine ol: orderLines)
                       amount.add( ol.getAmount() );
               }
               return amount;
        }
}</pre>


<p class="wikiPara">
This method also exposes the state of the object; and so it also violates <i class="wikiEmphasis">the fundamental tenet</i>. 
</p>

<p class="wikiPara">
And, sometimes, the user interface needs to display information about what <tt>Customer</tt> an <tt>Order</tt> belongs to.
</p>

<pre class="wikiPreformatted">class Order {
        ...
        private Customer customer;
        
        public Customer getCustomer() {
                return customer;
        }
}</pre>


<p class="wikiPara">
Clearly, this one of those <q>evil</q> getter methods we've heard about; it exports the internal state of <tt>Order</tt> directly to the world!
</p>

<p class="wikiPara">
So, where do we go from here? How can we design our system so that we obey <i class="wikiEmphasis">the fundamental tenet</i> of Object Orientation? Well, one approach we could take is that we could just accept that this <q>fundamental</q> tenet is not so fundamental after all! Perhaps it is more of a recommendation, a guideline that we take into account along with many other conflicting constraints that apply when we design software. Some of these constraints are general principles of good design. Some are architectural practices. Some are special restrictions of the programming environment we are working in. Some are simply concessions to <i class="wikiEmphasis">practicality!</i>
</p>

<p class="wikiPara">
Another possibility is that we've misunderstood this <q>tenet</q>. Perhaps what it is really saying is not that objects never expose their state, but rather that they expose it in a controlled fashion, via intermediating methods that abstract the internal data structure and control access to it.
</p>

<p class="wikiPara">
Well, it's not for me to say which of these interpretations is the correct one, since, as we've already established, I <q>don't know what an object is</q>. Besides, this is not really what I want to write about today. The topic I really want to talk about is <i class="wikiEmphasis">religion</i>.
</p>

<p class="wikiPara">
The folks who got upset over this issue displayed the classic symptoms of a <i class="wikiEmphasis">religious mindset:</i>
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> Appeal to authority: <q>In the Bible, it says...</q>, <q>Alan Kay writes...</q>, <q>What would Jesus do?</q>
</li>
<li class="wikiUnorderedListItem"> Argument from overly broad principle: <q>The fundamental tenet...</q>, <q>The Golden Rule...</q>
</li>
<li class="wikiUnorderedListItem"> Intolerance of dissenting opinion: <q>Ignorant</q>, <q>Heathen</q>, <q>Infidel</q>
</li>
<li class="wikiUnorderedListItem"> Application of principle, without concern for consequence, and without sufficient understanding of the <i class="wikiEmphasis">justification</i> and <i class="wikiEmphasis">motivation</i> underlying the principle.</li>
</ul>

<p class="wikiPara">
Worst of all, religions set up absurd laws that no adherant of the religion can <i class="wikiEmphasis">possibly</i> obey (<q>do not covet thy neighbours wife</q>, <q>getter methods are evil</q>), and then demand shame of those that breach the rule. On the other hand, the absurd law is taken, by adherants, as a license for denunciation of free-thinkers: those of us who believe it's perfectly okay to check out the bangin' ass on the chick next door, even as we're being faithful to our gorgeous wives and girlfriends. And those of us who think a getter method is a perfectly natural construct, the simplest and most natural solution to many problems. The great thing about denouncing free-thinkers is that the religious person gets to characterize <i class="wikiEmphasis">their own opinions</i> as the Word of God (or Alan Kay).
</p>

<p class="wikiPara">
In general, the religious approach is very unhelpful in the field of technology. It blinds us to innovative new ideas and novel ways of viewing a problem. By contrast, the <i class="wikiEmphasis">inquiring mindset</i> is characterized by:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> A tendency to argue from consequence: <q>If we followed this approach....</q>
</li>
<li class="wikiUnorderedListItem"> Comfort with cost/benefit analysis: <q>On balance, I think the advantages of this approach outweigh the disadvantages....</q>
</li>
<li class="wikiUnorderedListItem"> A willingness to search for the <i class="wikiEmphasis">limits of applicability</i> of general principles.</li>
<li class="wikiUnorderedListItem"> An openness to other paradigms and opposing points of view.</li>
</ul>

<p class="wikiPara">
And so I'm back where I started: 
<a href="http://blog.objectmentor.com/articles/2007/11/02/active-record-vs-objects" target="" class="regularLink">the ObjectMentor article</a>.
Why did I characterize this post as <q>silly</q>? Because it attempted to justify a new, unnecessary, architectural layer, without a single attempt at argument from consequence. Without even asking what the consequences of this horrible architecture would be! The ObjectMentor was in full religious mode, arguing from principle, without concern for practicality. And, as is often the case when we argue from principle alone, the ObjectMentor managed to forget some other principles along the way. More important principles. Principles like:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> Simplicity</li>
<li class="wikiUnorderedListItem"> Don't Repeat Yourself</li>
<li class="wikiUnorderedListItem"> Ya Ain't Gunna Need It</li>
</ul>

<p class="wikiPara">
The introduction of an extra layer would violate all these principles. But I suppose religions have <i class="wikiEmphasis">always</i> been big on unnecessary complexity and self-repetition. And religion is something that a person with a curious mind and self-confidence in his (her) own judgment and insight truly Ain't Gunna Need (in technology, or life).
</p>
</div>

