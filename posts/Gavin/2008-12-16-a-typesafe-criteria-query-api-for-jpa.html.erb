---
title: "A typesafe criteria query API for JPA"
author: "Gavin King"
blogger_name: "Gavin"
creation_date: "16-12-2008"
original_tags: [Criteria Queries,Hibernate,JPA,JPA 2]
tags: [Hibernate ORM,JPA]

relative_url: /2008/12/16/a-typesafe-criteria-query-api-for-jpa
slug: a-typesafe-criteria-query-api-for-jpa
lace: http://in.relation.to/10197.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2008/12/16/a-typesafe-criteria-query-api-for-jpa
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
The public draft of the JPA 2.0 specification is <a href="http://jcp.org/en/jsr/detail?id=317" target="" class="regularLink">already out</a> and includes a much-awaited feature: an API that lets you create queries by calling methods of Java objects, instead of by embedding JPA-QL into strings that are parsed by the JPA implementation. You can learn more about the API proposed by the public draft at <a href="http://blogs.sun.com/ldemichiel/entry/java_persistence_2_0_public1" target="" class="regularLink">Linda's blog</a>. 
</p>

<p class="wikiPara">
There's several reasons to prefer the API-based approach:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> It's easier to build queries dynamically, to handle cases where the query structure varies depending upon runtime conditions.</li>
<li class="wikiUnorderedListItem"> Since the query is parsed by the Java compiler, no special tooling is needed in order to get syntactic validation, autocompletion and refactoring support.</li>
</ul>

<p class="wikiPara">
(Note that JPA-QL syntax validation and autocompletion <i class="wikiEmphasis">is</i> available is some IDEs - in JBoss Tools, for example.)
</p>

<p class="wikiPara">
There's two major problems with criteria query APIs in the Java language:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> The queries are more verbose and less readable.</li>
<li class="wikiUnorderedListItem"> Attributes must be specified using string-based names.</li>
</ul>

<p class="wikiPara">
The first problem isn't really solvable without major new language features (usually described as <q>DSL support</q>). The second problem could easily be solved by adding a typesafe literal syntax for methods and fields to Java. This is now a sorely needed feature of the language, it's especially useful in combination with annotations.
</p>

<p class="wikiPara">
There have been some previous efforts to work around the lack of method and field literals. One recent example is <a href="http://code.google.com/p/liquidform/" target="" class="regularLink">LIQUidFORM</a>. Unfortunately that particular approach forces you to represent every persistent attribute as a public getter method, which is not a restriction that is acceptable in the JPA specification.
</p>

<p class="wikiPara">
I've proposed a different approach to the JPA EG. This approach comes in three layers:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> A metamodel API for JPA</li>
<li class="wikiUnorderedListItem"> A query API where types and attributes are specified in terms of metamodel API objects</li>
<li class="wikiUnorderedListItem"> Support for third-party tooling which would generate a typesafe metamodel from the entity classes</li>
</ul>

<p class="wikiPara">
Let's go layer-by layer.
</p>

<h1 class="wikiHeadline1" id="H-TheMetamodel"><a href="/2008/12/16/a-typesafe-criteria-query-api-for-jpa#H-TheMetamodel">The Metamodel</a></h1>

<p class="wikiPara">
The metamodel API is a bit like the Java reflection API, except that it is provided by the JPA persistence provider, is aware of the JPA metadata, and uses generics in a clever way. (Also it uses unchecked exceptions.) 
</p>

<p class="wikiPara">
For example, to obtain an object that represents an entity, we call the <tt>MetaModel</tt> object:
</p>

<pre class="wikiPreformatted">import javax.jpa.metamodel.Entity;
...
Entity&lt;Order&gt; order = metaModel.entity(Order.class);
Entity&lt;Item&gt; item = metaModel.entity(Item.class);
Entity&lt;Product&gt; item = metaModel.entity(Product.class);</pre>


<p class="wikiPara">
To obtain attributes of the entity, we need to use string-based names, as usual:
</p>

<pre class="wikiPreformatted">import javax.jpa.metamodel.Attribute;
import javax.jpa.metamodel.Set;
...
Set&lt;Order, Item&gt; orderItems = order.set("items", Item.class);
Attribute&lt;Item, Integer&gt; itemQuantity = item.att("quantity", Integer.class);
Attribute&lt;Item, Product&gt; itemProduct = item.att("product", Product.class);
Attribute&lt;Product, BigDecimal&gt; productPrice = product.att("price", BigDecimal.class)</pre>


<p class="wikiPara">
Notice how the metamodel types which represent attributes are parameterized not only by the type of the attribute they represent, but also by the type that they belong to.
</p>

<p class="wikiPara">
Also notice that this code is non-typesafe and can fail at runtime if no persistent attribute with the given type and name exists in the entity class. This is the only non-typesafe code we'll see - our goal is keep the rest of the API completely typesafe. How does that help us? Well, the trick here is to notice that the metamodel objects represent completely static information about a persistent classes, state that doesn't change at runtime. So we can:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> obtain and cache these objects at system intialization time, forcing any errors to occur upfront, or even</li>
<li class="wikiUnorderedListItem"> let a tool that has access to our persistent classes generate the code that obtains and caches metamodel objects.</li>
</ul>

<p class="wikiPara">
That's much better than having these errors occur at query execution time, as they do in the previous criteria query proposal.
</p>

<p class="wikiPara">
The metamodel API is generally useful, even independent of the query API. Currently it's very difficult to write generic code that interacts with JPA because JPA metadata may be partitioned between annotations and various XML documents.
</p>

<p class="wikiPara">
But, of course, the most popular use of the metamodel is to build queries.
</p>

<h1 class="wikiHeadline1" id="H-Queries"><a href="/2008/12/16/a-typesafe-criteria-query-api-for-jpa#H-Queries">Queries</a></h1>

<p class="wikiPara">
To construct a query, we pass metamodel objects to the <tt>QueryBuilder</tt> API:
</p>

<pre class="wikiPreformatted">Query query = queryBuilder.create();

Root&lt;Order&gt; orderRoot = query.addRoot(order);
Join&lt;Order, Item&gt; orderItemJoin = orderRoot.join(orderItems);
Join&lt;Item, Product&gt; itemProductJoin = orderItemJoin.join(itemProduct);

Expression&lt;Integer&gt; quantity = orderItemJoin.get(itemQuantity);
Expression&lt;BigDecimal&gt; price = itemProductJoin.get(productPrice);

Expression&lt;Number&gt; itemTotal = queryBuilder.prod(quantity, price);
Expression&lt;Boolean&gt; largeItem = queryBuilder.gt(itemTotal, 100);

query.restrict(largeItem)
     .select(order)
     .distinct(true);</pre>


<p class="wikiPara">
For comparison, here is the same query expressed using the API proposed in the public draft:
</p>

<pre class="wikiPreformatted">Query query = queryBuilder.createQueryDefinition();

DomainObject orderRoot = query.addRoot(Order.class);
DomainObject orderItemJoin = orderRoot.join("items");
DomainObject itemProductJoin = orderItemJoin.join("product");

Expression quantity = orderItemJoin.get("quantity");
Expression price = itemProductJoin.get("price");

Expression itemTotal = quantity.times(price);
Predicate largeItem = queryBuilder.greaterThan(100);

query.where(largeItem);
     .selectDistinct(order);</pre>


<p class="wikiPara">
Of course, this query could be written more compactly in either API, but I'm trying to draw attention to the generic types of the objects that make up the query. The type parameters prevent me from writing something like this:
</p>

<pre class="wikiPreformatted">orderItemJoin.get(productPrice); //compiler error</pre>


<p class="wikiPara">
The use of generics means the compiler can detect when we try to create a path expression by combining a queried entity of one type and an attribute of some other type. The metamodel object <tt>productPrice</tt> has type <tt>Attribute&lt;Product, BigDecimal&gt;</tt> and therefore cannot be passed to the <tt>get()</tt> method of <tt>orderItemJoin</tt>. <tt>get()</tt> only accepts <tt>Attribute&lt;Item, ?&gt;</tt>, since <tt>orderItemJoin</tt> is of type <tt>Join&lt;Order, Item&gt;</tt>.
</p>

<p class="wikiPara">
<tt>Expression</tt>s are also parameterized by the expression type, so the compiler detect mistakes like:
</p>

<pre class="wikiPreformatted">queryBuilder.gt(stringExpression, numericExpression); //error</pre>


<p class="wikiPara">
Indeed, the API has sufficient typesafeness that it's more or less impossible to build an unexecutable query.
</p>

<h1 class="wikiHeadline1" id="H-GeneratingATypesafeMetamodel"><a href="/2008/12/16/a-typesafe-criteria-query-api-for-jpa#H-GeneratingATypesafeMetamodel">Generating a typesafe metamodel</a></h1>

<p class="wikiPara">
It's completely possible to build queries with only the metamodel API and the query API. But to really make the most of these APIs, the final piece of the puzzle is a little code generation tool. This tooling doesn't need to be defined by the JPA specification, and different tools don't need to generate exactly the same code. Nevertheless, the generated code will always be portable between all JPA implementations. All the tool does is reflect upon the persistent entities and create a class or classes that statically cache references to the metamodel <tt>Entity</tt> and <tt>Attribute</tt> objects. 
</p>

<p class="wikiPara">
Why do we need this code generator? Because writing <tt>Attribute&lt;Item, Integer&gt; itemQuantity = item.att("quantity", Integer.class);</tt> by hand is tedious and slightly error prone, and because your refactoring tool probably isn't smart enough to change the string based name when you refactor the name of the attribute of the persistent class. Code generation tools don't make these kind of errors, and they don't mind re-doing their work from scratch each time you ask them to.
</p>

<p class="wikiPara">
In a nutshell: the tool uses the non-typesafe metamodel API to build a typesafe metamodel.
</p>

<p class="wikiPara">
The most exciting possibility is that this code generation tool could be an APT plugin for <tt>javac</tt>. You wouldn't have to run the code generator explicitly, since APT is now fully integrated into the Java compiler. (Or, it could be an IDE plugin.)
</p>

<p class="wikiPara">
But didn't code generation tools go out of fashion recently? Wasn't one of the great features of ORM solutions like Hibernate and JPA that they <i class="wikiEmphasis">didn't</i> rely upon code generation? Well, I'm a great believer in using whatever tool is the right solution to the problem at hand. Code generation has certainly been applied to problems where it wasn't the best solution. On the other hand, I don't see anyone bashing ANTLR or JavaCC for their use of code generation to solve the problem they address. In this case, we're working around a specific problem in the Java type system: the lack of a typesafe metamodel (reflection is one of the worst-designed language features). And code generation is simply the only solution that works. Indeed, for this problem it works well.
</p>

<p class="wikiPara">
Don't worry, the generated code won't be hard to understand ... it might look something like this, for example:
</p>

<pre class="wikiPreformatted">public class persistent {
	static Metamodel metaModel;

	public static Entity&lt;model.Order&gt; order = metaModel.entity(model.Order.class);
	public static class Order {
		public static Attribute&lt;model.Order, Long&gt; id = order.id(Long.class);
		public static Set&lt;model.Order, model.Item&gt; items = order.set("items", model.Item.class);
		public static Attribute&lt;model.Order, Boolean&gt; filled = order.att("filled", Boolean.class);
		public static Attribute&lt;model.Order, Date&gt; date = order.att("date", Date.class);
	}

	public static Entity&lt;model.Item&gt; item = metaModel.entity(model.Item.class);
	public static class Item {
		public static Attribute&lt;model.Item, Long&gt; id = item.id(Long.class);
		public static Attribute&lt;model.Item, model.Product&gt; product = item.att("product", model.Product.class);
		public static Attribute&lt;model.Item, model.Order&gt; order = item.att("order", model.Order.class);
		public static Attribute&lt;model.Item, Integer&gt; quantity = item.att("quantity", Integer.class);
	}

	public static Entity&lt;model.Product&gt; product = metaModel.entity(model.Product.class);
	public static class Product {
		public static Attribute&lt;model.Product, Long&gt; id = product.id(Long.class);
		public static Set&lt;model.Product, model.Item&gt; items = product.set("items", model.Item.class);
		public static Attribute&lt;model.Product, String&gt; description = product.att("description", String.class);
		public static Attribute&lt;model.Product, BigDecimal&gt; price = product.att("price", BigDecimal.class);
	}

}</pre>


<p class="wikiPara">
This class just let's us refer to attributes of the entities easily. For example, we could type <tt>persistent.Order.id</tt> to refer to the <tt>id</tt> attribute of <tt>Order</tt>. Or <tt>persistent.Product.description</tt> to refer to the <tt>description</tt> of the <tt>Product</tt>.</p>
</div>

