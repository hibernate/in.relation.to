---
title: "Metadata driven applications"
author: "Gavin King"
blogger_name: "Gavin"
creation_date: "24-06-2004"
original_tags: []
tags: []

relative_url: /2004/06/24/metadata-driven-applications
slug: metadata-driven-applications
lace: http://in.relation.to/1605.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2004/06/24/metadata-driven-applications
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
Hibernate is great at representing strongly-typed, static object models. Not all applications are like this. <q>Metadata-driven</q> applications define entity type information in the database. Both the object model and the relational model support dynamic addition of new types, and perhaps even redefinition of existing types. Actually, most complex applications contain a mix of both static models and dynamic models.
</p>

<p class="wikiPara">
Suppose that our system allowed supports various types of item, each with specialized attributes. If there were a static, predefined set of item types, we would probably model this using inheritance. But what if new types may be defined dynamically by the user - with the type definitions stored in the database?
</p>

<p class="wikiPara">
We could define an ItemType class representing the definition of an item type. Each ItemType instance would own a collection of ItemTypeAttribute instances, each representing a named attribute that applies to that particular item type. ItemType and ItemTypeAttribute define the /meta-model/.
</p>

<p class="wikiPara">
Item instances would each have a unique ItemType and would own a collection of ItemAttributeValue instances, representing concrete values of the applicable ItemTypeAttributes.
</p>

<p class="wikiPara">
<a href="http://hibernate.sourceforge.net/metadata.gif" target="" class="regularLink">http://hibernate.sourceforge.net/metadata.gif</a>
</p>

<p class="wikiPara">
The mappings for the metamodel classes is quite straightforward. The only really interesting thing is that ItemType and ItemTypeAttribute are perfect examples of classes that should have second-level caching enabled: updates are infrequent, there are relatively few instances, instances are shared between many users and many instances of the Item class.
</p>

<p class="wikiPara">
The mappings for ItemType and ItemTypeAttribute might look like this:
</p>

<pre class="wikiPreformatted">
&lt;class name="ItemType"&gt;
    &lt;cache usage="nonstrict-read-write"/&gt;
    &lt;id name="id"&gt;
        &lt;generator class="native"/&gt;
     &lt;/id&gt;
    &lt;property name="name" 
            not-null="true" 
            length="20"/&gt;
    &lt;property name="description" 
            not-null="true" 
            length="100"/&gt;
    &lt;set name="attributes" 
            lazy="true" 
            inverse="true"&gt;
        &lt;key column="itemType"/&gt;
        &lt;one-to-many class="ItemTypeAttribute"/&gt;
    &lt;/set&gt;
&lt;/class&gt;

&lt;class name="ItemTypeAttribute"&gt;
    &lt;cache usage="nonstrict-read-write"/&gt;
    &lt;id name="id"&gt;
        &lt;generator class="native"/&gt;
    &lt;/id&gt;
    &lt;property name="name" 
             not-null="true" 
             length="20"/&gt;
    &lt;property name="description" 
             not-null="true" 
             length="100"/&gt;
    &lt;property name="type" 
             type="AttributeTypeUserType" 
             not-null="true"/&gt;
    &lt;many-to-one name="itemType" 
             class="ItemType" 
             not-null="true"/&gt;
&lt;/class&gt;
</pre>


<p class="wikiPara">
We do not enable proxies for these classes, since we expect that instances will always be cached. We'll leave the definition of the custom type AttributeTypeUserType to the you!
</p>

<p class="wikiPara">
The mappings for Item and ItemAttributeValue are also straightforward:
</p>

<pre class="wikiPreformatted">
&lt;class name="Item" 
        lazy="true"&gt;
    &lt;id name="id"&gt;
        &lt;generator class="native"/&gt;
    &lt;/id&gt;
    &lt;many-to-one name="type" 
        class="ItemType" 
        not-null="true" 
        outer-join="false"/&gt;
    &lt;set name="attributeValues" 
            lazy="true" 
            inverse="true"&gt;
        &lt;key column="item"/&gt;
        &lt;one-to-many class="Item"/&gt;
    &lt;/set&gt;
&lt;/class&gt;

&lt;class name="ItemAttributeValue" 
        lazy="true"&gt;
    &lt;id name="id"&gt;
        &lt;generator class="native"/&gt;
    &lt;/id&gt;
    &lt;many-to-one name="item" 
        class="Item" 
        not-null="true"/&gt;
    &lt;many-to-one name="type" 
        class="ItemTypeAttribute" 
        not-null="true" 
        outer-join="false"/&gt;
    &lt;property name="value" type="AttributeValueUserType"&gt;
        &lt;column name="intValue"/&gt;
        &lt;column name="floatValue"/&gt;
        &lt;column name="datetimeValue"/&gt;
        &lt;column name="stringValue"/&gt;
    &lt;/property&gt;
&lt;/class&gt;
</pre>


<p class="wikiPara">
Notice that we must explicitly set <tt>outer-join="false"</tt> to prevent Hibernate from outer join fetching the associated objects which we expect to find in the cache.
</p>

<p class="wikiPara">
Finally, we need to define the custom type AttributeValueUserType, that takes the value of an ItemAttributeValue and stores it in the correct database column for it's type.
</p>

<pre class="wikiPreformatted">
public class AttributeValueUserType implements UserType {

    public int[] sqlTypes() {
        return new int[] { Types.BIGINT, Types.DOUBLE, Types.TIMESTAMP, Types.VARCHAR };
    }
    
    public Class returnedClass() { return Object.class; }
    
    public Object nullSafeGet(ResultSet rs, String[] names, Object owner) 
        throws HibernateException, SQLException {
        
        Long intValue = (Long) Hibernate.LONG.nullSafeGet(rs, names[0], owner);
        if (intValue!=null) return intValue;
        
        Double floatValue = (Double) Hibernate.DOUBLE.nullSafeGet(rs, names[1], owner);
        if (floatValue!=null) return floatValue;
        
        Date datetimeValue = (Date) Hibernate.TIMESTAMP.nullSafeGet(rs, names[2], owner);
        if (datetimeValue!=null) return datetimeValue;
        
        String stringValue = (String) Hibernate.STRING.nullSafeGet(rs, names[3], owner);
        return stringValue;
        
    }
    
    public void nullSafeSet(PreparedStatement st, Object value, int index) 
        throws HibernateException, SQLException {
        
        Hibernate.LONG.nullSafeSet( st, (value instanceof Long) ? value : null, index );
        Hibernate.DOUBLE.nullSafeSet( st, (value instanceof Double) ? value : null, index+1 );
        Hibernate.TIMESTAMP.nullSafeSet( st, (value instanceof Date) ? value : null, index+2 );
        Hibernate.STRING.nullSafeSet( st, (value instanceof String) ? value : null, index+3 );
    }
    
    public boolean equals(Object x, Object y) throws HibernateException {
        return x==null ? y==null : x.equals(y);
    }
    
    public Object deepCopy(Object value) throws HibernateException {
        return value;
    }
    
    public boolean isMutable() {
        return false;
    }
    
}
</pre>


<p class="wikiPara">
Thats it!
</p>

<p class="wikiPara">
UPDATE:
I don't know what I was thinking! Of course, we need to be able to query the attributes of our items, so AttributeValueUserType should be a /composite/ custom type!
</p>

<pre class="wikiPreformatted">
public interface CompositeUserType {
    
    public String[] getPropertyNames() {
        return new String[] { "intValue", "floatValue", "stringValue", "datetimeValue" };
    }
    
    public Type[] getPropertyTypes() {
        return new Type[] { Hibernate.LONG, Hibernate.DOUBLE, Hibernate.STRING, Hibernate.TIMESTAMP };
    }
            
    public Object getPropertyValue(Object component, int property) throws HibernateException {
        switch (property) {
            case 0: return (component instanceof Long) ? component : null;
            case 1: return (component instanceof Double) ? component : null;
            case 2: return (component instanceof String) ? component : null;
            case 3: return (component instanceof Date) ? component : null;
        }
        throw new IllegalArgumentException();
    }
    
    public void setPropertyValue(Object component, int property, Object value) throws HibernateException {
        throw new UnsupportedOperationException();
    }
    
    public Class returnedClass() {
        return Object.class;
    }
    
    public boolean equals(Object x, Object y) throws HibernateException {
        return x==null ? y==null : x.equals(y);
    }
    
    public Object nullSafeGet(ResultSet rs, String[] names, SessionImplementor session, Object owner) 
        throws HibernateException, SQLException {
        
        //as above!
    }
    
    public void nullSafeSet(PreparedStatement st, Object value, int index, SessionImplementor session) 
        throws HibernateException, SQLException {
        
        //as above!
    }
    
    public Object deepCopy(Object value) throws HibernateException {
        return value;
    }
    
    public boolean isMutable() {
        return false;
    }
    
    public Serializable disassemble(Object value, SessionImplementor session) throws HibernateException {
        return value;
    }
    
    public Object assemble(Serializable cached, SessionImplementor session, Object owner) throws HibernateException {
        return value;
    }
}
</pre>


<p class="wikiPara">
Now we can write queries like this one:
</p>

<pre class="wikiPreformatted">
from Item i join i.attributeValues value where value.name = 'foo' and value.inValue = 69
</pre>

</div>

