---
title: "Introduction to Ceylon Part 9"
author: "Gavin King"
blogger_name: "Gavin"
creation_date: "02-05-2011"
original_tags: [Ceylon,Introduction to Ceylon]
tags: [Ceylon]

relative_url: /2011/05/02/introduction-to-ceylon-part-9
slug: introduction-to-ceylon-part-9
lace: http://in.relation.to/19732.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2011/05/02/introduction-to-ceylon-part-9
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
<i class="wikiEmphasis">This is the ninth installment in a <a href="/Tutorials/IntroductionToCeylon" target="" class="regularLink">series of articles</a> introducing the Ceylon language. Note that some features of the language may change before the final release.</i>
</p>

<h1 class="wikiHeadline1" id="H-NamedArguments"><a href="/2011/05/02/introduction-to-ceylon-part-9#H-NamedArguments">Named arguments</a></h1>

<p class="wikiPara">
Consider the following method:
</p>

<pre class="wikiPreformatted brush:ceylon">void printf(OutputStream to, String format, Object... values) { ... }</pre>


<p class="wikiPara">
(Remember, the last parameter is a sequenced parameter which accepts multiple arguments, just like a Java <q>varargs</q> parameter.)
</p>

<p class="wikiPara">
We've seen lots of examples of invoking a method or instantiating a class using a familiar C-style syntax where arguments are delimited by in parentheses and separated by commas. Arguments are matched to parameters by their position in the list. Let's see just one more example, just in case:
</p>

<pre class="wikiPreformatted brush:ceylon">printf(process, "Thanks, %s. You have been charged %.2f. Your confirmation number is %d.", 
        user.name, order.total, order.confimationNumber);</pre>


<p class="wikiPara">
This works fine, I suppose. However, Ceylon provides an alternative method invocation protocol that is usually easier to read when there are more than one or two arguments:
</p>

<pre class="wikiPreformatted brush:ceylon">printf { 
    to = process;
    format = "Thanks, %s. You have been charged %.2f. Your confirmation number is %d."; 
    user.name, order.total, order.confimationNumber
};</pre>


<p class="wikiPara">
This invocation protocol is called a named argument list. We can recognize a named argument list by the use of braces as delimiters instead of parentheses. Notice that arguments are separated by semicolons, except for arguments to the sequenced parameter, which are separated by commas. We explicitly specify the name of each parameter, except for the sequenced parameter, whose arguments always appear at the end of the named parameter list. Note that it's also acceptable to call this method like this, passing a sequence to the named <tt>value</tt> parameter:
</p>

<pre class="wikiPreformatted brush:ceylon">printf { 
    to = process;
    format = "Thanks, %s. You have been charged %.2f. Your confirmation number is %d."; 
    values = { user.name, order.total, order.confimationNumber };
};</pre>


<p class="wikiPara">
We usually format named argument invocations across multiple lines.
</p>

<h1 class="wikiHeadline1" id="H-DeclarativeObjectInstantiationSyntax"><a href="/2011/05/02/introduction-to-ceylon-part-9#H-DeclarativeObjectInstantiationSyntax">Declarative object instantiation syntax</a></h1>

<p class="wikiPara">
Named arguments are very commonly used for building graphs of objects. Therefore, Ceylon provides a special abbreviated syntax that simplifies the declaration of an attribute getter, named parameter, or method that builds an object by specifying named arguments to the class initializer.
</p>

<p class="wikiPara">
We're allowed to abbreviate an attribute definition of the following form:
</p>

<pre class="wikiPreformatted brush:ceylon">Payment payment = Payment { 
    method = user.paymentMethod;
    currency = order.currency; 
    amount = order.total;
};</pre>


<p class="wikiPara">
or a named argument specification of this form:
</p>

<pre class="wikiPreformatted brush:ceylon">payment = Payment { 
    method = user.paymentMethod; 
    currency = order.currency; 
    amount = order.total;
};</pre>


<p class="wikiPara">
to the following more declarative (and less redundant) style:
</p>

<pre class="wikiPreformatted brush:ceylon">Payment payment { 
    method = user.paymentMethod; 
    currency = order.currency; 
    amount = order.total;
}</pre>


<p class="wikiPara">
We're even allowed to write a method of the following form:
</p>

<pre class="wikiPreformatted brush:ceylon">Payment createPayment(Order order) { 
    return Payment {
        method = user.paymentMethod; 
        currency = order.currency; 
        amount = order.total;
    };
}</pre>


<p class="wikiPara">
using the following abbreviated syntax:
</p>

<pre class="wikiPreformatted brush:ceylon">Payment createPayment(Order order) { 
    method = user.paymentMethod; 
    currency = order.currency; 
    amount = order.total;
}</pre>


<p class="wikiPara">
Perhaps you're worried that this looks like a method that assigns the values of three attributes of the declaring class, rather than a shortcut syntax for a named argument instantiation of the <tt>Payment</tt> class. And that's a very fair point. To a Java developer, that <i class="wikiEmphasis">is</i> what it looks like. There's two things that should alert you to what's really going on. The above method:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> has no <tt>return</tt> statement, but it's not declared <tt>void</tt>, and</li>
<li class="wikiUnorderedListItem"> contains a list of <tt>=</tt> specification statements instead of <tt>:=</tt> assignment expressions.</li>
</ul>

<p class="wikiPara">
Once you're used to Ceylon's more flexible syntax, these differences will usually stand out immediately.
</p>

<h1 class="wikiHeadline1" id="H-MoreAboutNamedArguments"><a href="/2011/05/02/introduction-to-ceylon-part-9#H-MoreAboutNamedArguments">More about named arguments</a></h1>

<p class="wikiPara">
The following classes define a data structure for building tables:
</p>

<pre class="wikiPreformatted brush:ceylon">class Table(String title, Natural rows, Border border, Column... columns) { ... } 
class Column(String heading, Natural width, String content(Natural row)) { ... } 
class Border(Natural padding, Natural weight) { ... }</pre>


<p class="wikiPara">
Of course, we could built a <tt>Table</tt> using positional argument lists:
</p>

<pre class="wikiPreformatted brush:ceylon">String x(Natural row) { return row.string; }
String xSquared(Natural row) { return (row**2).string; }
Table table = Table("Squares", 5, Border(2,1), Column("x",10, x), Column("x**2",12, xSquared));</pre>


<p class="wikiPara">
However, it's far more common to use named arguments to build a complex graph of objects. In this section we're going to meet some new features of named argument lists, that make it especially convenient to build object graphs.
</p>

<p class="wikiPara">
First, note that the syntax we've already seen for specifying a named argument value looks exactly like the syntax for refining a <tt>formal</tt> attribute. If you think about it, taking into account that a method parameter may accept references to other methods, the whole problem of specifying values for named parameters starts to look a lot like the problem of refining abstract members. Therefore, Ceylon will let us reuse much of the member declaration syntax inside a named argument list. (But note that this has not yet been implemented in the compiler.)
</p>

<p class="wikiPara">
It's legal to include the following constructs in a named argument list:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> method declarations — specify the <q>value</q> of a parameter that accepts a function,</li>
<li class="wikiUnorderedListItem"> <tt>object</tt> (anonymous class) declarations — are most useful for specifying the value of a parameter whose type is an interface or abstract class, and</li>
<li class="wikiUnorderedListItem"> getter declarations — lets us compute the value of an argument inline.</li>
</ul>

<p class="wikiPara">
This helps explain why named argument lists are delimited by braces: the fully general syntax for a named argument list is very, very close to the syntax for a class, method, or attribute body. Notice, again, how flexibility derives from language regularity.
</p>

<p class="wikiPara">
So we could rewrite the code that builds a <tt>Table</tt> as follows:
</p>

<pre class="wikiPreformatted brush:ceylon">Table table = Table { 
    title="Squares";
    rows=5;
    border = Border {
        padding=2;
        weight=1;
    };
    Column {
        heading="x";
        width=10;
        String content(Natural row) {
            return row.string;
        }
    }, 
    Column {
        heading="x**2";
        width=12;
        String content(Natural row) {
            return (row**2).string;
        }
    }
};</pre>


<p class="wikiPara">
Notice that we've specified the value of the parameter named <tt>content</tt> using the usual syntax for declaring a method.
</p>

<p class="wikiPara">
Even better, our example can be abbreviated like this:
</p>

<pre class="wikiPreformatted brush:ceylon">Table table { 
    title="Squares";
    rows=5;
    Border border {
        padding=2;
        weight=1;
    } 
    Column {
        heading="x";
        width=10;
        String content(Natural row) {
            return row.string;
        }
    }, 
    Column {
        heading="x**2"; 
        width=10;
        String content(Natural row) {
            return (row**2).string;
        }
    }
}</pre>


<p class="wikiPara">
Notice how we've transformed our code from a form which emphasized invocation into a form that emphasizes declaration of a hierarchical structure. Semantically, the two forms are equivalent. But in terms of readability, they are very different.
</p>

<p class="wikiPara">
We could put the above totally declarative code in a file by itself and it would look like some kind of <q>mini-language</q> for defining tables. In fact, it's executable Ceylon code that may be validated for syntactic correctness by the Ceylon compiler and then compiled to Java bytecode. Even better, the Ceylon IDE (when it exists) will provide authoring support for our mini-language. In complete contrast to the DSL support in some dynamic languages, any Ceylon DSL is completely typesafe! You can think of the definition of the <tt>Table</tt>, <tt>Column</tt> and <tt>Border</tt> classes as defining the <q>schema</q> or <q>grammar</q> of the mini-language. (In fact, they are really defining the syntax tree for the mini-language.)
</p>

<p class="wikiPara">
Now let's see an example of a named argument list with an inline getter declaration:
</p>

<pre class="wikiPreformatted brush:ceylon">shared class Payment(PaymentMethod method, Currency currency, Float amount) { ... }</pre>


<pre class="wikiPreformatted brush:ceylon">Payment payment { 
    method = user.paymentMethod; 
    currency = order.currency; 
    Float amount {
        variable Float total := 0.0; 
        for (Item item in order.items) {
            total += item.quantity * item.product.unitPrice; 
        }
        return total;
    }
}</pre>


<p class="wikiPara">
Finally, here's an example of a named argument list with an inline <tt>object</tt> declaration:
</p>

<pre class="wikiPreformatted brush:ceylon">shared interface Observable { 
    shared void addObserver(Observer&lt;Bottom&gt; observer) { ... }
}</pre>


<pre class="wikiPreformatted brush:ceylon">shared interface Observer&lt;in Event&gt; { 
    shared formal on(Event event);
}</pre>


<pre class="wikiPreformatted brush:ceylon">observable.addObserver { 
    object observer satisfies Observer&lt;UpdateEvent&gt; {
        shared actual void on(UpdateEvent e) { 
            writeLine("Update:" + e.string);
        }
    }
};</pre>


<p class="wikiPara">
Note that <tt>Observer&lt;T&gt;</tt> is assignable to <tt>Observer&lt;Bottom&gt;</tt> for any type <tt>T</tt>, since <tt>Observer&lt;T&gt;</tt> is contravariant in its type parameter <tt>T</tt>. If this doesn't make sense, please read these <a href="http://in.relation.to/Bloggers/IntroductionToCeylonPart4#H-EmptySequencesAndTheBottomType" target="" class="regularLink">two</a> <a href="http://in.relation.to/Bloggers/IntroductionToCeylonPart6#H-CovarianceAndContravariance" target="" class="regularLink">sections</a> again. ;-)
</p>

<p class="wikiPara">
Of course, as we saw in <a href="http://in.relation.to/Bloggers/IntroductionToCeylonPart8#H-MoreAboutHigherorderFunctions" target="" class="regularLink">Part 8</a>, a better way to solve this problem might be to eliminate the <tt>Observer</tt> interface and pass a method directly:
</p>

<pre class="wikiPreformatted brush:ceylon">shared interface Observable { 
    shared void addObserver&lt;Event&gt;(void on(Event event)) { ... }
}</pre>


<pre class="wikiPreformatted brush:ceylon">observable.addObserver {
    void on(UpdateEvent e) { 
    	writeLine("Update:" + e.string);
    }
};</pre>


<p class="wikiPara">
A quick tangent here: note that we need a type parameter <tt>T</tt> of the method <tt>addObserver()</tt> here only because Ceylon inherits Java's limitation that function types are nonvariant in their parameter types. This is actually pretty unnatural. We should probably eventually come up with a workaround to make function types contravariant in their parameter types, allowing us to write:
</p>

<pre class="wikiPreformatted brush:ceylon">shared interface Observable { 
    shared void addObserver(void on(Bottom event)) { ... }
}</pre>


<h1 class="wikiHeadline1" id="H-DefiningUserInterfaces"><a href="/2011/05/02/introduction-to-ceylon-part-9#H-DefiningUserInterfaces">Defining user interfaces</a></h1>

<p class="wikiPara">
One of the first modules we're going to write for Ceylon will be a library for writing HTML templates in Ceylon. A fragment of static HTML would look something like this:
</p>

<pre class="wikiPreformatted brush:ceylon">Html { 
    Head head {
        title = "Hello World"; 
        cssStyleSheet = 'hello.css';
    } 
    Body body {
        Div { 
            cssClass = "greeting"; 
            "Hello World"
        },
        Div {
            cssClass = "footer"; 
            "Powered by Ceylon"
        }
    }
}</pre>


<p class="wikiPara">
A complete HTML template might look like this:
</p>

<pre class="wikiPreformatted brush:ceylon">import ceylon.html { ... }

doc "A web page that displays a greeting" 
page '/hello.html' 
Html hello(Request request) {
    
    Head head { 
        title = "Hello World"; 
        cssStyleSheet = 'hello.css';
    }
    
    Body body { 
        Div {
            cssClass = "greeting"; 
            Hello( request.parameters["name"] ).greeting
        }, 
        Div {
            cssClass = "footer"; 
            "Powered by Ceylon"
        }
    }

};</pre>



<h1 class="wikiHeadline1" id="H-TheresMore"><a href="/2011/05/02/introduction-to-ceylon-part-9#H-TheresMore">There's more...</a></h1>

<p class="wikiPara">
There's plenty of potential applications of this syntax aside from user interface definition. For example, Ceylon lets us use a named argument list to the specify arguments of a program element annotation. But we'll have to come back to the subject of annotations in a future installment. In <a href="/Bloggers/IntroductionToCeylonPart10" target="" class="regularLink">Part 10</a> we're going to discuss some of the basic types from the language module, in particular numeric types, and introduce the idea of <i class="wikiEmphasis">operator polymorphism</i>.
</p>
</div>

