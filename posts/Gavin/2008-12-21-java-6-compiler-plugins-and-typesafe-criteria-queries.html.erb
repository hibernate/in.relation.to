---
title: "Java 6 compiler plugins and typesafe criteria queries"
author: "Gavin King"
blogger_name: "Gavin"
creation_date: "21-12-2008"
original_tags: [Criteria Queries,Hibernate,JPA,JPA 2]
tags: [Hibernate ORM,JPA]

relative_url: /2008/12/21/java-6-compiler-plugins-and-typesafe-criteria-queries
slug: java-6-compiler-plugins-and-typesafe-criteria-queries
lace: http://in.relation.to/10262.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2008/12/21/java-6-compiler-plugins-and-typesafe-criteria-queries
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
There's been plenty of discussion in the JPA group about my
<a href="/Bloggers/ATypesafeCriteriaQueryAPIForJPA" target="" class="regularLink">typesafe criteria proposal</a>.
My <a href="http://java.sun.com/javase/6/docs/api/javax/annotation/processing/Processor.html" target="" class="regularLink">new favorite feature of the Java language</a>
is <tt>javax.annotation.Processor</tt>. 
Java 6 annotation processors are derived from the APT tool that
existed in JDK 5, but are built into <tt>javac</tt>. Really, the name
<i class="wikiEmphasis">annotation processor</i> is misleading, since this feature is only
incidentally related to annotations. The <tt>Processor</tt> is really a
fairly general purpose compiler plugin. If, like me, you've never been
a fan of code generation, now is the time to reconsider. A Java 6
<tt>Processor</tt> can:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> analyze the compiler's metamodel of the Java source code that is being compiled</li>
<li class="wikiUnorderedListItem"> search the source path for other metadata, such as XML</li>
<li class="wikiUnorderedListItem"> generate new types, which will also be compiled, or other files</li>
</ul>

<p class="wikiPara">
Best of all, this functionality requires no special tool or commandline 
options to <tt>javac</tt>. All you need to do is put the jar containing your
<tt>Processor</tt> in the classpath, and the compiler does the rest!
</p>

<p class="wikiPara">
In the typesafe query API, I want to use this to work around Java's
lack of a typesafe metamodel for fields and methods of a class. The
basic idea is that the compiler plugin will generate a <q>metamodel
type</q> for each persistent class in the application.
</p>

<p class="wikiPara">
Suppose we have the following persistent class:
</p>

<pre class="wikiPreformatted">@Entity
public class Order {
    @Id long id;
	
    boolean filled;
    Date date;

    @OneToMany Set&lt;Item&gt; items;

    @ManyToOne Shop shop;
	
    //getters and setters...
}</pre>


<p class="wikiPara">
Then a class named <tt>Order_</tt> would be generated, with a static member
of each persistent attribute of <tt>Order</tt>, that the application could
use to refer to the attributes in queries.
</p>

<p class="wikiPara">
After several iterations, we've settled on the following format for 
the generated type:
</p>

<pre class="wikiPreformatted">import javax.jpa.metamodel.Attribute;
import javax.jpa.metamodel.Set;
import javax.jpa.metamodel.Metamodel;

@Metamodel
public abstract class Order_ {
    public static Attribute&lt;Order, Long&gt; id;
    public static Attribute&lt;Order, Boolean&gt; filled;
    public static Attribute&lt;Order, Date&gt; date;
    public static Set&lt;Order, Item&gt; items;
    public static Attribute&lt;Order, Shop&gt; shop;
}</pre>


<p class="wikiPara">
The JPA provider would be responsible for initializing the values of
these members when the persistence unit is initialized.
</p>

<p class="wikiPara">
Now, criteria queries would look like the following:
</p>

<pre class="wikiPreformatted">Root&lt;Item&gt; item = q.addRoot(Item.class);
Path&lt;String&gt; shopName = item.get(Item_.order)
                            .get(Order_.shop)
                            .get(Shop_.name);
q.select(item)
 .where( qb.equal(shopName, "amazon.com") );</pre>


<p class="wikiPara">
Which is equivalent to:
</p>

<pre class="wikiPreformatted">select item 
from Item item
where item.shop.name = 'amazon.com'</pre>


<p class="wikiPara">
Or like:
</p>

<pre class="wikiPreformatted">Root&lt;Order&gt; order = q.addRoot(Order.class);
Join&lt;Item, Product&gt; product = order.join(Order_.items)
		                   .join(Item_.product);
		
Path&lt;BigDecimal&gt; price = product.get(Product_.price);
Path&lt;Boolean&gt; filled = order.get(Order_.filled);
Path&lt;Date&gt; date = order.get(Order_.date);
		
q.select(order, product)
 .where( qb.and( qb.gt(price, 100.00), qb.not(filled) ) )
 .order( qb.ascending(price), qb.descending(date) );</pre>


<p class="wikiPara">
 Which is equivalent to:
 
 </p>
<pre class="wikiPreformatted">select order, product 
 from Order order 
    join order.items item
    join item.product product
 where
    product.price &gt; 100 and not order.filled
 order by
    product.price asc, order.date desc</pre>



<p class="wikiPara">
The queries are almost completely typesafe. Because of the generic type parameters of <tt>Attribute</tt>:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> I can't pass an attribute of <tt>Order</tt> to a <tt>Join</tt> or <tt>Path</tt> that represents an <tt>Item</tt>, and</li>
<li class="wikiUnorderedListItem"> I can't try to perform a comparison like <tt>gt()</tt> on a <tt>Path</tt> that represents a <tt>boolean</tt> attribute, or <tt>not()</tt> on a <tt>Path</tt> that represents an attribute of type <tt>Date</tt>.</li>
</ul>

<p class="wikiPara">
There's some skeptics in the expert group, but my feeling is that once
people get used to the idea that type generation is no longer something
that gets in your way during development, we're going to see a lot more
frameworks using this kind of approach. I certainly think this API is
a big improvement over the previous proposal:
</p>

<pre class="wikiPreformatted">Root item = q.addRoot(Item.class);
Path shopName = item.get("order")
                    .get("shop")
                    .get("name");
q.select(item)
 .where( qb.equal(shopName, "amazon.com") );</pre>


<p class="wikiPara">
Or:
</p>

<pre class="wikiPreformatted">Root order = q.addRoot(Order.class);
Join product = order.join("items")
		    .join("product");
		
Path price = product.get("price");
Path filled = order.get("filled");
Path date = order.get("date");
		
q.select(order, product)
 .where( qb.and( qb.gt(price, 100.00), qb.not(filled) ) )
 .order( qb.ascending(price), qb.descending(date) );</pre>


<p class="wikiPara">
Both these queries are riddled with non-typesafe method invocations
which can't be validated without executing the query.
</p>

</div>

