---
title: "Introduction to Ceylon Part 10"
author: "Gavin King"
blogger_name: "Gavin"
creation_date: "05-05-2011"
original_tags: [Ceylon,Introduction to Ceylon]
tags: [Ceylon]

relative_url: /2011/05/05/introduction-to-ceylon-part-10
slug: introduction-to-ceylon-part-10
lace: http://in.relation.to/19901.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2011/05/05/introduction-to-ceylon-part-10
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
<i class="wikiEmphasis">This is the tenth installment in a <a href="/Tutorials/IntroductionToCeylon" target="" class="regularLink">series of articles</a> introducing the Ceylon language. Note that some features of the language may change before the final release.</i>
</p>

<h1 class="wikiHeadline1" id="H-AnOverviewOfTheLanguageModule"><a href="/2011/05/05/introduction-to-ceylon-part-10#H-AnOverviewOfTheLanguageModule">An overview of the language module</a></h1>
<p class="wikiPara">
The module <tt>ceylon.language</tt> contains classes and interfaces that are referred to in the language specification, other declarations they refer to, and a number of related declarations. Let's meet the main characters.
</p>

<p class="wikiPara">
Just like Java, Ceylon has a class named <tt>Object</tt>. 
</p>

<pre class="wikiPreformatted brush:ceylon">shared abstract class Object() 
        extends Void() {
        
    doc "A developer-friendly string representing the instance."
    shared formal String string;
    
    doc "Determine if this object belongs to the given Category
         or is produced by the iterator of the given Iterable
         object."
    shared Boolean element(Category|Iterable&lt;Equality&gt; category) {
        switch (category)
        case (is Category) {
            return category.contains(this);
        }
        case (is Iterable&lt;Equality&gt;) {
            if (is Equality self = this) {
                for (Equality x in category) {
                    if (x==self) {
                        return true;
                    }
                }
                fail {
                    return false;
                }
            }
            else {
                return false;
            }
        }
    }
}</pre>


<p class="wikiPara">
In Ceylon, <tt>Object</tt> isn't the root of the type system. An expression of type <tt>Object</tt> has a definite, well-defined, non-null value. As we've seen, the Ceylon type system can also represent some more exotic types, for example <tt>Nothing</tt>, which is the type of <tt>null</tt>.
</p>

<p class="wikiPara">
Therefore, Ceylon's <tt>Object</tt> has a superclass, named <tt>Void</tt>, which we already met in <a href="http://in.relation.to/Bloggers/IntroductionToCeylonPart1#H-WritingASimpleProgram" target="" class="regularLink">Part 1</a>. All Ceylon types are assignable to <tt>Void</tt>. Expressions of type <tt>Void</tt> aren't useful for very much, since Void has no members or operations. You can't even narrow an expression of type <tt>Void</tt> to a different type. The one useful thing you can do with <tt>Void</tt> is use it to represent the signature of a method when you don't care about the return type, since a method declared <tt>void</tt> is considered to have return type <tt>Void</tt>, as we saw in <a href="http://in.relation.to/Bloggers/IntroductionToCeylonPart8#H-DefiningHigherOrderFunctions" target="" class="regularLink">Part 8</a>. 
</p>

<p class="wikiPara">
As we also saw in <a href="http://in.relation.to/Bloggers/IntroductionToCeylonPart1#H-DealingWithObjectsThatArentThere" target="" class="regularLink">Part 1</a>, the type <tt>Nothing</tt> directly extends <tt>Void</tt>. All types that represent well-defined values extend <tt>Object</tt>, including:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> user-written classes,</li>
<li class="wikiUnorderedListItem"> all interfaces, and</li>
<li class="wikiUnorderedListItem"> the types that are considered primitive in Java, such as <tt>Integer</tt>, <tt>Float</tt> and <tt>Character</tt>.</li>
</ul>

<p class="wikiPara">
Since an expression of type <tt>Object</tt> always evaluates to a definite, well-defined value, it's possible to obtain the runtime type of an <tt>Object</tt>, or narrow an expression of type <tt>Object</tt> to a more specific type.
</p>

<h1 class="wikiHeadline1" id="H-EqualityAndIdentity"><a href="/2011/05/05/introduction-to-ceylon-part-10#H-EqualityAndIdentity">Equality and identity</a></h1>

<p class="wikiPara">
On the other hand, since <tt>Object</tt> is a supertype of types like <tt>Float</tt> which are passed by value at the level of the Java Virtual Machine, you can't use the <tt>===</tt> operator to test the identity of two values of type <tt>Object</tt>. Instead, there is a subclass of <tt>Object</tt>, named <tt>IdentifiableObject</tt>, which represents a type which is always passed by reference. The <tt>===</tt> operator accepts expressions of type <tt>IdentifiableObject</tt>. It's possible for a user-written class to directly extend <tt>Object</tt>, but most of the classes you write will be subclasses of <tt>IdentifiableObject</tt>. All classes with <tt>variable</tt> attributes must extend <tt>IdentifiableObject</tt>.
</p>

<pre class="wikiPreformatted brush:ceylon">shared abstract class IdentifiableObject() 
        extends Object() 
        satisfies Equality {

    shared default actual Boolean equals(Equality that) {
        if (is IdentifiableObject that) {
            return this===that;
        }
        else {
            return false;
        }
    }
    
    shared default actual Integer hash {
        return identityHash(this);
    }
    
    shared default actual String string {
        ...
    }
        
}</pre>


<p class="wikiPara">
<tt>IdentifiableObject</tt> defines a <tt>default</tt> implementation of the interface <tt>Equality</tt>, which is very similar to the <tt>equals()</tt> and <tt>hashCode()</tt> methods defined by <tt>java.lang.Object</tt>. 
</p>

<pre class="wikiPreformatted brush:ceylon">shared interface Equality {
    
    shared formal Boolean equals(Equality that);
    
    shared formal Integer hash;
    
}</pre>


<p class="wikiPara">
Just like in Java, you can refine this default implementation in your own classes. This is the normal way to get a customized behavior for the <tt>==</tt> operator, the only constraint being, that for subtypes of IdentifiableObject, <tt>x===y</tt> should imply <tt>x==y</tt> â€” equality should be consistent with identity.
</p>

<p class="wikiPara">
Occasionally that's not what we want. For example, for numeric types, I don't care whether a value is of class <tt>Natural</tt>, <tt>Integer</tt>, or <tt>Whole</tt> when comparing it to <tt>0</tt>. Fortunately, numeric types extend <tt>Object</tt> directly, and are not subject to the additional constraints defined by <tt>IdentifiableObject</tt>.
</p>

<p class="wikiPara">
Thus, Ceylon is able to capture within the type system much of the behavior that Java introduces by fiat special-case rules in the language definition.
</p>

<h1 class="wikiHeadline1" id="H-OperatorPolymorphism"><a href="/2011/05/05/introduction-to-ceylon-part-10#H-OperatorPolymorphism">Operator polymorphism</a></h1>

<p class="wikiPara">
Ceylon discourages the creation of intriguing executable ASCII art. Therefore, true operator overloading is not supported by the language. Instead, almost every operator (every one except the primitive <tt>.</tt>, <tt>()</tt>, <tt>is</tt>, and <tt>:=</tt> operators) is considered a shortcut way of writing some more complex expression involving other operators and ordinary method calls. For example, the <tt>&lt;</tt> operator is defined in terms of the interface <tt>Comparable&lt;Other&gt;</tt>, which we met in <a href="http://in.relation.to/Bloggers/IntroductionToCeylonPart5#H-TypesafeEnumerations" target="" class="regularLink">Part 5</a>, and which has a method named <tt>smallerThan()</tt>, which is in turn defined in terms of another method named <tt>compare()</tt>.
</p>

<pre class="wikiPreformatted brush:ceylon">x&lt;y</pre>


<p class="wikiPara">
means, by definition,
</p>

<pre class="wikiPreformatted brush:ceylon">x.smallerThan(y)</pre>


<p class="wikiPara">
The equality operator <tt>==</tt> is defined in terms of the interface <tt>Equality</tt>, which has a method named <tt>equals()</tt>.
</p>

<pre class="wikiPreformatted brush:ceylon">x==y</pre>


<p class="wikiPara">
means, by definition,
</p>

<pre class="wikiPreformatted brush:ceylon">x.equals(y)</pre>


<p class="wikiPara">
Therefore, it's easy to customize operators like <tt>&lt;</tt> and <tt>==</tt> with specific behavior for our own classes, just by implementing or refining methods like <tt>compare()</tt> and <tt>equals()</tt>. Thus, we say that operators are <i class="wikiEmphasis">polymorphic</i> in Ceylon.
</p>

<p class="wikiPara">
Apart from <tt>Comparable</tt> and <tt>Equality</tt>, which provide the underlying definition of comparison and equality operators, the
following interfaces are also important in the definition of Ceylon's polymorphic operators:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> <tt>Summable</tt> supports the infix <tt>+</tt> operator,</li>
<li class="wikiUnorderedListItem"> <tt>Invertable</tt> supports the prefix <tt>+</tt> and <tt>-</tt> operators,</li>
<li class="wikiUnorderedListItem"> <tt>Numeric</tt> supports the other basic arithmetic operators,</li>
<li class="wikiUnorderedListItem"> <tt>Slots</tt> supports bitwise operators,</li>
<li class="wikiUnorderedListItem"> <tt>Comparable</tt> supports the comparison operators,</li>
<li class="wikiUnorderedListItem"> <tt>Correspondence</tt> and <tt>Sequence</tt> support indexing and subrange operators, and</li>
<li class="wikiUnorderedListItem"> <tt>Boolean</tt> is the basis of the logical operators.</li>
</ul>

<p class="wikiPara">
Operator polymorphism is a little more flexible than you might imagine. Here's a quick example of this.
</p>

<h1 class="wikiHeadline1" id="H-TheTtSlotsttInterface"><a href="/2011/05/05/introduction-to-ceylon-part-10#H-TheTtSlotsttInterface">The <tt>Slots</tt> interface</a></h1>

<p class="wikiPara">
The interface <tt>Slots</tt> is an abstraction of the idea of a set of slots which may each hold <tt>true</tt> or <tt>false</tt>. The bitwise operators <tt>&amp;</tt>, <tt>|</tt>, and <tt>~</tt> are defined in terms of this interface. The most obvious subtype of <tt>Slots</tt> would be a <tt>Byte</tt> class, where the slots are the eight binary digits.
</p>

<p class="wikiPara">
But the interface <tt>Set</tt> from the collections module also extends <tt>Slots</tt>. The slots of a <tt>Set</tt> are values which may or may not belong to the set. A slot holds <tt>true</tt> if the value it represents belongs to the <tt>Set</tt>. The practical value of this is to allow the use of the operator <tt>|</tt> for set union, the operator <tt>&amp;</tt> for set intersection, and the infix <tt>~</tt> operator for set complement. 
</p>

<pre class="wikiPreformatted brush:ceylon">Set&lt;Person&gt; children = males|females ~ adults;</pre>


<p class="wikiPara">
Yes, I realize that these aren't the traditional symbols representing these operations. But if you think carefully about the definition of these operations, I'm pretty sure you'll agree that these symbols are reasonable.
</p>

<p class="wikiPara">
We could even define a <tt>Permission</tt> class that implements <tt>Slots</tt>, allowing us to write things like <tt>permissions&amp;(read|execute)</tt>.
</p>

<h1 class="wikiHeadline1" id="H-NumericTypes"><a href="/2011/05/05/introduction-to-ceylon-part-10#H-NumericTypes">Numeric types</a></h1>

<p class="wikiPara">
As we've mentioned several times before, Ceylon doesn't have anything like Java's primitive types. The types that represent numeric values are just ordinary classes. Ceylon has fewer built-in numeric types than other C-like languages:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> <tt>Natural</tt> represents the unsigned integers and zero,</li>
<li class="wikiUnorderedListItem"> <tt>Integer</tt> represents signed integers,</li>
<li class="wikiUnorderedListItem"> <tt>Float</tt> represents floating point approximations to the real numbers,</li>
<li class="wikiUnorderedListItem"> <tt>Whole</tt> represents arbitrary-precision signed integers, and</li>
<li class="wikiUnorderedListItem"> <tt>Decimal</tt> represents arbitrary-precision and arbitrary-scale decimals.</li>
</ul>

<p class="wikiPara">
<tt>Natural</tt>, <tt>Integer</tt> and <tt>Float</tt> have 64-bit precision by default. Eventually, you'll be able to specify that a value has 32-bit precision by annotating it <tt>small</tt>. But note that this annotation is really just a hint that the compiler is free to ignore (and it currently does).
</p>

<h1 class="wikiHeadline1" id="H-NumericLiterals"><a href="/2011/05/05/introduction-to-ceylon-part-10#H-NumericLiterals">Numeric literals</a></h1>

<p class="wikiPara">
There are only two kinds of numeric literals: literals for <tt>Natural</tt>s, and literals for <tt>Float</tt>s:
</p>

<pre class="wikiPreformatted brush:ceylon">Natural one = 1;</pre>


<pre class="wikiPreformatted brush:ceylon">Float oneHundredth = 0.01;</pre>


<pre class="wikiPreformatted brush:ceylon">Float oneMillion = 1.0E+6;</pre>


<p class="wikiPara">
The digits of a numeric literal may be grouped using underscores. If the digits are grouped, then groups must contain exactly three digits.
</p>

<pre class="wikiPreformatted brush:ceylon">Natural twoMillionAndOne = 2_000_001;</pre>


<pre class="wikiPreformatted brush:ceylon">Float pi = 3.141_592_654;</pre>


<p class="wikiPara">
A very large or small numeric literals may be qualified by one of the standard SI unit prefixes: <tt>m</tt>, <tt>u</tt>, <tt>n</tt>, <tt>p</tt>, <tt>f</tt>, <tt>k</tt>, <tt>M</tt>, <tt>G</tt>, <tt>T</tt>, <tt>P</tt>.
</p>

<pre class="wikiPreformatted brush:ceylon">Float red = 390.0n; //n (nano) means E-9</pre>


<pre class="wikiPreformatted brush:ceylon">Float galaxyDiameter = 900.0P; //P (peta) means E15</pre>


<pre class="wikiPreformatted brush:ceylon">Float hydrogenRadius = 25.0p; //p (pico) means E-12</pre>


<pre class="wikiPreformatted brush:ceylon">Float usGovDebt = 14.33T; //T (tera) means E12</pre>


<pre class="wikiPreformatted brush:ceylon">Float brainCellSize = 4.0u; //u (micro) means E-6</pre>


<pre class="wikiPreformatted brush:ceylon">Natural deathsUnderCommunism = 94M; //M (mega) means E6</pre>


<h1 class="wikiHeadline1" id="H-NumericWidening"><a href="/2011/05/05/introduction-to-ceylon-part-10#H-NumericWidening">Numeric widening</a></h1>

<p class="wikiPara">
I mentioned earlier that Ceylon <a href="http://in.relation.to/Bloggers/IntroductionToCeylonPart3#H-IntroductionComparedToExtensionMethodsAndImplicitTypeConversions" target="" class="regularLink">doesn't have implicit type conversions</a>, not even built-in conversions for numeric types. Assignment does not automatically widen (or narrow) numeric values. Instead, we need to call one of the operations (well, attributes, actually) defined by the interface <tt>Number</tt>.
</p>

<pre class="wikiPreformatted brush:ceylon">Whole zero = 0.whole; //explicitly widen from Natural</pre>


<pre class="wikiPreformatted brush:ceylon">Decimal half = 0.5.decimal; //explicitly widen from Float</pre>


<p class="wikiPara">
Usefully, the unary prefix operators <tt>+</tt> and <tt>-</tt> always widen <tt>Natural</tt> to <tt>Integer</tt>:
</p>

<pre class="wikiPreformatted brush:ceylon">Integer negativeOne = -1;</pre>


<pre class="wikiPreformatted brush:ceylon">Integer three = +3;</pre>


<p class="wikiPara">
You can use all the operators you're used to from other C-style languages with the numeric types. You can also use the <tt>**</tt> operator to raise a number to a power:
</p>

<pre class="wikiPreformatted brush:ceylon">Float diagonal = (length**2.0+width**2.0)**0.5;</pre>


<p class="wikiPara">
Of course, if you want to use the increment <tt>++</tt> operator, decrement <tt>--</tt> operator, or one of the compound assignment operators such as <tt>+=</tt>, you'll have to declare the value <tt>variable</tt>.
</p>

<p class="wikiPara">
Since it's quite noisy to explicitly perform numeric widening in numeric expressions, the numeric operators automatically widen their operands, so we could write the expression above like this:
</p>

<pre class="wikiPreformatted brush:ceylon">Float diagonal = (length**2+width**2)**(1.0/2);</pre>


<p class="wikiPara">
The <q>built-in</q> widening conversions are the following:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> <tt>Natural</tt> to <tt>Integer</tt>, <tt>Float</tt>, <tt>Whole</tt>, or <tt>Decimal</tt>
</li>
<li class="wikiUnorderedListItem"> <tt>Integer</tt> to <tt>Float</tt>, <tt>Whole</tt>, or <tt>Decimal</tt>
</li>
<li class="wikiUnorderedListItem"> <tt>Float</tt> to <tt>Decimal</tt>
</li>
<li class="wikiUnorderedListItem"> <tt>Whole</tt> to <tt>Decimal</tt>
</li>
</ul>

<p class="wikiPara">
But these conversions aren't defined by special-case rules in the language specification.
</p>

<h1 class="wikiHeadline1" id="H-NumericOperatorSemantics"><a href="/2011/05/05/introduction-to-ceylon-part-10#H-NumericOperatorSemantics">Numeric operator semantics</a></h1>

<p class="wikiPara">
Operators in Ceylon are, in principle, just abbreviations for some expression involving a method call. So the numeric types all implement the <tt>Numeric</tt> interface, refining the methods <tt>plus()</tt>, <tt>minus()</tt>, <tt>times()</tt>, <tt>divided()</tt> and <tt>power()</tt>, and the <tt>Invertable</tt> interface, refining <tt>inverse</tt>. The numeric operators are defined in terms of these methods of <tt>Numeric</tt>. The numeric types also implement the interface <tt>Castable</tt>, which enables the widening conversions we just mentioned. 
</p>

<pre class="wikiPreformatted brush:ceylon">shared interface Castable&lt;in Types&gt; {
    shared formal CastValue as&lt;CastValue&gt;()
        given CastValue satisfies Types;
}</pre>


<p class="wikiPara">
The type parameter <tt>Types</tt> uses a special trick. The argument to <tt>Types</tt> should be the <a href="http://in.relation.to/Bloggers/IntroductionToCeylonPart5#H-MoreAboutUnionTypes" target="" class="regularLink">union</a> of all types to which the implementing type is castable. 
</p>

<p class="wikiPara">
For example, simplifying slightly the definitions in the language module:
</p>

<pre class="wikiPreformatted brush:ceylon">shared class Natural(...)
        extends Object()
        satisfies Castable&lt;Natural|Integer|Float|Whole|Decimal&gt; &amp;
                  Numeric&lt;Natural&gt; &amp;
                  Invertable&lt;Integer&gt; {
    ...
}</pre>


<pre class="wikiPreformatted brush:ceylon">shared class Integer(...)
        extends Object()
        satisfies Castable&lt;Integer|Float|Whole|Decimal&gt; &amp;
                  Numeric&lt;Integer&gt; &amp; 
                  Invertable&lt;Integer&gt; {
    ...
}</pre>


<pre class="wikiPreformatted brush:ceylon">shared class Float(...)
        extends Object()
        satisfies Castable&lt;Float|Decimal&gt; &amp;
                  Numeric&lt;Float&gt; &amp; 
                  Invertable&lt;Float&gt; {
    ...
}</pre>


<p class="wikiPara">
These declarations tell us that <tt>Integer</tt> can be widened to <tt>Float</tt>, <tt>Whole</tt>, or <tt>Decimal</tt>, but that <tt>Float</tt> can only be widened to <tt>Decimal</tt>. So we can infer that the expression <tt>-1 * 0.4</tt> is of type <tt>Float</tt>.
</p>

<p class="wikiPara">
Therefore, the definition of a numeric operator like <tt>*</tt> can be represented, completely within the type system, in terms of <tt>Numeric</tt> and <tt>Castable</tt>:
</p>

<pre class="wikiPreformatted brush:ceylon">Result product&lt;Left,Right,Result&gt;(Left x, Right y)
        given Result of Left|Right satisfies Numeric&lt;Result&gt;
        given Left satisfies Castable&lt;Result&gt; &amp; Numeric&lt;Left&gt;
        given Right satisfies Castable&lt;Result&gt; &amp; Numeric&lt;Right&gt; {
    return x.as&lt;Result&gt;().times(y.as&lt;Result&gt;());
}</pre>


<p class="wikiPara">
Don't worry too much about the performance implications of all this â€” in practice, the compiler is permitted to optimize the types <tt>Natural</tt>, <tt>Integer</tt>, and <tt>Float</tt> down to the virtual machine's native numeric types.
</p>

<p class="wikiPara">
The value of all this â€” apart from eliminating special cases in the language definition and type checker â€” is that a library can define its own specialized numeric types, without losing any of the nice language-level syntax support for numeric arithmetic and numeric widening conversions.
</p>

<h1 class="wikiHeadline1" id="H-TheresMore"><a href="/2011/05/05/introduction-to-ceylon-part-10#H-TheresMore">There's more...</a></h1>

<p class="wikiPara">
If you're interested, you can check out a <a href="/Bloggers/CeylonOperators" target="" class="regularLink">complete list of Ceylon's operators along with a discussion of their precedence</a>.
</p>

<p class="wikiPara">
In the <a href="/Bloggers/IntroductionToCeylonPart11" target="" class="regularLink">Part 11</a> we're going to come back to the subject of object initialization, and deal with a subtle problem affecting languages like Java and C#.
</p>
</div>

