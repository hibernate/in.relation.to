---
title: "More XML than code?"
author: "Gavin King"
blogger_name: "Gavin"
creation_date: "19-09-2007"
original_tags: []
tags: []

relative_url: /2007/09/19/more-xml-than-code
slug: more-xml-than-code
lace: http://in.relation.to/2339.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2007/09/19/more-xml-than-code
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
In <a href="http://www.javalobby.org/articles/activeobjects/" target="" class="regularLink">this article</a> on JavaLobby, Daniel Spiewak, the creator of something called <a href="https://activeobjects.dev.java.net/" target="" class="regularLink">ActiveObjects</a> takes some pot shots at Hibernate, and compares Hibernate negatively with Ruby's ActiveRecord and ActiveObjects. Now, I'm always interested to read informed criticism, but in this case, Daniel seems to be comparing these brand new frameworks against Hibernate2, released in 2003, before I joined JBoss. He says:
</p>

<blockquote class="wikiBlockquote">
Think about it, when's the last time you tried to configure a Hibernate project from scratch? You have to write more XML than code!
</blockquote>

<p class="wikiPara">
Er. Last time I or most other users of Hibernate3 tried to configure a Hibernate project, the only XML they needed to write was the <tt>persistence.xml</tt> file, which contains basic database connection settings. If Daniel has discovered some magical means to automatically intuit the database that the user wants to connect to, without the user needing to type in the JDBC URL, I would just love to hear about it ;-)
</p>

<p class="wikiPara">
Daniel goes on to claim:
</p>

<blockquote class="wikiBlockquote">
We have a simple table which has a one-to-many relationship with another table. Each table has a few values and a primary key (id). Now in Hibernate, we would map to this schema using a pair of Java beans and mountains of mapping XML.
</blockquote>

<p class="wikiPara">
Of course, Hibernate Annotations has been around since early 2005 and there is no longer any good reason for people to define mappings in XML. 
</p>

<p class="wikiPara">
So, to solve this non-problem of <q>mountains of XML</q>, Daniel was inspired by Ruby's ActiveRecord. The code example he gives is the following:
</p>

<pre class="wikiPreformatted">class Person &lt; ActiveRecord::Base  
   belongs_to :company  
end</pre>


<pre class="wikiPreformatted">class Company &lt; ActiveRecord::Base  
   has_many :people  
end</pre>


<p class="wikiPara">
At this point, most developers are thinking <q>um, ok, so how the hell am I supposed to know what attributes a <tt>Company</tt> has by looking at my code? And how can my IDE auto-complete them?</q> Of course, the Rails folks have a quick answer to this question <q>Oh, just fire up your database client and look in the database!</q>. Then, assuming that you know ActiveRecord's automagic capitalization and pluralization rules /perfectly/, you will be able to guess the names of the attributes of your own <tt>Company</tt> class, and type them in manually.
</p>

<p class="wikiPara">
Somehow, excitement about the Ruby language has warped their perceptions to such an extent that these people actually believe that this is a /good thing/!
</p>

<p class="wikiPara">
Fortunately, Daniel's product does not implement this absurd approach. In ActiveObjects, you /do/ have to list the attributes of <tt>Company</tt>. In ActiveObjects, our <tt>Company</tt> class looks like this:
</p>

<pre class="wikiPreformatted">public interface Company extends Entity {

   public String getName();  
   public void setName(String name);  
       
   public String getTickerSymbol();  
   public void setTickerSymbol(String tickerSymbol);  
       
   @OneToMany  
   public Person[] getPeople();

}</pre>


<p class="wikiPara">
Oh, except that it's not a class at all :-/ So if I have methods that perform business logic, or validate internal constraints, I have nowhere to write the code! Now, this problem could in theory be solved by using an abstract class instead of an interface, and using a bytecode library like CGLIB to generate the implementation class. Unfortunately Daniel's product does not currently support that, since his implementation uses JDK dynamic proxies.
</p>

<p class="wikiPara">
So, exactly what problem has ActiveObjects solved? Is writing the implementation of <tt>getName()</tt> and <tt>setName()</tt> /really/ reducing your project's productivity? C'mon, my IDE can do it with a single keyboard shortcut! The equivalent code in Hibernate or any other JPA implementation looks like this:
</p>

<pre class="wikiPreformatted">@Entity
public class Company extends Entity {  
   private String name;  
   private String tickerSymbol;
   @OneToMany private Person[] people;

   public void getName() { return name; }  
   public void setName(String name) { this.name = name; }

   public void getTickerSymbol() { return tickerSymbol; }      
   public void setTickerSymbol(String tickerSymbol) { this.tickerSymbol = tickerSymbol; }

   public Person[] getPeople() { return people; }
   public void setPeople(Person[] people) { this.people = people; }

}</pre>


<p class="wikiPara">
(Where <tt>Entity</tt> is some class I wrote that defines the <tt>id</tt> attribute.)
</p>

<p class="wikiPara">
Note that I did not need to write any XML, let alone <q>mountains</q> of the stuff.
</p>

<p class="wikiPara">
I really don't think this code is significantly more complex or difficult to type than the ActiveObjects version (in fact, in a modern IDE, it probably requires /fewer/ keystrokes to produce). Even better, I don't need to use any funny API to instantiate this class. I can just use <tt>new</tt> and be done with it. 
</p>

<p class="wikiPara">
And I think the code is a lot clearer and more explicit than the ActiveRecord version. Object orientation was very much intended for modeling business domain objects like <tt>Company</tt> and <tt>Person</tt>. It seems more than strange that Rails would essentially delegate the business domain model to the database.
</p>

<h3 class="wikiHeadline3" id="H-Update"><a href="/2007/09/19/more-xml-than-code#H-Update">Update:</a></h3>

<p class="wikiPara">
Emmanuel just noticed that on <a href="https://activeobjects.dev.java.net/" target="" class="regularLink">this page</a> it is claimed that:
</p>

<blockquote class="wikiBlockquote">
AO also has the potential to have significantly superior performance to more traditional ORMs such as Hibernate because it is lazy-loaded with a multi-tiered caching system.
</blockquote>

<p class="wikiPara">
Curious. Hibernate has had lazy loading and a multi-layered caching system since 1.x versions. I wonder if Daniel has ever actually /used/ Hibernate?</p>
</div>

