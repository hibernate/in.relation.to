---
title: "Revised Public Draft of JSR-299: Java Contexts and Dependency Injection"
author: "Gavin King"
blogger_name: "Gavin"
creation_date: "23-01-2009"
original_tags: [Contexts and Dependency Injection,Seam News,Web Beans]
tags: [CDI,Seam]

relative_url: /2009/01/23/revised-public-draft-of-jsr-299-java-contexts-and-dependency-injection
slug: revised-public-draft-of-jsr-299-java-contexts-and-dependency-injection
lace: http://in.relation.to/10507.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2009/01/23/revised-public-draft-of-jsr-299-java-contexts-and-dependency-injection
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
A revised public draft of <a href="http://jcp.org/en/jsr/detail?id=299" target="" class="regularLink">JSR-299</a> is <a href="http://jcp.org/aboutJava/communityprocess/pr/jsr299/index.html" target="" class="regularLink">now available</a>. This draft was produced with input from several people from the EE 6 expert group and aims to address a number of criticisms surrounding the relationship between 299 and the rest of the EE platform.
</p>

<h2 class="wikiHeadline2" id="H-TerminologyAndNameChanges"><a href="/2009/01/23/revised-public-draft-of-jsr-299-java-contexts-and-dependency-injection#H-TerminologyAndNameChanges">Terminology and name changes</a></h2>

<p class="wikiPara">
The name of the spec - along with some terminology - has been changed to better reflect the fact that the focus of 299 is the definition of services that apply to all EE component types, rather than the creation of a new component model.
</p>

<p class="wikiPara">
The new name of the specification is <i class="wikiEmphasis">Java Contexts and Dependency Injection</i>. The term <q>web bean</q> is no longer used in the specification.
</p>

<h2 class="wikiHeadline2" id="H-RemovalOfPluggabilityContract"><a href="/2009/01/23/revised-public-draft-of-jsr-299-java-contexts-and-dependency-injection#H-RemovalOfPluggabilityContract">Removal of pluggability contract</a></h2>

<p class="wikiPara">
The concept of an independent <q>web bean manager</q> was removed from the specification. It is now assumed that the functionality defined by 299 is always provided by the Java EE or embeddable EJB Lite container. It is no longer possible to create a pluggable implementation of 299.
</p>

<p class="wikiPara">
This helped resolve a number of problems with the specification and enabled a number of functional improvements.
</p>

<p class="wikiPara">
Note that the <tt>Manager</tt> framework integration SPI still exists and it remains possible to integrate third-party frameworks with Java EE via 299.
</p>

<h2 class="wikiHeadline2" id="H-Repackaging"><a href="/2009/01/23/revised-public-draft-of-jsr-299-java-contexts-and-dependency-injection#H-Repackaging">Repackaging</a></h2>

<p class="wikiPara">
The APIs defined by 299 have been broken down into the following packages:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> Scopes and contexts: <tt>javax.context</tt>
</li>
<li class="wikiUnorderedListItem"> Dependency injection service: <tt>javax.inject</tt>
</li>
<li class="wikiUnorderedListItem"> Framework integration SPI: <tt>javax.inject.manager</tt>
</li>
<li class="wikiUnorderedListItem"> Event notification service: <tt>javax.event</tt>
</li>
</ul>

<p class="wikiPara">
See appendix C for more information.
</p>

<h2 class="wikiHeadline2" id="H-InjectionOfAllJavaEEResourcesTypes"><a href="/2009/01/23/revised-public-draft-of-jsr-299-java-contexts-and-dependency-injection#H-InjectionOfAllJavaEEResourcesTypes">Injection of all Java EE resources types</a></h2>

<p class="wikiPara">
It is now possible to inject Java EE resources, remote EJB references, web service references, persistence contexts and persistence units using typesafe 299-style injection. For example, we can inject a persistence context like this:
</p>

<pre class="wikiPreformatted">@UserDatabase EntityManager entityManager;</pre>

<p class="wikiPara">
    
Where <tt>@UserDatabase</tt> is a binding type.
</p>

<p class="wikiPara">
See section 3.6 of the specification for more information.
</p>

<h2 class="wikiHeadline2" id="H-AsynchronousAndDistributedEventNotifications"><a href="/2009/01/23/revised-public-draft-of-jsr-299-java-contexts-and-dependency-injection#H-AsynchronousAndDistributedEventNotifications">Asynchronous and distributed event notifications</a></h2>

<p class="wikiPara">
Event observers may now receive event notifications asynchronously. See section 7.5.7. 
</p>

<p class="wikiPara">
Event types may now be mapped to JMS topics enabling state synchronization related events to propagate around a cluster or between application tiers. See section 7.8.
</p>

<h2 class="wikiHeadline2" id="H-ClarificationOfMetadataInheritanceRulesAndGenericBeanRealization"><a href="/2009/01/23/revised-public-draft-of-jsr-299-java-contexts-and-dependency-injection#H-ClarificationOfMetadataInheritanceRulesAndGenericBeanRealization">Clarification of metadata inheritance rules and generic bean realization</a></h2>

<p class="wikiPara">
The rules for inheritance of metadata between beans is now well-defined in the brand new chapter 4. In addition, there is now a new notion of a framework-provided generic bean that provides a template for other beans which <i class="wikiEmphasis">realize</i> it in a certain system.
</p>

<p class="wikiPara">
There are therefore two different special patterns of code reuse recognized by 299: <i class="wikiEmphasis">specialization</i> and <i class="wikiEmphasis">realization</i>.
</p>

<p class="wikiPara">
The spec now features by far the most sophisticated annotation and XML based metadata reuse and overriding scheme ever devised. However, the rules, though somewhat complex to explain in specish language, are very usecase driven and should therefore seem quite transparent in practice. 
</p>

<p class="wikiPara">
In future (EE 7?), the metadata facility defined in 299 can be extended to encompass other metadata including EJB and JAX-RS metadata. I'm truly looking forward to the day we can deprecate the existing EJB deployment descriptor format.
</p>

<h2 class="wikiHeadline2" id="H-SupportForActivities"><a href="/2009/01/23/revised-public-draft-of-jsr-299-java-contexts-and-dependency-injection#H-SupportForActivities">Support for activities</a></h2>

<p class="wikiPara">
It's now possible for a third-party framework, especially an orchestration engine, to register beans that apply only within the scope of a certain <q>activity</q>, for example, a workflow task, business process or web interaction. See section 11.6.
</p>

<h2 class="wikiHeadline2" id="H-InjectionPointMetadata"><a href="/2009/01/23/revised-public-draft-of-jsr-299-java-contexts-and-dependency-injection#H-InjectionPointMetadata">Injection point metadata</a></h2>

<p class="wikiPara">
The introduction of the <tt>InjectionPoint</tt> interface enables <a href="/Bloggers/InjectionPointMetadataAPIForWebBeans" target="" class="regularLink">certain special injection cases</a>. See section 5.6 for more information.
</p>

<h2 class="wikiHeadline2" id="H-UnificationOfInterceptionAPIs"><a href="/2009/01/23/revised-public-draft-of-jsr-299-java-contexts-and-dependency-injection#H-UnificationOfInterceptionAPIs">Unification of interception APIs</a></h2>

<p class="wikiPara">
Finally, I'm currently working with Ken Saks, the EJB 3.1 spec lead to produce a single document encapsulating and generalizing the interceptor functionality currently defined by EJB and the extensions that were defined by 299. To reflect this plan, the interceptor/decorator chapter has been moved to appendix A and will eventually be removed from the spec.
</p>

<p class="wikiPara">
We may go through a similar process with the definition of <q>simple bean</q> in 299, but this is something that is still under discussion.
</p>

<h2 class="wikiHeadline2" id="H-Conclusion"><a href="/2009/01/23/revised-public-draft-of-jsr-299-java-contexts-and-dependency-injection#H-Conclusion">Conclusion</a></h2>

<p class="wikiPara">
Muchisimas gracias to everyone involved in the production of this latest draft, and to everyone who was involved in the very difficult and complex negotiations surrounding the future of 299. I know everyone involved has felt frustrated at times, but the end result is a much better spec and a better EE 6 platform.
</p>
</div>

