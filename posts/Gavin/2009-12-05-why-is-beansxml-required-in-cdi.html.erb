---
title: "Why is beans.xml required in CDI?"
author: "Gavin King"
blogger_name: "Gavin"
creation_date: "05-12-2009"
original_tags: [Contexts and Dependency Injection,Weld]
tags: [CDI,Weld]

relative_url: /2009/12/05/why-is-beansxml-required-in-cdi
slug: why-is-beansxml-required-in-cdi
lace: http://in.relation.to/13347.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2009/12/05/why-is-beansxml-required-in-cdi
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
I've seen a couple of folks wondering why CDI requires a <tt>beans.xml</tt> file in every bean archive. If there's no alternatives, interceptors, or decorators to declare, why do you need to have the empty file?
</p>

<p class="wikiPara">
Well, there's two things about CDI that we need to keep in mind:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> CDI does not require <i class="wikiEmphasis">any</i> special declaration for a Java class to be injected - that's right, no  annotation or XML declaration <i class="wikiEmphasis">at all</i>!</li>
<li class="wikiUnorderedListItem"> CDI does not define any special kind of module - CDI beans can be deployed in a library jar, EJB jar, war, rar, or JVM classpath directory.</li>
</ul>

<p class="wikiPara">
The CDI specification calls the process of identifying beans in modules <i class="wikiEmphasis">bean discovery</i>.
</p>

<p class="wikiPara">
So there are potentially a <i class="wikiEmphasis">lot</i> of classes in the classpath which might be beans! We don't want to force the container to scan every one of those classes at startup and build its internal metamodel for each of them. This really could make bean discovery very slow.
</p>

<p class="wikiPara">
But there's another reason we need to give the user some control over which classes are available for injection. We don't want every class in the classpath to potentially match an injection point, including classes that were never intended to be injected into things. This would force the developer to have to use qualifiers much more often to disambiguate injection points.
</p>

<p class="wikiPara">
So we have two choices. We could have the developer:
</p>

<ol class="wikiOrderedList">
<li class="wikiOrderedListItem"> explicitly exclude modules which <i class="wikiEmphasis">do not</i> contain beans, or</li>
<li class="wikiOrderedListItem"> explicitly declare modules which <i class="wikiEmphasis">do</i> contain beans.</li>
</ol>

<p class="wikiPara">
I think it's clear that the second option is a much better way to go. Thus, CDI has the notion of a <i class="wikiEmphasis">bean archive</i>. A bean archive is just a module that has a file named <tt>beans.xml</tt> in the metadata directory. The container looks for beans in bean archives. It ignores other modules.
</p>

<p class="wikiPara">
Now, you might be wondering if we've got the granularity wrong here. Why should <i class="wikiEmphasis">module</i> be the right criteria to use for including/excluding a class. Why not consider:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> a class-level annotation,</li>
<li class="wikiUnorderedListItem"> the package,</li>
<li class="wikiUnorderedListItem"> some type it implements or extends, or</li>
<li class="wikiUnorderedListItem"> some naming convention.</li>
</ul>

<p class="wikiPara">
Well, I think we've got the first option covered. Annotate a bean <tt>@Alternative</tt>, or with an alternative stereotype, and it will be considered <i class="wikiEmphasis">disabled</i> by CDI, as long as you don't explicitly enable it in <tt>beans.xml</tt>. That's not quite the same thing as excluding the class from scanning altogether, but it's close. (One difference is that a portable extension with still get a <tt>ProcessAnnotatedType</tt> event for that class.)
</p>

<p class="wikiPara">
Excluding a package makes sense to me, and a future version of CDI might allow you to declare excluded packages in <tt>beans.xml</tt>.
</p>

<p class="wikiPara">
Excluding a bean by type or naming convention doesn't appeal to me at all. In the world of CDI, we use stereotypes for identifying architectural roles. We don't use marker interfaces or naming conventions. I strongly disapprove of having names affect functionality.
</p>

<p class="wikiPara">
We'll experiment with giving you some finer grained control over bean discovery in Weld. However, my expectation is that the current solution is going to work great for most people.
 </p>
</div>

