---
title: "Union types and covariance, or why we need intersections"
author: "Gavin King"
blogger_name: "Gavin"
creation_date: "07-08-2011"
original_tags: [Ceylon]
tags: [Ceylon,Java EE]

relative_url: /2011/08/07/union-types-and-covariance-or-why-we-need-intersections
slug: union-types-and-covariance-or-why-we-need-intersections
lace: http://in.relation.to/21456.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2011/08/07/union-types-and-covariance-or-why-we-need-intersections
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
A couple of days ago I spotted an interesting hole in Ceylon's type checker. I started out with something like this:
</p>

<pre class="wikiPreformatted brush:ceylon">Sequence&lt;Float&gt;|Sequence&lt;Integer&gt; numbers = .... ;
Sequence&lt;Numbers&gt; numbers2 = numbers;</pre>


<p class="wikiPara">
The <tt>Sequence</tt> interface is <a href="http://in.relation.to/Bloggers/IntroductionToCeylonPart6#H-CovarianceAndContravariance" target="" class="regularLink">covariant</a> in its type parameter. So, since <tt>Float</tt> and <tt>Integer</tt> are both subtypes of <tt>Number</tt>, both <tt>Sequence&lt;Float&gt;</tt> and <tt>Sequence&lt;Integer&gt;</tt> are subtypes of <tt>Sequence&lt;Number&gt;</tt>. Then the compiler correctly reasons that the <a href="http://in.relation.to/Bloggers/IntroductionToCeylonPart5#H-MoreAboutUnionTypes" target="" class="regularLink">union of the two types</a> is also a subtype of <tt>Sequence&lt;Number&gt;</tt>. Fine. Clever compiler.
</p>

<p class="wikiPara">
Now, here's the hole:
</p>

<pre class="wikiPreformatted brush:ceylon">value first = numbers.first; //compiler error: member does not exist
value first2 = numbers2.first; //ok, infers type Number</pre>


<p class="wikiPara">
When it encountered the union type, the member resolution algorithm was looking for a common produced type of the type constructor <tt>Sequence</tt> in the hierarchies of each member of the union type. But since <tt>Sequence&lt;Float&gt;</tt> isn't a subtype of <tt>Sequence&lt;Integer&gt;</tt> and <tt>Sequence&lt;Integer&gt;</tt> isn't a subtype of <tt>Sequence&lt;Float&gt;</tt>, it simply wasn't finding a common supertype. This resulted in the totally counterintuitive (and, in my view, pathological) result that the member resolution algorithm could not assign a type to the member <tt>first</tt> of the type <tt>Sequence&lt;Float&gt;|Sequence&lt;Integer&gt;</tt>, but it <i class="wikiEmphasis">could</i> assign a type after widening to the supertype <tt>Sequence&lt;Number&gt;</tt>. 
</p>

<p class="wikiPara">
Of course, there might be many potential common supertypes of a union type. There's no justification for the member resolution algorithm to pick <tt>Sequence&lt;Number&gt;</tt> in preference to a sequence of any other common supertype of <tt>Float</tt> and <tt>Integer</tt>. We've got an ambiguity.
</p>

<p class="wikiPara">
So I quickly realized that I had an example which was breaking two of the basic principles of Ceylon's type system:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> It is possible to assign a unique type to any expression without <q>cheating</q> and looking at where the expression appears and how it is used.</li>
<li class="wikiUnorderedListItem"> All types used or inferred internally by the compiler are <i class="wikiEmphasis">denoteable</i>. That is, they can all be expressed within the language itself.</li>
</ul>

<p class="wikiPara">
These principles are specific to Ceylon, and other languages with generics and type inference don't follow them. But failing to adhere to them - and especially to the second principle - results in extremely confusing error messages (Java's horrid <q>capture-of</q> type errors, for example). These two principles are a major reason why I say that Ceylon's type system is <q>simpler</q> than some other languages with sophisticated static type systems: when you get a typing error, we promise you that it's an error that humans can understand.
</p>

<p class="wikiPara">
Fortunately I was able to <q>discover</q> a useful relationship between union types and covariance. 
</p>

<blockquote class="wikiBlockquote">
If <tt>T</tt> is covariant in its type parameter, then <tt>T&lt;U&gt;|T&lt;V&gt;</tt> is a subtype of <tt>T&lt;U|V&gt;</tt> for any types <tt>U</tt> and <tt>V</tt>.
</blockquote>

<p class="wikiPara">
But furthermore, <tt>T&lt;U|V&gt;</tt> is also a subtype of <i class="wikiEmphasis">any</i> common supertype of <tt>T&lt;U&gt;</tt> and <tt>T&lt;V&gt;</tt> produced from the type constructor <tt>T</tt>. We've successfully eliminated the ambiguity! 
</p>

<p class="wikiPara">
So I adjusted the member resolution algorithm to make use of this relationship. Now the problematic code compiles correctly, and infers the correct type for <tt>first</tt>:
</p>

<pre class="wikiPreformatted brush:ceylon">value first = numbers.first; //ok: infers type Float|Integer</pre>


<p class="wikiPara">
Well, that's great! Oh, but what about types with contravariant type parameters? What type should be inferred for the parameter of the <tt>consume()</tt> method of <tt>Consumer&lt;Float&gt;|Consumer&lt;Integer&gt;</tt>? Well, I quickly realized that the corresponding relationship for contravariant type parameters is this one:
</p>

<blockquote class="wikiBlockquote">
If <tt>T</tt> is contravariant in its type parameter, then <tt>T&lt;U&gt;|T&lt;V&gt;</tt> is a subtype of <tt>T&lt;U&amp;V&gt;</tt> for any types <tt>U</tt> and <tt>V</tt>.
</blockquote>

<p class="wikiPara">
Where <tt>U&amp;V</tt> is the <i class="wikiEmphasis">intersection</i> of the two types. So the type of the parameter of <tt>consume()</tt> would be <tt>Float&amp;Integer</tt>, which is intuitively correct. (Of course, since it is impossible for any object to be assignable to both <tt>Float</tt> and <tt>Integer</tt>, the compiler could go even further and reduce this type to the <a href="http://in.relation.to/Bloggers/IntroductionToCeylonPart4#H-EmptySequencesAndTheBottomType" target="" class="regularLink">bottom type</a>.) 
</p>

<p class="wikiPara">
But, ooops, Ceylon doesn't yet have first-class intersection types, except as a <q>todo</q> in the language specification. And our second principle states that the compiler isn't allowed to infer <i class="wikiEmphasis">or even think about</i> types which can't be expressed in the language!
</p>

<p class="wikiPara">
Well, really, I was just waiting for the excuse to justify introducing intersection types, and this gave me the ammunition I was waiting for. So yesterday I found a couple of free hours to implement experimental support for intersection types in the typechecker, and, hey, it turned out to be much easier than I expected. It's also a practically useful feature. I've often wanted to write a method which accepts any value which is assignable to two different types, without introducing a new type just to represent the intersection of the types.
</p>

<p class="wikiPara">
I'll leave you with two more interesting relationships, applying to intersection types:
</p>

<blockquote class="wikiBlockquote">
If <tt>T</tt> is covariant in its type parameter, then <tt>T&lt;U&gt;&amp;T&lt;V&gt;</tt> is a supertype of <tt>T&lt;U&amp;V&gt;</tt> for any types <tt>U</tt> and <tt>V</tt>.
</blockquote>

<blockquote class="wikiBlockquote">
If <tt>T</tt> is contravariant in its type parameter, then <tt>T&lt;U&gt;&amp;T&lt;V&gt;</tt> is a supertype of <tt>T&lt;U|V&gt;</tt> for any types <tt>U</tt> and <tt>V</tt>.
</blockquote>

<p class="wikiPara">
Nice symmetries here.
</p>
</div>

