---
title: "Type inference at module boundaries"
author: "Gavin King"
blogger_name: "Gavin"
creation_date: "07-06-2011"
original_tags: [Ceylon]
tags: [Ceylon]

relative_url: /2011/06/07/type-inference-at-module-boundaries
slug: type-inference-at-module-boundaries
lace: http://in.relation.to/20697.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2011/06/07/type-inference-at-module-boundaries
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
Gilad Bracha <a href="http://gbracha.blogspot.com/2011/06/types-are-anti-modular.html" target="" class="regularLink">writes</a>.
</p>

<blockquote class="wikiBlockquote">
Wait: we are blessed, and live in a world where the gods have bestowed upon us such gifts as type inference. What if I donâ€™t have to write my types at all, and have the compiler just figure out what types I need? The problem is that inference only works well within a module (if that). If you rely on inference at module boundaries, your module leaks implementation information. Why? Because if you infer types from your implementation, those types may vary when you modify your implementation. That is why, even in ML, signatures are declared explicitly.
</blockquote>

<p class="wikiPara">
Nicely put. Type inference for a published declaration - one that is visible outside some kind of reusable <i class="wikiEmphasis">unit</i>, be that a module, package, class, whatever - has the potential to leak implementation details to clients, exposing a more specific type than what the code that reuses the unit should really be seeing. For example:
</p>

<pre class="wikiPreformatted brush:ceylon">shared local paymentProcessor(Payment payment) {    //note: "shared local" is not legal in Ceylon
    switch (payment)
    case (is CreditCard) { return creditCardProcessor; }
    case (is Check) { return checkProcessor; }
}</pre>


<p class="wikiPara">
The return type of <tt>paymentProcessor()</tt> should probably be something abstract like <tt>Processor</tt>, to abstract the internals of the module, but in fact what is being hidden by the use of type inference is that it is actually something more concrete, like <tt>CreditCardProcessor|CheckProcessor</tt>.
</p>

<p class="wikiPara">
And if the reusing code <i class="wikiEmphasis">also</i> uses type inference, then you can end up in a crazy situation that the reusing code has a compiled-in dependency to a type that it should not have been seeing, that it never even explicitly mentions in its own source code! For example, in another module, we write:
</p>

<pre class="wikiPreformatted brush:ceylon">local paymentProcessor = paymentProcessor(payment);</pre>


<p class="wikiPara">
Here, <tt>paymentProcessor</tt> also gets the type <tt>CreditCardProcessor|CheckProcessor</tt>.
</p>

<p class="wikiPara">
This is the original reason we went down the path of <a href="http://in.relation.to/Bloggers/IntroductionToCeylonPart5#H-TypeInference" target="" class="regularLink">limiting type inference</a> to non-<tt>shared</tt> declarations in Ceylon. It wasn't until I started implementing the type inference in the type checker that I discovered that this restriction had an extra benefit: that we can do all type inference in a single pass of the code.
</p>
</div>

