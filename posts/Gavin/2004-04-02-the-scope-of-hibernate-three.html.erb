---
title: "The Scope of Hibernate Three"
author: "Gavin King"
blogger_name: "Gavin"
creation_date: "02-04-2004"
original_tags: []
tags: [Java EE]

relative_url: /2004/04/02/the-scope-of-hibernate-three
slug: the-scope-of-hibernate-three
lace: http://in.relation.to/1524.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2004/04/02/the-scope-of-hibernate-three
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
After more than a year of activity, development of the Hibernate2 branch has finally been wound up; Hibernate 2.1.3 will be one of the last releases and represents a rock-solid POJO persistence solution with essentially all the functionality needed by a typical Java application. Any future release of Hibernate 2.1 will contain only bugfixes. The branch that we have been calling  2.2, will actually be released as version 3.
</p>

<p class="wikiPara">
The Hibernate project has previously had quite circumscribed goals - we have limited ourselves to thinking about just the very next release, and just what our users are asking for right now. That approach has finally reached the end of its usefulness. Hibernate3 is concieved in hubris, with the goal of innovating beyond what our users are asking for, or have even thought of. Certainly we will be adding features that go well beyond the functionality of the best commercial ORM solutions such as TopLink. (Some of these features will be most interesting to people working with certain specialized kinds of problems.)
</p>

<p class="wikiPara">
So, in this spirit of hubris, I'll drop my normal policy of not boasting about things we have not yet implemented, and give a sketch of some of the things that are planned for Hibernate3 alpha (as usual, we do not commit to dates for future releases).
</p>


<h2 class="wikiHeadline2" id="H-QVirtualizationq"><a href="/2004/04/02/the-scope-of-hibernate-three#H-QVirtualizationq"><q>Virtualization</q></a></h2>

<p class="wikiPara">
A number of important and interesting problems may be solved by presenting the user with a certain, filtered, subset of the data. For example, a user might want to see data valid at a particular point in time, or may have permissions to view data only in a particular region. Rather than forcing application code to specify this filter criteria in tedious query conditions, Hibernate 3 will allow the (parametrized) filters to be applied at the session level.
</p>

<p class="wikiPara">
(This feature has not yet been implemented, though some of the needed refactorings are currently sitting on my laptop.)
</p>


<h2 class="wikiHeadline2" id="H-MoreMappingFlexibility"><a href="/2004/04/02/the-scope-of-hibernate-three#H-MoreMappingFlexibility">More Mapping Flexibility</a></h2>

<p class="wikiPara">
For the overwhelming majority of cases, Hibernate2 provides all the O/R mapping options you will need. However, there are now a few new features that are powerful, if used judiciously.
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> single-class-to-multiple-table mappings using <tt>&lt;join&gt;</tt>
</li>
</ul>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> table-per-concrete-class-mappings using <tt>&lt;union-subclass&gt;</tt>
</li>
</ul>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> flexible discriminators using SQL formula mappings</li>
</ul>


<p class="wikiPara">
We have long argued favor of extremely fine grained classes, and have viewed multi-table mappings as a huge misfeature (except for the very important special case of table-per-subclass inheritance mappings). Unfortunately, several commercial vendors insist upon trying to spin this misfeature as an actual competitive advantage of their products, causing us regular irritation. So we have provided the <tt>&lt;join&gt;</tt> mapping mainly to shut them up.
</p>

<p class="wikiPara">
Well, I do conceed that there is one great use-case for <tt>&lt;join&gt;</tt>. We can now mix together table-per-hierarchy and table-per-subclass mappings in the same hierarchy. For example:
</p>

<pre class="wikiPreformatted">
&lt;class name="Document" table="DOCUMENTS"&gt;
    &lt;id name="id"&gt;...&lt;/id&gt;
    &lt;discriminator column="TYPE" type="string"/&gt;
    ...
    &lt;subclass name="Book" discriminator-value="BOOK"/&gt;
    &lt;subclass name="Newspaper" discriminator-value="NEWSPAPER"/&gt;
    &lt;subclass name="XML"  discriminator-value="XML"&gt;
        &lt;join table="XML_DOCUMENTS"&gt;
            ....
        &lt;/join&gt;
    &lt;/subclass&gt;
&lt;/class&gt;
</pre>


<p class="wikiPara">
Hibernate's implicit polymorphism is a nice way to achieve most of the functionality of table-per-concrete-class without placing unnatural restrictions upon column types of different tables. It also nicely allows table-per-concrete-class to be mixed with other inheritance mapping strategies in the same hierarchy. Unfortunately, it has two limitations:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> we cannot have a polymorphic collection of the superclass type</li>
</ul>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> queries against the superclass resolve to muktiple SQL queries, which could be slower than using an SQL UNION.</li>
</ul>


<p class="wikiPara">
The new <tt>&lt;union-subclass&gt;</tt> construct provides an explicit way to map classes to a table-per-concrete-class model and is implemented using SQL UNIONs.
</p>

<p class="wikiPara">
If your table-per-class-hierarchy mapping does not feature a nice simple discriminator column, where values map one-to-one to the different classes, formula discriminators are for you. You can now discriminate between subclasses using multiple columns, multiple values of the same column, arbitrary SQL expressions or functions, even subqueries! An example:
</p>

<pre class="wikiPreformatted">
&lt;class name="Document" table="DOCUMENTS"&gt;
    &lt;id name="id"&gt;...&lt;/id&gt;
    &lt;discriminator type="string"
        formula="case when TYPE='MONOGRAPH' then 'BOOK' when type='TABLOID'\
        or type='BROADSHEET' then 'NEWSPAPER' else TYPE end"/&gt;
    &lt;property name="type" column="TYPE"/&gt;
    ....
    &lt;subclass name="Book" discriminator-value="BOOK"/&gt;
    &lt;subclass name="Newspaper" discriminator-value="NEWSPAPER"/&gt;
&lt;/class&gt;
</pre>


<p class="wikiPara">
All of these features have been implemented in the Hibernate3 branch.
</p>

<h2 class="wikiHeadline2" id="H-RepresentationIndependence"><a href="/2004/04/02/the-scope-of-hibernate-three#H-RepresentationIndependence">Representation Independence</a></h2>

<p class="wikiPara">
Hibernate was conceived as a persistence solution for POJO domain models, and that remains the focus. Occasionally, we run into people who would like to represent their persistent entities in some more dynamic way, as a map, essentially. We used to point them to OFBiz Entity Engine. Well, Hibernate3 lets you represent your domain model as trees of HashMaps, or, with a little bit of user-written code, as just about anything. Here are three immediate applications of this new feature:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> reimplement JBoss CMP 2.1 engine on top of Hibernate</li>
</ul>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> reimplement OFBiz EntityEngine using Hibernate</li>
</ul>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> natively persist SDOs</li>
</ul>

<p class="wikiPara">
Indeed, the end goal is to allow the application to switch between whichever representation is appropriate to the task at hand; the same entity might be represented as a typesafe POJO, a Map, or an SDO, all with just a single Hibernate mapping.
</p>

<p class="wikiPara">
This feature has been implemented in the Hibernate3 branch.
</p>


<h2 class="wikiHeadline2" id="H-JDK15Support"><a href="/2004/04/02/the-scope-of-hibernate-three#H-JDK15Support">JDK 1.5 Support</a></h2>

<p class="wikiPara">
JSR 175 annotations are a perfect fit for Hibernate metadata and we will embrace them aggressively. Emmanuel Bernard is working on this.
</p>

<p class="wikiPara">
We will also need to support Java generics, which basically boils down to allowing typesafe collections (which is very trivial).
</p>


<h2 class="wikiHeadline2" id="H-StoredProcedureSupport"><a href="/2004/04/02/the-scope-of-hibernate-three#H-StoredProcedureSupport">Stored Procedure Support</a></h2>

<p class="wikiPara">
We are not enormous fans of using stored procedures for CRUD operations (of course, there are some other use cases where SPs make wonderful sense) but  people working with legacy databases often need Hibernate to call a SP instead of generating its own SQL statement. In Hibernate 2.1, it is possible to achieve this with a custom persister. Hibernate3 will allow arbitrary SQL statements to be specified in the mapping document for create, update and delete. Max Andersen is currently implementing this feature.
</p>


<h2 class="wikiHeadline2" id="H-FullEventDrivenDesign"><a href="/2004/04/02/the-scope-of-hibernate-three#H-FullEventDrivenDesign">Full Event Driven Design</a></h2>

<p class="wikiPara">
In the early days of the project, I applied YAGNI aggressively. Hibernate was occasionally criticized for supposed <q>architectural</q> deficiencies, due to the absence of a clear upfront design. (In my view, this lack of upfront design was not actually an architectural problem - at least by my understanding of the word <q>architecture</q> - but that debate is for another day...) Anyway, it was my firm belief that an elegant and flexible design would eventually grow naturally, and that our scarce attention and development resources were better spent solving actual user-visible problems. I now feel quite vindicated in this decision; Hibernate has flourished, and the design that has emerged is both powerful and reasonably elegant. Take that, YAGNI-skeptics!
</p>

<p class="wikiPara">
There is one final step of this process, that is now in the hands of Steve Ebersole (and already partially implemented). Hibernate3 will feature an event-oriented design, with event objects representing any <q>interesting thing</q> that occurs, and listener classes that implement standard Hibernate behaviours, or customized user-defined behaviors. This user extension capability has applications ranging for auditing to implementing <q>strange</q> cascade semantics. (Our previous attempt to solve these problems - the Interceptor interface - proved to be insufficient.) Importantly, the redesign simplifies the current monolithic SessionImpl class.
</p>


<h2 class="wikiHeadline2" id="H-NewASTdrivenQueryParser"><a href="/2004/04/02/the-scope-of-hibernate-three#H-NewASTdrivenQueryParser">New AST-driven Query Parser</a></h2>

<p class="wikiPara">
Well, actually /two/ final steps. (No-one expected the Spanish inquisition, did they?)
</p>

<p class="wikiPara">
When I wrote the HQL parser, I knew zip about parsers. Hibernate ended up with a wierd-ass handwritten pure-look-behind parser which, to my great and enduring surprise, has actually served us very well and been the source of very few bugs. (YAGNI, once again.) But it is now well past time we had a <q>proper</q> ANTLR-grammar-based AST, and Joshua Davis is currently writing one. This probably won't mean much in the way of user-visible changes, but it should allow us to more easily support other query languages such as EJBQL.
</p>


<h2 class="wikiHeadline2" id="H-DeclarativeSessionManagement"><a href="/2004/04/02/the-scope-of-hibernate-three#H-DeclarativeSessionManagement">Declarative Session Management</a></h2>

<p class="wikiPara">
This is a JBoss-specific feature for now. New users often find session management to be tricky at first. It can take a bit of thought to get your head around the schizophrenic role played by the Hibernate session as both a kind of <q>cache</q>, and a kind of <q>connection</q>. A JDBC Connection is stateless; a Hibernate Session, on the other hand, is a stateful connection! We further confuse the issue by telling people that, actually, the session is really representing a kind of <q>transaction</q>!
</p>

<p class="wikiPara">
Rather than force people to implement their own session handling, messing with threadlocals and exception handling, it would be nice to have some way to specify the session model (session-per-database-transaction, or session-per-application-transaction) declaratively, in the metadata for a session bean. The Spring Framework already provides some support for this kind of approach. Michael Gloegl is working on implementing this functionality using a JBoss Interceptor. It would be wonderful to have this facility in appservers other than JBoss. J2EE needs portable Interceptors for EJBs (they already exist for servlets).
</p>


<p class="wikiPara">
Well, I have some more things on my list, but that will do for now!
</p>
</div>

