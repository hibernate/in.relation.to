---
title: "Trying out Ceylon's Java interop"
author: "Gavin King"
blogger_name: "Gavin"
creation_date: "26-02-2012"
original_tags: [Ceylon]
tags: [Ceylon]

relative_url: /2012/02/26/trying-out-ceylons-java-interop
slug: trying-out-ceylons-java-interop
lace: http://in.relation.to/22954.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2012/02/26/trying-out-ceylons-java-interop
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
Great, I'm finally able to write, compile, and run Ceylon code that uses Java libraries from within Ceylon IDE:
</p>

<pre class="wikiPreformatted brush:ceylon">import java.lang { System { sysprops=properties } }
import java.util { Date }

void greet() {
    value date = Date();
    print("Hello, " sysprops.getProperty("user.name", "world") 
          ", the date is " date.day "/" date.month "/" 1900+date.year ".");
}</pre>


<p class="wikiPara">
This doesn't look like much, perhaps, but it's demonstrating some important features of the interoperability:
</p>

<ol class="wikiOrderedList">
<li class="wikiOrderedListItem"> the ability to map a Java <tt>static</tt> declaration to a toplevel declaration in Ceylon,</li>
<li class="wikiOrderedListItem"> the ability to resolve an invocation to the correct overloaded version,</li>
<li class="wikiOrderedListItem"> the equivalence between Java primitive types and <tt>java.lang.String</tt> and Ceylon types in <tt>ceylon.language</tt>, and</li>
<li class="wikiOrderedListItem"> the automatic mapping of JavaBeans properties to Ceylon attributes.</li>
</ol>

<p class="wikiPara">
Here's a second working example:
</p>

<pre class="wikiPreformatted brush:ceylon">import java.lang { System { sysprops=properties } }
import java.io { File }

void listHomeDir() {
    for (file in File(sysprops.getProperty("user.home")).listFiles()) {
        print(file.canonicalPath);
    }
}</pre>


<p class="wikiPara">
Java interop has been a somewhat tricky problem for us because Ceylon's type system is somewhat different to Java's, and because the design of Ceylon's language module isn't really based on the Java SDK. When running on the Java VM, the language module <i class="wikiEmphasis">does</i> make use of the Java SDK as part of its internal implementation. But when running on a JavaScript VM, it can't, of course. So we have to limit our dependence upon JVM-specific stuff.
</p>

<p class="wikiPara">
We've still got a few things to finish off here. For example, our treatment of arrays and Java <tt>Iterable</tt>s is not completely finished, and some IDE features still aren't working quite right, but I think most of the hard work is already done, ready for release as part of <a href="http://ceylon-lang.org/blog/2012/02/19/mini-status-update/" target="" class="regularLink">Ceylon M2</a>.
</p>

<p class="wikiPara">
Good work guys!</p>
</div>

