---
title: "Introduction to Ceylon Part 1"
author: "Gavin King"
blogger_name: "Gavin"
creation_date: "27-04-2011"
original_tags: [Ceylon,Introduction to Ceylon]
tags: [Ceylon]

relative_url: /2011/04/27/introduction-to-ceylon-part-1
slug: introduction-to-ceylon-part-1
lace: http://in.relation.to/19542.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2011/04/27/introduction-to-ceylon-part-1
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
<i class="wikiEmphasis">This is the first installment in a <a href="/Tutorials/IntroductionToCeylon" target="" class="regularLink">series of articles</a> introducing the Ceylon language. Note that some features of the language may change before the final release.</i>
</p>

<h1 class="wikiHeadline1" id="H-AboutCeylon"><a href="/2011/04/27/introduction-to-ceylon-part-1#H-AboutCeylon">About Ceylon</a></h1>

<p class="wikiPara">
Ceylon is a new programming language, designed to execute on the Java Virtual Machine, currently under development by my team here at Red Hat. We're fans of Java and of the Java ecosystem, of its practical orientation, of its culture of openness, of its developer community, of its roots in the world of business computing, and of its ongoing commitment to portability. However, we recognize that the language and class libraries, designed more than 15 years ago, are no longer the best foundation for a range of today's business computing problems.
</p>

<p class="wikiPara">
Ceylon's design goals include:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> to be easy to learn and understand for Java and C# developers, </li>
<li class="wikiUnorderedListItem"> to eliminate some of Java's verbosity, while retaining its readability, </li>
<li class="wikiUnorderedListItem"> to improve upon Java's typesafety, </li>
<li class="wikiUnorderedListItem"> to provide a <a href="/Bloggers/IntroductionToCeylonPart9" target="" class="regularLink">declarative syntax for expressing hierarchical information</a> like user interface definition, externalized data, and system configuration, thereby eliminating Java's dependence upon XML, </li>
<li class="wikiUnorderedListItem"> to support and encourage a more <q>functional</q> style of programming with immutable objects and <a href="/Bloggers/IntroductionToCeylonPart8" target="" class="regularLink">higher-order functions</a>,</li>
<li class="wikiUnorderedListItem"> to provide great support for <a href="http://in.relation.to/Bloggers/IntroductionToCeylonPart12" target="" class="regularLink">meta-programming</a>, thus making it easier to write frameworks, and </li>
<li class="wikiUnorderedListItem"> to provide built-in modularity. </li>
</ul>

<p class="wikiPara">
Above all, Ceylon is designed to make it easy and fun to <i class="wikiEmphasis">get things done</i> in large teams.
</p>

<p class="wikiPara">
The Ceylon compiler is not yet finished, so you can't write code in Ceylon yet. However, we would like to get the community involved in development of the language and SDK, so this serious of articles is a sneak preview for interested folks.
</p>

<p class="wikiPara">
Let's start from the beginning.
</p>

<h1 class="wikiHeadline1" id="H-WritingASimpleProgram"><a href="/2011/04/27/introduction-to-ceylon-part-1#H-WritingASimpleProgram">Writing a simple program</a></h1>

<p class="wikiPara">
Here's a classic example program.
</p>

<pre class="wikiPreformatted brush:ceylon">void hello() { 
    writeLine("Hello, World!");
}</pre>


<p class="wikiPara">
This method prints <tt>Hello, World!</tt> on the console. A toplevel method like this is just like a C function — it belongs directly to the package that contains it, it's not a member of any specific type. You don't need a receiving object to invoke a toplevel method. Instead, you can just call it like this:
</p>

<pre class="wikiPreformatted brush:ceylon">hello();</pre>


<p class="wikiPara">
Ceylon doesn't have Java-style <tt>static</tt> methods, but you can think of toplevel methods as filling the same role. The problem with <tt>static</tt> methods is that they break the block structure of the language. Ceylon has a very strict block structure — a nested block always has access to declarations in all containing blocks. This isn't the case with Java's <tt>static</tt> methods.
</p>

<p class="wikiPara">
This method is declared using the <tt>void</tt> keyword, which means that the method declaration doesn't specify a return value. When the method is executed, it calls another toplevel method named <tt>writeLine()</tt>. This method displays its parameter on the console. 
</p>

<p class="wikiPara">
Along with the <tt>void</tt> keyword, there's also a type named <tt>Void</tt>, which is the return type of any <tt>void</tt> method, and also the root of the Ceylon type system. 
</p>

<pre class="wikiPreformatted brush:ceylon">doc "The root type, supertype of
     both Object (definite values) 
     and Nothing (the null value)."
shared abstract class Void() 
        of Object | Nothing {}</pre>


<p class="wikiPara">
It might seem strange that a <tt>void</tt> method has a return type. The justification for this is that all methods in Ceylon are functions. (But not necessarily <i class="wikiEmphasis">pure</i> functions — like <tt>hello()</tt>, a Ceylon function can have side-effects.)
</p>

<p class="wikiPara">
At a very abstract level, every method accepts arguments and returns a result. The type <tt>Void</tt>, loosely speaking, is a way of representing the notion of an unknown value of an unknown type. You can assign any value, including <tt>null</tt>, to <tt>Void</tt>, but then there's no way to get it back out again, or even discover what type of value it was. So, in theory, a <tt>void</tt> method has a return value, we just have no way of finding out anything about that value. This stuff probably doesn't sound very useful right now, but it will turn out to be useful when we discuss <a href="http://in.relation.to/Bloggers/IntroductionToCeylonPart8#H-DefiningHigherOrderFunctions" target="" class="regularLink">higher order functions</a> and Ceylon's <a href="http://in.relation.to/Bloggers/IntroductionToCeylonPart8#H-RepresentingTheTypeOfAFunction" target="" class="regularLink">typesafe metamodel</a>.
</p>

<h1 class="wikiHeadline1" id="H-AddingInlineDocumentation"><a href="/2011/04/27/introduction-to-ceylon-part-1#H-AddingInlineDocumentation">Adding inline documentation</a></h1>

<p class="wikiPara">
It's usually a good idea to add some kind of documentation to important methods like <tt>hello()</tt>. One way we could do this is by using a C-style comment, either like this:
</p>

<pre class="wikiPreformatted brush:ceylon">/* The classic Hello World program */ 
void hello() {
    writeLine("Hello, World!");
}</pre>


<p class="wikiPara">
Or like this:
</p>

<pre class="wikiPreformatted brush:ceylon">//The classic Hello World program 
void hello() {
    writeLine("Hello, World!");
}</pre>


<p class="wikiPara">
But it's much better to use the <tt>doc</tt> annotation for comments that describe declarations.
</p>

<pre class="wikiPreformatted brush:ceylon">doc "The classic Hello World program" 
void hello() {
    writeLine("Hello, World!");
}</pre>


<p class="wikiPara">
The <tt>doc</tt> annotation contains documentation that is included in the output of the Ceylon documentation compiler. The documentation compiler will support several other annotations, including <tt>by</tt>, for specifying the author of a program element, <tt>see</tt>, for referring to related code elements, and <tt>throws</tt>, for alerting the user to exception types thrown by an executable program element.
</p>

<pre class="wikiPreformatted brush:ceylon">doc "The classic Hello World program" 
by "Gavin" 
see (goodbye) 
throws (IOException)
void hello() { 
    writeLine("Hello, World!");
}</pre>


<p class="wikiPara">
There's also a <tt>deprecated</tt> annotation for marking program elements that will be removed in a future version of the module.
</p>

<p class="wikiPara">
Notice that when an annotation argument is a literal, <a href="http://in.relation.to/Bloggers/IntroductionToCeylonPart12#H-AnnotationArguments" target="" class="regularLink">it doesn't need to be enclosed in parentheses</a>.
</p>

<p class="wikiPara">
Note also that <a href="/Bloggers/IntroductionToCeylonPart12" target="" class="regularLink">annotations</a> like <tt>doc</tt>, <tt>by</tt>, <tt>see</tt>, and <tt>deprecated</tt> aren't keywords. They're just ordinary identifiers. The same is true for annotations which are part of the language definition: <tt>abstract</tt>, <tt>variable</tt>, <tt>shared</tt>, <tt>formal</tt>, <tt>actual</tt>, and friends. On the other hand, <tt>void</tt> <i class="wikiEmphasis">is</i> a keyword.
</p>

<h1 class="wikiHeadline1" id="H-StringsAndStringInterpolation"><a href="/2011/04/27/introduction-to-ceylon-part-1#H-StringsAndStringInterpolation">Strings and string interpolation</a></h1>

<p class="wikiPara">
The Hello World program — wildly popular as it is — provides for a rather limited and monotonous user experience. A more typical program would produce output that sometimes varies between different runs.
</p>

<p class="wikiPara">
Let's ask our program to tell us a little more about itself.
</p>

<pre class="wikiPreformatted brush:ceylon">doc "The Hello World program 
     ... version 1.1!"
void hello() { 
    writeLine("Hello, this is Ceylon " process.languageVersion
              " running on Java " process.javaVersion "!");
}</pre>


<p class="wikiPara">
Here we can see two nice things about strings in Ceylon. The first is that we can split a string across multiple lines. That's especially useful when we're writing documentation in a <tt>doc</tt> annotation. The second is that we can interpolate expressions inside a string literal. Technically, a string with expressions in it isn't really a literal anymore — it's considered a <i class="wikiEmphasis">string template</i>.
</p>

<p class="wikiPara">
A string template must begin and end in a string literal. The following is not legal syntax:
</p>

<pre class="wikiPreformatted brush:ceylon">writeLine("Hello, this is Ceylon " process.languageVersion); //compile error!</pre>


<p class="wikiPara">
A quick fix is to terminate the template with an empty string literal:
</p>

<pre class="wikiPreformatted brush:ceylon">writeLine("Hello, this is Ceylon " process.languageVersion "");</pre>


<p class="wikiPara">
Note that this isn't the only way to concatenate strings in Ceylon. Indeed, it's only useful when you're interpolating variables or expressions into an otherwise-constant string. The <tt>+</tt> operator you're probably used to is an alternative, and more flexible in many cases:
</p>

<pre class="wikiPreformatted brush:ceylon">writeLine("Hello, this is Ceylon " + process.languageVersion + 
          " running on Java " + process.javaVersion + "!");</pre>


<p class="wikiPara">
However, don't make the mistake of thinking that these two approaches are always equivalent just because they result in the same output in this case. The <tt>+</tt> operator immediately evaluates its operand expressions and produces an immutable <tt>String</tt> object. On the other hand, a string template is an expression of type <tt>Gettable&lt;String&gt;</tt>, which evaluates its interpolated expressions <i class="wikiEmphasis">lazily</i>. If you print the same string template object twice, you might see different output the second time around! In fact, a string template is a kind of <i class="wikiEmphasis">closure</i> — an important concept we'll explore further in <a href="http://in.relation.to/Bloggers/IntroductionToCeylonPart2#H-UnderstandingObjectInitialization" target="" class="regularLink">Part 2</a>.
</p>

<h1 class="wikiHeadline1" id="H-DealingWithObjectsThatArentThere"><a href="/2011/04/27/introduction-to-ceylon-part-1#H-DealingWithObjectsThatArentThere">Dealing with objects that aren't there</a></h1>

<p class="wikiPara">
An even more exciting program would receive input and produce output that depends upon the input it receives. Of course, this places somewhat more demanding requirements upon the user, but the extra work does sometimes pay off!
</p>

<p class="wikiPara">
Therefore, this improved version of the original Hello World program takes a name as input from the command line. We have to account for the case where nothing was specified at the command line, which gives us an opportunity to explore how null values are treated in Ceylon, which is quite different to what you're probably used to in Java or C#.
</p>

<pre class="wikiPreformatted brush:ceylon">doc "Print a personalized greeting" 
void hello() {
    String? name = process.arguments.first; 
    String greeting; 
    if (exists name) {
        greeting = "Hello, " name "!";
    }
    else {
        greeting = "Hello, World!"; 
    }
    writeLine(greeting);
}</pre>


<p class="wikiPara">
The process object has an attribute named <tt>arguments</tt>, which holds a <tt>Sequence</tt> of the program's command line arguments. The local <tt>name</tt> is initialized with the first of these arguments, if any. This local is declared to have type <tt>String?</tt>, to indicate that it may contain a null value. Then the <tt>if (exists ...)</tt> control structure is used to initialize the value of the non-null local named <tt>greeting</tt>, interpolating the value of <tt>name</tt> into the message string whenever <tt>name</tt> is not null. Finally, the message is printed to the console.
</p>

<p class="wikiPara">
Unlike Java, locals, parameters, and attributes that may contain null values must be explicitly declared as being of <i class="wikiEmphasis">optional</i> type. And unlike other languages with typesafe null value handling, an optional type in Ceylon is not an algebraic datatype that <q>wraps</q> the definite value. Instead, Ceylon uses an ad-hoc <i class="wikiEmphasis">union type</i>. The syntax <tt>T|S</tt> represents the <a href="http://in.relation.to/Bloggers/IntroductionToCeylonPart5#H-MoreAboutUnionTypes" target="" class="regularLink">union type</a> of <tt>T</tt> and <tt>S</tt>, a type which may contain a value of type <tt>T</tt> or of type <tt>S</tt>. An optional type is any type of form <tt>Nothing|X</tt> where <tt>X</tt> is the type of the definite value. Fortunately, Ceylon lets us abbreviate the union type <tt>Nothing|X</tt> to <tt>X?</tt>. 
</p>

<pre class="wikiPreformatted brush:ceylon">doc "The type of null."
shared abstract class Nothing() 
        of nothing
        extends Void() {}</pre>


<p class="wikiPara">
The value <tt>null</tt> is the unique instance of type <tt>Nothing</tt>, but it's not an instance of <tt>Object</tt>. So there's simply no way to assign <tt>null</tt> to a local that isn't of optional type. The compiler won't let you.
</p>

<pre class="wikiPreformatted brush:ceylon">doc "Represents a null reference."  
object nothing extends Nothing() {}

doc "Hides the concrete type of nothing."  
shared Nothing null = nothing;</pre>


<p class="wikiPara">
Nor will the Ceylon compiler let you do anything <q>dangerous</q> with a value of type <tt>T?</tt> — that is, anything that could cause a <tt>NullPointerException</tt> in Java — without first checking that the value is not null using <tt>if (exists ... )</tt>. More formally, the <tt>if (exists ... )</tt> construct lets us extract a value of type <tt>X</tt> from a value of type <tt>X?</tt>, thereby allowing us to invoke the members of <tt>X</tt> upon the value.
</p>

<p class="wikiPara">
In fact, it's not even possible to use the equality operator <tt>==</tt> with an expression of optional type. You can't write <tt>if (x==null)</tt> like you can in Java. This helps avoid the undesirable behavior of <tt>==</tt> in Java where <tt>x==y</tt> evaluates to <tt>true</tt> if <tt>x</tt> and <tt>y</tt> both evaluate to <tt>null</tt>.
</p>

<p class="wikiPara">
It's possible to declare the local <tt>name</tt> inside the <tt>if (exists ... )</tt> condition:
</p>

<pre class="wikiPreformatted brush:ceylon">String greeting; 
if (exists String name = process.arguments.first) {
    greeting = "Hello, " name "!";
} 
else {
    greeting = "Hello, World!"; 
}
writeLine(greeting);</pre>


<p class="wikiPara">
This is the preferred style most of the time, since we can't actually use <tt>name</tt> for anything useful outside of the <tt>if (exists ... )</tt> construct.
</p>

<h1 class="wikiHeadline1" id="H-OperatorsForHandlingNullValues"><a href="/2011/04/27/introduction-to-ceylon-part-1#H-OperatorsForHandlingNullValues">Operators for handling null values</a></h1>

<p class="wikiPara">
While we're discussing null values, I should tell you about an even easier way to define <tt>greeting</tt>, using the <tt>?</tt> operator. It's just a little extra syntax sugar to save some keystrokes.
</p>

<pre class="wikiPreformatted brush:ceylon">shared String greeting = "Hello, " + name?"World";</pre>


<p class="wikiPara">
The <tt>?</tt> operator returns its first argument if the first argument is not null, or its second argument otherwise. Its a more convenient way to handle null values in simple cases. It can even be chained:
</p>

<pre class="wikiPreformatted brush:ceylon">shared String greeting = "Hello, " + nickName?name?"World";</pre>


<p class="wikiPara">
The related <tt>?.</tt> operator lets us call operations on optional types, always returning an optional type:
</p>

<pre class="wikiPreformatted brush:ceylon">shared String shoutedGreeting = "HELLO, " + name?.uppercase?"WORLD";</pre>


<h1 class="wikiHeadline1" id="H-DefaultedParameters"><a href="/2011/04/27/introduction-to-ceylon-part-1#H-DefaultedParameters">Defaulted parameters</a></h1>

<p class="wikiPara">
A method parameter may specify a default value.
</p>

<pre class="wikiPreformatted brush:ceylon">void hello(String name="World") {
    writeLine("Hello, " name "!");
}</pre>


<p class="wikiPara">
Then we don't need to specify an argument to the parameter when we call the method:
</p>

<pre class="wikiPreformatted brush:ceylon">hello(); //Hello, World!
hello("JBoss"); //Hello, JBoss!</pre>


<p class="wikiPara">
Defaulted parameters must be declared after all required parameters in the parameter list of a method.
</p>

<p class="wikiPara">
Ceylon also supports <i class="wikiEmphasis">sequenced parameters</i> (varargs), declared using the syntax <tt>T...</tt>. We'll <a href="http://in.relation.to/Bloggers/IntroductionToCeylonPart7#H-SequencedParameters" target="" class="regularLink">come back to them</a> after we discuss <a href="/Bloggers/IntroductionToCeylonPart4" target="" class="regularLink">sequences</a> and <tt>for</tt> loops.
</p>

<h1 class="wikiHeadline1" id="H-TheresMore"><a href="/2011/04/27/introduction-to-ceylon-part-1#H-TheresMore">There's more...</a></h1>

<p class="wikiPara">
In <a href="/Bloggers/IntroductionToCeylonPart2" target="" class="regularLink">Part 2</a>, we'll see how to define our own types: classes, interfaces, and <tt>object</tt>s.
</p>
</div>

