---
title: "On CDI interceptor bindings"
author: "Gavin King"
blogger_name: "Gavin"
creation_date: "10-12-2009"
original_tags: [Contexts and Dependency Injection,Interceptors]
tags: [CDI]

relative_url: /2009/12/10/on-cdi-interceptor-bindings
slug: on-cdi-interceptor-bindings
lace: http://in.relation.to/13432.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2009/12/10/on-cdi-interceptor-bindings
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
Matt Corey has <a href="http://smokeandice.blogspot.com/2009/12/cdi-and-declarative-transactions.html?utm_source=feedburner&amp;utm_medium=feed&amp;utm_campaign=Feed%3A+SmokeAndIce+%28Smoke+and+Ice%29" target="" class="regularLink">blogged about CDI interceptor bindings</a>, showing a simple example of how you can implement your own <tt>@RequiredTx</tt> annotation. He also lightly criticizes the use of <tt>beans.xml</tt> for interceptor enablement. (This was also <a href="http://www.seamframework.org/Community/EnablingAnInterceptorInALibrary" target="" class="regularLink">discussed</a> in the Weld forum.) I really think we have the design just right here, and I'll explain why. But first let me remember why CDI interceptor bindings are much better than the <tt>@Interceptors</tt> annotation from EJB 3.0.
</p>

<p class="wikiPara">
In EJB 3.0, you could declare the interceptors of a bean by specifying them directly on the bean class. Using Matt's example:
</p>

<pre class="wikiPreformatted brush: java;">public class UserGetterer {

   @Interceptors({RequiredTxInterceptor.class, SecurityInterceptor.class})
   public User loadUser() { ... }

}</pre>


<p class="wikiPara">
Now, I count three problems with this:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> It's very ugly to have the bean class depend directly upon the interceptor implementation class.</li>
<li class="wikiUnorderedListItem"> Interceptors should be able to vary depending upon the deployment environment - I don't need my transaction interceptor in tests, and I definitely don't want my security interceptor!</li>
<li class="wikiUnorderedListItem"> The interceptor ordering is defined by the order that the interceptors are listed - which I suppose is fine if the interceptors are truly orthogonal, but this is rarely the case. Interceptor ordering should be defined more centrally, reducing the possibility for subtle bugs.</li>
</ul>

<p class="wikiPara">
(EJB 3.0 also defined an XML-based approach to binding interceptors to beans, which is less problematic, but I prefer to see information like this in my code.)
</p>

<p class="wikiPara">
So, in CDI, we introduce an indirection, called an <i class="wikiEmphasis">interceptor binding</i>. An interceptor binding is an annotation - you can see an example in <a href="http://smokeandice.blogspot.com/2009/12/cdi-and-declarative-transactions.html?utm_source=feedburner&amp;utm_medium=feed&amp;utm_campaign=Feed%3A+SmokeAndIce+%28Smoke+and+Ice%29" target="" class="regularLink">Matt's post</a> - that we use instead of the interceptor class:
</p>

<pre class="wikiPreformatted brush: java;">public class UserGetterer {

   @RequiredTx @Secure
   public User loadUser() { ... }

}</pre>


<p class="wikiPara">
Now, our bean class doesn't depend directly upon the interceptor implementation classes, and doesn't specify the ordering in which the interceptors are called. To specify the connection between the bean and the interceptor classes we need to do two more things:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> apply the interceptor bindings to the interceptor classes, and</li>
<li class="wikiUnorderedListItem"> enable the interceptors by listing them in the <tt>beans.xml</tt> file of the bean's module.</li>
</ul>

<p class="wikiPara">
Matt objects to the second requirement:
</p>

<blockquote class="wikiBlockquote">
Yeah, I know -- it feels kind of like we're exposing your implementation detail by asking the user to enable the interceptor instead of the annotation... kind of annoying, but I can deal with it...
</blockquote>

<p class="wikiPara">
Well, not really - on the contrary, you're explicitly <i class="wikiEmphasis">not</i> doing that. The <tt>beans.xml</tt> file contains deployment-specific metadata - just the stuff that depends upon your deployment. So in your test environment, you don't specify any interceptors at all in <tt>beans.xml</tt>. In your production deployment you can enable <tt>RequiredTransactionInterceptor</tt>. In some other deployment, you can enable <tt>DummyRequiredTransactionInterceptor</tt>, a <i class="wikiEmphasis">different implementation</i> of the <tt>@RequiredTx</tt> <q>semantic</q> or <q>aspect</q>. It's even possible to bind multiple interceptors to the same interceptor binding! So we have truly decoupled the semantic annotation <tt>@RequiredTx</tt> from its implementation, <tt>RequiredTransactionInterceptor</tt>. 
</p>

<p class="wikiPara">
So we've got an extra level of indirection here that we would not have if it was the annotation we were specifying in <tt>beans.xml</tt>, as suggested by Matt.
</p>

<p class="wikiPara">
In fact, <tt>beans.xml</tt> serves two different roles here. It lets you specify:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> any, or no, or multiple implementations of the interceptor binding, for the particular deployment, and</li>
<li class="wikiUnorderedListItem"> the interceptor ordering.</li>
</ul>

<p class="wikiPara">
Ordering is important. It's very likely that you'll be using interceptors defined by various different portable extensions in your application. These portable extensions don't know anything about each other, so they don't know what order they should be called in. <i class="wikiEmphasis">We can't specify the interceptor ordering in the portable extensions that define the interceptors.</i> It's your job, as application developer, to specify the ordering of these interceptors.
</p>

<p class="wikiPara">
Matt says:
</p>

<blockquote class="wikiBlockquote">
another thing to note is that if you pack your interceptors into a shareable library file, all other library files in your application will still need to do this, even if you enable it in your .jar file -- that's because there's no concept of a global interceptor in CDI, but to be safe, each library is forced to enable all interceptors in use, so that they can enforce the ordering of interceptors in a very intuitive manner... I can accept this reasoning simply because they have defined it, rather than letting it be an undefined mess, so again, it's more of annoyance for me -- hopefully there will be other options in the future...
</blockquote>

<p class="wikiPara">
OK, so let's step back a second. If my application is deployed as a single module, there <i class="wikiEmphasis">is</i> a global ordering, the ordering defined by the <tt>beans.xml</tt> file of that module. Now, back in Java EE 5 days, it wasn't possible to deploy an application that used EJBs as a single module. But it is now. A war can now directly contain EJBs. So single-module applications are going to be very common. So that's the simple case out of the way.
</p>

<p class="wikiPara">
Now, for the more complex case of an application that <i class="wikiEmphasis">really, truly</i> needs to be deployed, for example, as an ear with multiple war and EJB jar modules, or as a war containing multiple jar modules, it's quite likely that the various modules are going to each define a different list of interceptors, decorators and alternatives. I mean, the whole <i class="wikiEmphasis">point</i> of modularizing the application is to decouple the modules.
</p>

<p class="wikiPara">
I suppose I accept that we could allow <q>toplevel</q> <tt>beans.xml</tt> file, that defined a global, or default, list of interceptors, decorators and alternatives. This would be <i class="wikiEmphasis">very</i> easy to add to the CDI spec, but I think it's a pretty advanced case. Historically, Java EE has not allowed you to put module-level metadata in the ear.
</p>

</div>

