---
title: "The Lie Of Simplicity"
author: "Gavin King"
blogger_name: "Gavin"
creation_date: "30-07-2004"
original_tags: []
tags: []

relative_url: /2004/07/30/the-lie-of-simplicity
slug: the-lie-of-simplicity
lace: http://in.relation.to/1674.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2004/07/30/the-lie-of-simplicity
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
 <q>Simple</q> is a seductive notion. We all want to make things simple. But when we talk about software, <q>simple</q> could mean at least two different things.
</p>

<p class="wikiPara">
There are always two ways of looking at nontrivial software: the implementation view, and the user view. I have always gotten the impression (I may be wrong) that many people who say that <q>J2EE is too complex</q> confuse the second view for the first. So, just in case I'm right about this, I think we should rephrase. Perhaps we should say <q>J2EE is too /inconvenient/</q>.
</p>

<p class="wikiPara">
A simple framework is very often /not/ the best solution to a difficult problem. Making life easy for developers does not mean giving us simple tools. The problem with J2EE development is not that the J2EE stack provides too much complex functionality; it is that the functionality is not exposed to the user in a convenient way. 
</p>

<p class="wikiPara">
For example, Hibernate is /much/ more complex (implementation-wise) than a CMP 2.1 entity bean container. Arguably, some of Hibernate's user-visible functionality is also more complex. For example, HQL has many more features than EJBQL and could therefore be said to be more complex. Likewise, Hibernate's support for multiple inheritance mapping strategies is a complex feature, not visible in CMP 2.1. 
</p>

<p class="wikiPara">
But it is that very complexity that makes Hibernate powerful, and, perhaps paradoxically, simplifies life for people using Hibernate to write applications. By contrast, CMP 2.1 is simultaneously too simple (featurewise) and too complex (from the point of view of the user).
</p>

<p class="wikiPara">
The best frameworks are /powerful/, not simple. But they do try to get their internal complexity out of the face of the user, as far as possible. Sometimes it is possible, other times not. If you try to oversimplify a difficult problem, you end up making life more difficult for your users, who are then forced to work around your framework's limitations, instead of working with it.
</p>

<p class="wikiPara">
There are very, very few simple solutions to difficult problems. Be very sceptical when someone claims to have found one.
</p>
</div>

