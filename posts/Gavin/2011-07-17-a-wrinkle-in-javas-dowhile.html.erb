---
title: "A wrinkle in Java's do-while"
author: "Gavin King"
blogger_name: "Gavin"
creation_date: "17-07-2011"
original_tags: [Ceylon]
tags: [Ceylon]

relative_url: /2011/07/17/a-wrinkle-in-javas-dowhile
slug: a-wrinkle-in-javas-dowhile
lace: http://in.relation.to/21053.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2011/07/17/a-wrinkle-in-javas-dowhile
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
Today I tried to write (approximately) this code in Java:
</p>

<pre class="wikiPreformatted brush:java">//Java
Scope scope = declaration.getContainer();
do {
    if (scope.getDirectMemberOrParameter(model.getName())!=null) {
        node.addError("duplicate declaration name: " + declaration.getName());
    }
    boolean isControlBlock = scope instanceof ControlBlock;
    scope = scope.getContainer();
}
while (isControlBlock);  //compile error</pre>


<p class="wikiPara">
This didn't work, since Java doesn't consider the <tt>while</tt> condition expression to belong to the <tt>do</tt> block. I think this is wrong. Surely the loop should be allowed to compute it's own termination condition? I realize that <tt>do/while</tt> is a fairly uncommon construct, but when it <i class="wikiEmphasis">is</i> used, I imagine it's pretty common that it would be used like this. 
</p>

<p class="wikiPara">
The only reasonable way to fix the above code is to move the declaration of <tt>isControlBlock</tt> outside the loop:
</p>


<pre class="wikiPreformatted brush:java">//Java
boolean isControlBlock;
Scope scope = declaration.getContainer();
do {
    if (scope.getDirectMemberOrParameter(model.getName())!=null) {
        node.addError("duplicate declaration name: " + declaration.getName());
    }
    isControlBlock = scope instanceof ControlBlock;
    scope = scope.getContainer();
}
while (isControlBlock);</pre>


<p class="wikiPara">
Note that <tt>isControlBlock</tt> is now a <i class="wikiEmphasis">variable</i>. I would not be able to declare it <tt>final</tt>.
</p>

<p class="wikiPara">
The Ceylon type analyzer accepts the equivalent code:
</p>

<pre class="wikiPreformatted brush:ceylon">//Ceylon
variable local scope = declaration.container;
do {
    if (scope.directMemberOrParameter(model.name) exists) {
        node.addError("duplicate declaration name: " + declaration.name);
    }
    local isControlBlock = scope is ControlBlock;
    scope = scope.container;
}
while (isControlBlock);</pre>


<p class="wikiPara">
I'm going to clarify that this is allowed in the language specification.
</p>
</div>

