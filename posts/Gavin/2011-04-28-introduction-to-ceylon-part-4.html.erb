---
title: "Introduction to Ceylon Part 4"
author: "Gavin King"
blogger_name: "Gavin"
creation_date: "28-04-2011"
original_tags: [Ceylon,Introduction to Ceylon]
tags: [Ceylon]

relative_url: /2011/04/28/introduction-to-ceylon-part-4
slug: introduction-to-ceylon-part-4
lace: http://in.relation.to/19584.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2011/04/28/introduction-to-ceylon-part-4
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
<i class="wikiEmphasis">This is the fourth installment in a <a href="/Tutorials/IntroductionToCeylon" target="" class="regularLink">series of articles</a> introducing the Ceylon language. Note that some features of the language may change before the final release.</i>
</p>

<h1 class="wikiHeadline1" id="H-Sequences"><a href="/2011/04/28/introduction-to-ceylon-part-4#H-Sequences">Sequences</a></h1>

<p class="wikiPara">
Some kind of array or list construct is a universal feature of all programming languages. The Ceylon language module defines support for <i class="wikiEmphasis">sequence types</i>. A sequence type is usually written <tt>X[]</tt> for some element type <tt>X</tt>. But this is really just an abbreviation for the <a href="http://in.relation.to/Bloggers/IntroductionToCeylonPart5#H-MoreAboutUnionTypes" target="" class="regularLink">union type</a> <tt>Empty|Sequence&lt;X&gt;</tt>. 
</p>

<p class="wikiPara">
The interface <tt>Sequence</tt> represents a sequence with at least one element. The type <tt>Empty</tt> represents an empty sequence with no elements. Some operations of the type <tt>Sequence</tt> aren't defined by <tt>Empty</tt>, so you can't call them if all you have is <tt>X[]</tt>. Therefore, we need the <tt>if (nonempty ... )</tt> construct to gain access to these operations.
</p>

<pre class="wikiPreformatted brush:ceylon">void printBounds(String[] strings) {
    if (nonempty strings) {
        //strings is a Sequence&lt;String&gt;
        writeLine(strings.first + ".." + strings.last);
    }
    else {
        writeLine("Empty");
    }
}</pre>


<p class="wikiPara">
Note how this is just a continuation of the pattern established for null value handling.
</p>

<h1 class="wikiHeadline1" id="H-SequenceSyntaxSugar"><a href="/2011/04/28/introduction-to-ceylon-part-4#H-SequenceSyntaxSugar">Sequence syntax sugar</a></h1>

<p class="wikiPara">
There's lots more syntactic sugar for sequences. We can use a bunch of familiar Java-like syntax:
</p>

<pre class="wikiPreformatted brush:ceylon">String[] operators = { "+", "-", "*", "/" };
String? plus = operators[0];
String[] multiplicative = operators[2..3];</pre>


<p class="wikiPara">
Oh, and the expression <tt>{}</tt> returns a value of type <tt>Empty</tt>.
</p>

<p class="wikiPara">
However, unlike Java, all these syntactic constructs are pure abbreviations. The code above is exactly equivalent to the following de-sugared code:
</p>

<pre class="wikiPreformatted brush:ceylon">Empty|Sequence&lt;String&gt; operators = Array("+", "-", "*", "/");
Nothing|String plus = operators.value(0);
Empty|Sequence&lt;String&gt; multiplicative = operators.range(2,3);</pre>


<p class="wikiPara">
A <tt>Range</tt> is also a subtype of <tt>Sequence</tt>. The following:
</p>

<pre class="wikiPreformatted brush:ceylon">Character[] uppercaseLetters = 'A'..'Z';
Natural[] countDown = 10..0;</pre>


<p class="wikiPara">
Is just sugar for:
</p>

<pre class="wikiPreformatted brush:ceylon">Empty|Sequence&lt;Character&gt; uppercaseLetters = Range('A','Z');
Empty|Sequence&lt;Natural&gt; countDown = Range(10,0);</pre>


<p class="wikiPara">
In fact, this is just a sneak preview of the fact that almost all operators in Ceylon are just sugar for method calls upon a type. We'll come back to this later, when we talk about <i class="wikiEmphasis">operator polymorphism</i>.
</p>

<h1 class="wikiHeadline1" id="H-IteratingSequences"><a href="/2011/04/28/introduction-to-ceylon-part-4#H-IteratingSequences">Iterating sequences</a></h1>

<p class="wikiPara">
The <tt>Sequence</tt> interface extends <tt>Iterable</tt>, so we can iterate a <tt>Sequence</tt> using a <tt>for</tt> loop:
</p>

<pre class="wikiPreformatted brush:ceylon">for (String op in operators) {
    writeLine(op);
}</pre>


<p class="wikiPara">
Ceylon doesn't need C-style <tt>for</tt> loops. Instead, combine <tt>for</tt> with the range operator <tt>..</tt>.
</p>

<pre class="wikiPreformatted brush:ceylon">variable Natural fac:=1;
for (Natural n in 1..100) {
    fac*=n;
    writeLine("Factorial " n "! = " fac "");
}</pre>


<p class="wikiPara">
If, for any reason, we need to use the index of each element of
a sequence we can use a special variation of the <tt>for</tt> loop that
is designed for iterating instances of <tt>Entries</tt>:
</p>

<pre class="wikiPreformatted brush:ceylon">for (Natural i -&gt; String op in entries(operators)) {
    writeLine($i + ": " + op);
}</pre>


<p class="wikiPara">
The <tt>entries()</tt> function returns an instance of <tt>Entries&lt;Natural,String&gt;</tt> containing the indexed elements of the sequence.
</p>

<h1 class="wikiHeadline1" id="H-SequenceAndItsSupertypes"><a href="/2011/04/28/introduction-to-ceylon-part-4#H-SequenceAndItsSupertypes">Sequence and its supertypes</a></h1>

<p class="wikiPara">
It's probably a good time to see some more advanced Ceylon code. What better place to find some than in the language module itself?
</p>

<p class="wikiPara">
Here's how the language module defines the type <tt>Sequence</tt>:
</p>

<pre class="wikiPreformatted brush:ceylon">shared interface Sequence&lt;out Element&gt;
        satisfies Correspondence&lt;Natural, Element&gt; &amp; 
                  Iterable&lt;Element&gt; &amp; Sized {
    
    doc "The index of the last element of the sequence."
    shared formal Natural lastIndex;
    
    doc "The first element of the sequence."
    shared actual formal Element first;
    
    doc "The rest of the sequence, without the first
         element."
    shared formal Element[] rest;

    shared actual Boolean empty {
        return false;
    }
        
    shared actual default Natural size {
        return lastIndex+1;
    }
    
    doc "The last element of the sequence."
    shared default Element last {
        if (exists Element x = value(lastIndex)) {
            return x;
        }
        else {
            //actually never occurs if 
            //the subtype is well-behaved
            return first; 
        } 
    }

    shared actual default Iterator&lt;Element&gt; iterator() {
        class SequenceIterator(Natural from) 
                satisfies Iterator&lt;Element&gt; {
            shared actual Element? head { 
                return value(from);
            }
            shared actual Iterator&lt;Element&gt; tail {
                return SequenceIterator(from+1);
            }
        }
        return SequenceIterator(0);
    }
    
}</pre>


<p class="wikiPara">
The most interesting operations are inherited from <tt>Correspondence</tt>, <tt>Iterable</tt> and <tt>Sized</tt>:
</p>

<pre class="wikiPreformatted brush:ceylon">shared interface Correspondence&lt;in Key, out Value&gt;
        given Key satisfies Equality {
    
    doc "Return the value defined for the 
         given key."
    shared formal Value? value(Key key);
        
}</pre>


<pre class="wikiPreformatted brush:ceylon">shared interface Iterable&lt;out Element&gt; 
        satisfies Container {
    
    doc "An iterator of values belonging
         to the container."
    shared formal Iterator&lt;Element&gt; iterator();
    
    shared actual default Boolean empty {
        return !(first exists);
    }
    
    doc "The first object."
    shared default Element? first {
        return iterator().head;
    }

}</pre>


<pre class="wikiPreformatted brush:ceylon">shared interface Sized 
        satisfies Container {
        
    doc "The number of values or entries 
         belonging to the container."
    shared formal Natural size;
    
    shared actual default Boolean empty {
        return size==0;
    }
    
}</pre>


<pre class="wikiPreformatted brush:ceylon">shared interface Container {
        
    shared formal Boolean empty;
    
}</pre>


<h1 class="wikiHeadline1" id="H-EmptySequencesAndTheBottomType"><a href="/2011/04/28/introduction-to-ceylon-part-4#H-EmptySequencesAndTheBottomType">Empty sequences and the Bottom type</a></h1>

<p class="wikiPara">
Now let's see the definition of <tt>Empty</tt>:
</p>

<pre class="wikiPreformatted brush:ceylon">object emptyIterator satisfies Iterator&lt;Bottom&gt; {
    
    shared actual Nothing head { 
        return null; 
    }
    shared actual Iterator&lt;Bottom&gt; tail { 
        return this; 
    }
    
}

shared interface Empty
           satisfies Correspondence&lt;Natural, Bottom&gt; &amp; 
                     Iterable&lt;Bottom&gt; &amp; Sized {
    
    shared actual Natural size { 
        return 0; 
    }
    shared actual Boolean empty { 
        return true; 
    }
    shared actual Iterator&lt;Bottom&gt; iterator() {
        return emptyIterator;
    }
    shared actual Nothing value(Natural key) {
        return null;
    }
    shared actual Nothing first {
        return null;
    }
    
}</pre>


<p class="wikiPara">
The special type <tt>Bottom</tt> represents:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> the empty set, or equivalently</li>
<li class="wikiUnorderedListItem"> the intersection of all types.</li>
</ul>

<p class="wikiPara">
Since the empty set is a subset of all other sets, <tt>Bottom</tt> is assignable to all other types. Why is this useful here? Well, <tt>Correspondence&lt;Natural,Element&gt;</tt> and <tt>Iterable&lt;Element&gt;</tt> are both covariant in the type parameter <tt>Element</tt>. So <tt>Empty</tt> is assignable to <tt>Correspondence&lt;Natural,T&gt;</tt> and <tt>Iterable&lt;T&gt;</tt> for any type <tt>T</tt>. That's why <tt>Empty</tt> doesn't need a type parameter. The following code <i class="wikiEmphasis">is</i> well-typed:
</p>

<pre class="wikiPreformatted brush:ceylon">void printAll(String[] strings) {
    variable Iterator&lt;String&gt; i := strings.iterator();
    while (exists String s = i.head) {
        writeLine(s);
    	i := i.tail;
    }
}</pre>


<p class="wikiPara">
Since both <tt>Empty</tt> and <tt>Sequence&lt;String&gt;</tt> are subtypes of <tt>Iterable&lt;String&gt;</tt>, the union type <tt>String[]</tt> is also a subtype of <tt>Iterable&lt;String&gt;</tt>.
</p>

<p class="wikiPara">
Another cool thing to notice here is the return type of the <tt>first</tt> and <tt>value()</tt> operations of <tt>Empty</tt>. You might have been expecting to see <tt>Bottom?</tt> here, since they override supertype members of type <tt>T?</tt>. But as we saw in Part 1, <tt>Bottom?</tt> is just an abbreviation for <tt>Nothing|Bottom</tt>. And <tt>Bottom</tt> is the empty set, so the union <tt>Bottom|T</tt> of <tt>Bottom</tt> with any other type <tt>T</tt> is just <tt>T</tt> itself. 
</p>

<p class="wikiPara">
The Ceylon compiler is able to do all this reasoning automatically. So when it sees an <tt>Iterable&lt;Bottom&gt;</tt>, it knows that the operation <tt>first</tt> is of type <tt>Nothing</tt>, i.e. it is the value <tt>null</tt>.
</p>

<p class="wikiPara">
Cool, huh?
</p>

<h1 class="wikiHeadline1" id="H-SequenceGotchasForJavaDevelopers"><a href="/2011/04/28/introduction-to-ceylon-part-4#H-SequenceGotchasForJavaDevelopers">Sequence gotchas for Java developers</a></h1>

<p class="wikiPara">
Superficially, a sequence type looks a lot like a Java array, but really it's very, very different! First, of course, a sequence type <tt>Sequence&lt;String&gt;</tt> is an immutable interface, it's not a mutable concrete type like an array. We can't set the value of an element:
</p>

<pre class="wikiPreformatted brush:ceylon">String[] operators = .... ; 
operators[0] := "**"; //compile error</pre>


<p class="wikiPara">
Furthermore, the index operation <tt>operators[i]</tt> returns an optional type <tt>String?</tt>, which results in quite different code idioms. To begin with, we don't iterate sequences by index like in C or Java. The following code does not compile:
</p>

<pre class="wikiPreformatted brush:ceylon">for (Natural i in 0..operators.size-1) { 
    String op = operators[i]; //compile error 
    ...
}</pre>


<p class="wikiPara">
Here, <tt>operators[i]</tt> is a <tt>String?</tt>, which is not directly assignable to <tt>String</tt>.
</p>

<p class="wikiPara">
Instead, if we need access to the index, we use the special form of <tt>for</tt> shown above.
</p>

<pre class="wikiPreformatted brush:ceylon">for (Natural i -&gt; String op in entries(operators)) { 
    ...
}</pre>


<p class="wikiPara">
Likewise, we don't usually do an upfront check of an index against the sequence length:
</p>

<pre class="wikiPreformatted brush:ceylon">if (i&gt;operators.size-1) { 
    throw IndexOutOfBoundException();
} 
else {
    return operators[i]; //compile error
}</pre>


<p class="wikiPara">
Instead, we do the check after accessing the sequence element:
</p>

<pre class="wikiPreformatted brush:ceylon">if (exists String op = operators[i]) { 
    return op;
} 
else {
    throw IndexOutOfBoundException();
}</pre>


<p class="wikiPara">
We especially don't ever need to write the following:
</p>

<pre class="wikiPreformatted brush:ceylon">if (i&gt;operators.size-1) { 
    return "";
} 
else {
    return operators[i]; //compile error
}</pre>


<p class="wikiPara">
<a href="http://in.relation.to/Bloggers/IntroductionToCeylonPart1#H-OperatorsForHandlingNullValues" target="" class="regularLink">This</a> is much cleaner:
</p>

<pre class="wikiPreformatted brush:ceylon">return operators[i] ? "";</pre>


<p class="wikiPara">
All this may take a little getting used to. But what's nice is that all the exact same idioms also apply to other kinds of <tt>Correspondence</tt>, including <tt>Entries</tt> and <tt>Map</tt>s.
</p>

<h1 class="wikiHeadline1" id="H-TheresMore"><a href="/2011/04/28/introduction-to-ceylon-part-4#H-TheresMore">There's more...</a></h1>

<p class="wikiPara">
In <a href="/Bloggers/IntroductionToCeylonPart5" target="" class="regularLink">Part 5</a> we'll talk about union types and algebraic data types, type switching, and type inference.
</p>
</div>

