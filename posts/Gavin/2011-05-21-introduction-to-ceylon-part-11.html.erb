---
title: "Introduction to Ceylon Part 11"
author: "Gavin King"
blogger_name: "Gavin"
creation_date: "21-05-2011"
original_tags: [Ceylon,Introduction to Ceylon]
tags: [Ceylon]

relative_url: /2011/05/21/introduction-to-ceylon-part-11
slug: introduction-to-ceylon-part-11
lace: http://in.relation.to/20139.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2011/05/21/introduction-to-ceylon-part-11
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
<i class="wikiEmphasis">This is the eleventh installment in a <a href="/Tutorials/IntroductionToCeylon" target="" class="regularLink">series of articles</a> introducing the Ceylon language. Note that some features of the language may change before the final release.</i>
</p>

<p class="wikiPara">
<i class="wikiEmphasis">This article was updated on 2/6/2011 to mention definite initialization of methods and on 28/5/2011 to reflect refinements to the language specification, and add new material dealing with self references, outer instance references, and circular references. The comment thread reflects information in the first version of article.</i>
</p>

<h1 class="wikiHeadline1" id="H-SelfReferencesAndOuterInstanceReferences"><a href="/2011/05/21/introduction-to-ceylon-part-11#H-SelfReferencesAndOuterInstanceReferences">Self references and outer instance references</a></h1>

<p class="wikiPara">
Ceylon features the keywords <tt>this</tt> and <tt>super</tt>, which refer to the <i class="wikiEmphasis">current instance</i> of a class â€” the receiving instance of an operation (method invocation, member class instantiation, or attribute evaluation/assignment), within the body of the definition of the operation. The semantics are exactly the same as what you're used to in Java. In particular, a reference to a member of <tt>super</tt> always refers to a member of a super<i class="wikiEmphasis">class</i>. There is currently no syntax defined for references to a concrete member of a super<i class="wikiEmphasis">interface</i>.
</p>

<p class="wikiPara">
In addition to <tt>this</tt> and <tt>super</tt>, Ceylon features the keyword <tt>outer</tt>, which refers to the parent instance of the current instance of a nested class.
</p>

<pre class="wikiPreformatted brush:ceylon">class Parent(String name) {
    shared String name = name;
    shared class Child(String name) {
        shared String name = outer.name + "/" + name;
        shared Parent parent { return outer; }
    }
}</pre>


<p class="wikiPara">
There are some restrictions on the use of <tt>this</tt>, <tt>super</tt>, and <tt>outer</tt>, which we'll explore below.
</p>

<h1 class="wikiHeadline1" id="H-MultipleInheritanceAndQlinearizationq"><a href="/2011/05/21/introduction-to-ceylon-part-11#H-MultipleInheritanceAndQlinearizationq">Multiple inheritance and <q>linearization</q></a></h1>

<p class="wikiPara">
There's a good reason why <tt>super</tt> always refers to a superclass, and never to a superinterface.
</p>

<p class="wikiPara">
Ceylon features a <a href="http://in.relation.to/Bloggers/IntroductionToCeylonPart3#H-InterfacesAndQmixinqInheritance" target="" class="regularLink">restricted kind of multiple inheritance</a> often called <i class="wikiEmphasis">mixin</i> inheritance. Some languages with multiple inheritance or even mixin inheritance feature so-called <q>depth-first</q> member resolution or <i class="wikiEmphasis">linearization</i> where all supertypes of a class are arranged into a linear order. We believe that this model is arbitrary and fragile.
</p>

<p class="wikiPara">
Ceylon doesn't perform any kind of linearization of supertypes. The order in which types appear in the <tt>satisfies</tt> clause is <i class="wikiEmphasis">never</i> significant. The only way one supertype can take <q>precedence</q> over another supertype is if the first supertype is a subtype of the second supertype. The only way a member of one supertype can take precedence over a member of another supertype is if the first member refines the second member. 
</p>

<p class="wikiPara">
In our view, there's no non-fragile basis for deciding that one type specializes another type unless the first type is explicitly defined to be a subtype of the second. There's no non-fragile basis for deciding that one operation is more specific than another operation unless the first operation is <a href="http://in.relation.to/Bloggers/IntroductionToCeylonPart3#H-InheritanceAndRefinement" target="" class="regularLink">explicitly declared</a> to refine the second.
</p>

<p class="wikiPara">
For a similar reason, interfaces shouldn't be able to define initialization logic. There's no non-fragile way to define the ordering in which supertype initializers are executed in a multiple-inheritance model. This is the basic reason why <a href="http://in.relation.to/Bloggers/IntroductionToCeylonPart3#H-InterfacesAndQmixinqInheritance" target="" class="regularLink">interfaces are stateless</a> in Ceylon.
</p>

<p class="wikiPara">
(Note that these arguments are even stronger in the case of <a href="http://in.relation.to/Bloggers/IntroductionToCeylonPart3#H-Introduction" target="" class="regularLink">adapter introduction</a>, where linearization or statefulness would be <i class="wikiEmphasis">even more</i> fragile.)
</p>

<p class="wikiPara">
So Ceylon is more restrictive than some other languages here. But we think that this restriction makes a subtype less vulnerable to breakage due to changes in its supertypes.
</p>

<h1 class="wikiHeadline1" id="H-DefiniteAssignmentAndDefiniteInitialization"><a href="/2011/05/21/introduction-to-ceylon-part-11#H-DefiniteAssignmentAndDefiniteInitialization">Definite assignment and definite initialization</a></h1>

<p class="wikiPara">
A really nice feature of Java is that the compiler checks that a local variable has definitely been assigned a value before allowing use of the local variable in an expression. So, for example, the following code compiles without error:
</p>

<pre class="wikiPreformatted brush:ceylon">String greeting;
if (person==me) {
    greeting = "You're beautiful!";
}
else {
    greeting = "You're ugly!";
}
print(greeting);</pre>


<p class="wikiPara">
But the following code results in an error at compile time:
</p>

<pre class="wikiPreformatted brush:ceylon">String greeting;
if (person==me) {
    greeting = "You're beautiful!";
}
print(greeting);   //error: greeting not definitely initialized</pre>


<p class="wikiPara">
Many (most?) languages don't perform this kind of static analysis, which means that use of an uninitialized variable results in an error at runtime instead of compile time.
</p>

<p class="wikiPara">
Unfortunately, Java doesn't do this same kind of static analysis for instance variables, not even for <tt>final</tt> instance variables. Instead, an instance variable which is not assigned a value in the constructor is initialized to a default value (zero or null). Surprisingly, it's even possible to see this default value for a <tt>final</tt> instance variable that <i class="wikiEmphasis">is</i> eventually assigned a value by the constructor. Consider the following code:
</p>

<pre class="wikiPreformatted brush:ceylon">//Java code that prints "null"
class Broken {
    final String greeting;
    
    Broken() {
        print();
        greeting = "Hello";
    }

    void print() {
        System.out.println(greeting);
    }

}
new Broken();</pre>


<p class="wikiPara">
This behavior is bad enough in and of itself. But it would be even less acceptable in Ceylon, where most types don't have an acceptable <q>default</q> value. For example, consider the type <tt>Person</tt>. What would be an acceptable default value of this type? The value <tt>null</tt> certainly won't do, since it's not even an instance of <tt>Person</tt>. (It's an instance of <tt>Nothing</tt>, <a href="http://in.relation.to/Bloggers/IntroductionToCeylonPart1#H-DealingWithObjectsThatArentThere" target="" class="regularLink">remember</a>!) I suppose we could say that evaluation of an uninitialized instance variable always results in an immediate runtime exception, but this is really just our old friend <tt>NullPointerException</tt> creeping back in by the back door, and, well, it's Just Not How We Do Things Around Here.
</p>

<p class="wikiPara">
Indeed, <q>few</q> object-oriented languages (i.e. none that I know of) perform the necessary static analysis to ensure definite initialization of instance variables, and I believe that this is perhaps one main reason why object-oriented languages have never featured typesafe handling of null values.
</p>

<h1 class="wikiHeadline1" id="H-ClassBodies"><a href="/2011/05/21/introduction-to-ceylon-part-11#H-ClassBodies">Class bodies</a></h1>

<p class="wikiPara">
In order to make it possible for the compiler to guarantee definite initialization of attributes, Ceylon imposes some restrictions on the body of a class. (Remember that Ceylon <a href="http://in.relation.to/Bloggers/IntroductionToCeylonPart2#H-UnderstandingObjectInitialization" target="" class="regularLink">doesn't have constructors</a>!) Actually, to be completely fair, they're not really <i class="wikiEmphasis">restrictions</i> at all, at least not from one point of view, since you're actually allowed <i class="wikiEmphasis">extra</i> flexibility in the body of a class that you're not allowed in the body of method or attribute declarations! But compared to Java, there's some things you're not allowed to do.
</p>

<p class="wikiPara">
First, we need to know that the compiler automatically divides the body of the class into two sections:
</p>

<ol class="wikiOrderedList">
<li class="wikiOrderedListItem"> First comes the <i class="wikiEmphasis">initializer section</i>, which contains a mix of declarations, statements and control structures. The initializer is executed every time the class is instantiated.</li>
<li class="wikiOrderedListItem"> Then comes the <i class="wikiEmphasis">declaration section</i>, which consists purely of declarations, similar to the body of an interface.</li>
</ol>

<p class="wikiPara">
Now we're going to introduce some rules that apply to code that appears in each section. The purpose of these rules is to guarantee that an instance variable has had a value specified or assigned before its value is used in an expression.
</p>

<p class="wikiPara">
But you don't need to actually explicitly think about these rules when you write code. Only very rarely will you need to think about the <q>initializer section</q> and <q>declaration section</q> in explicit terms. The compiler will let you know when you break the rules, and force you to fix your code.
</p>

<h1 class="wikiHeadline1" id="H-InitializerSection"><a href="/2011/05/21/introduction-to-ceylon-part-11#H-InitializerSection">Initializer section</a></h1>

<p class="wikiPara">
The initializer section is responsible for initializing the state of the new instance of the class, before a reference to the new instance is available to clients. The declaration section contains members of the class which are <i class="wikiEmphasis">only</i> called after the instance has been fully initialized.
</p>

<p class="wikiPara">
Consider the following example:
</p>

<pre class="wikiPreformatted brush:ceylon">class Hello(String? name) {
    
    //initializer section:

    String greetingForTime {
        if (morning) {
            return "Good morning";
        }
        else if (afternoon) {
            return "Good afternoon";
        }
        else if (evening) {
            return "Good evening";
        }
        else {
            return "Hi";
        }
    }
    
    String greeting;
    if (exists name) {
        greeting = greetingForTime + ", " + name;
    }
    else {
        greeting = greetingForTime;
    }
    
    //declaration section:
    
    shared void say() {
        print(greeting);
    }
    
    default void print(String message) {
        writeLine(message);
    }
    
}</pre>


<p class="wikiPara">
To prevent a reference to a new instance of the class <q>leaking</q> before the new instance has been completely initialized, the language spec defines the following terminology:
</p>

<blockquote class="wikiBlockquote">
Within a class initializer, a <i class="wikiEmphasis">self reference to the instance being initialized</i> is either:
<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> the expression <tt>this</tt>, unless contained in a nested class declaration, or </li>
<li class="wikiUnorderedListItem"> the expression <tt>outer</tt>, contained in a directly nested class declaration.</li>
</ul>


</blockquote>

<p class="wikiPara">
Now, according to the language spec:
</p>

<blockquote class="wikiBlockquote">

A statement or declaration that appears within the initializer of a class may not:

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> evaluate attributes, invoke methods, or instantiate member classes that are declared later in the body of the class upon the instance that is being initialized, including upon a self reference to the instance being initialized.</li>
<li class="wikiUnorderedListItem"> pass a self reference to the instance being initialized as an argument of an instantiation or method invocation or as the value of an attribute assignment or specification.</li>
<li class="wikiUnorderedListItem"> <tt>return</tt> a self reference to the instance being initialized.</li>
<li class="wikiUnorderedListItem"> evaluate attributes, invoke methods, or instantiate member classes declared in the declaration section of a superclass of the instance being initialized, including upon a self reference to the instance being initialized.</li>
<li class="wikiUnorderedListItem"> invoke or evaluate a <tt>formal</tt> member of the instance being initialized, including upon a self reference to the instance being initialized.</li>
<li class="wikiUnorderedListItem"> invoke or evaluate a <tt>default</tt> member of the instance that is being initialized, except via the special <tt>super</tt> self reference.</li>
</ul>


</blockquote>

<h1 class="wikiHeadline1" id="H-DeclarationSection"><a href="/2011/05/21/introduction-to-ceylon-part-11#H-DeclarationSection">Declaration section</a></h1>

<p class="wikiPara">
The declaration section contains the definition of members that don't hold state, and that are never called until the instance to which they belong has been completely initialized.
</p>

<p class="wikiPara">
According to the language spec:
</p>

<blockquote>
[The declaration section] may not contain:

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> a statement or control structure, unless it is nested inside a method, attribute, nested class, or nested interface declaration,</li>
<li class="wikiUnorderedListItem"> a declaration with a specifier or initializer, unless it is nested inside a method, attribute, nested class, or nested interface declaration,</li>
<li class="wikiUnorderedListItem"> an <tt>object</tt> declaration with a non-empty initializer section, or</li>
<li class="wikiUnorderedListItem"> a specification or initialization statement for a member of the instance being initialized.</li>
</ul>

However, the declarations in this second section may freely use <tt>this</tt> and <tt>super</tt>, and may invoke any method, evaluate any attribute, or instantiate any member class of the class or its superclasses. Furthermore, the usual restriction that a declaration may only be used by code that appears later in the block containing the declaration is relaxed.
</blockquote>

<p class="wikiPara">
Note that the rules governing the declaration section of a class body are essentially the same rules governing the body of an interface. That makes sense, because interfaces don't have initialization logic â€” what interfaces and declaration sections have in common is <i class="wikiEmphasis">statelessness</i>.
</p>

<h1 class="wikiHeadline1" id="H-CircularReferences"><a href="/2011/05/21/introduction-to-ceylon-part-11#H-CircularReferences">Circular references</a></h1>

<p class="wikiPara">
Unfortunately, these rules make it a little tricky to set up circular references between two objects without resort to non-<tt>variable</tt> attributes. This is a problem Ceylon has in common with functional languages, which also emphasize immutability. We can't write the following code in Ceylon:
</p>

<pre class="wikiPreformatted brush:ceylon">abstract class Child(Parent p) {
    shared formal Parent parent = p;
}

class Parent() {
    shared Child child = Child(this); //compile error (this passed as argument in initializer section)
}</pre>


<p class="wikiPara">
Eventually, Ceylon will probably need some specialized machinery for dealing with this problem, but for now, here is a partial solution:
</p>

<pre class="wikiPreformatted brush:ceylon">abstract class Child() {
    shared formal Parent parent;
}

class Parent() {
    shared object child extends Child() {
        shared actual parent {
            return outer;
        }
    }    
}</pre>


<h1 class="wikiHeadline1" id="H-DefiniteInitializationOfMethods"><a href="/2011/05/21/introduction-to-ceylon-part-11#H-DefiniteInitializationOfMethods">Definite initialization of methods</a></h1>

<p class="wikiPara">
Ceylon lets us separate the declaration of a <a href="http://in.relation.to/Bloggers/IntroductionToCeylonPart8#H-MoreAboutHigherorderFunctions" target="" class="regularLink">method defined using a method reference</a> from the actual specification statement that specifies the method reference.
</p>

<pre class="wikiPreformatted brush:ceylon">Float x = ... ;
Float op(Float y);
switch (symbol)
case ("+") { op = x.plus; }
case ("-") { op = x.minus; }
case ("*") { op = x.times; }
case ("/") { op = x.divided; }</pre>


<p class="wikiPara">
The rules for definite initialization of locals and attributes also apply to methods defined using a specification statement.
</p>

<h1 class="wikiHeadline1" id="H-DefiniteReturn"><a href="/2011/05/21/introduction-to-ceylon-part-11#H-DefiniteReturn">Definite return</a></h1>

<p class="wikiPara">
While we're on the topic, it's worth noting that the Ceylon compiler, just like the Java compiler, also performs definite return checking, to ensure that a method or getter always has an explicitly specified return value. So, this code compiles without error:
</p>

<pre class="wikiPreformatted brush:ceylon">String greeting {
    if (person==me) {
        return "You're beautiful!";
    }
    else {
        return "You're ugly!";
    }
}</pre>


<p class="wikiPara">
But the following code results in an error at compile time:
</p>

<pre class="wikiPreformatted brush:ceylon">String greeting {   //error: greeting does not definitely return
    if (person==me) {
        return "You're beautiful!";
    }
}</pre>


<h1 class="wikiHeadline1" id="H-TheresMore"><a href="/2011/05/21/introduction-to-ceylon-part-11#H-TheresMore">There's more...</a></h1>

<p class="wikiPara">
In the <a href="/Bloggers/IntroductionToCeylonPart12" target="" class="regularLink">Part 12</a>, we're going to discuss annotations, and take a little peek at using the metamodel to build framework code.
</p>
</div>

