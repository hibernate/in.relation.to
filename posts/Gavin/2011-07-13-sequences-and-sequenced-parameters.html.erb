---
title: "Sequences and sequenced parameters"
author: "Gavin King"
blogger_name: "Gavin"
creation_date: "13-07-2011"
original_tags: [Ceylon]
tags: [Ceylon]

relative_url: /2011/07/13/sequences-and-sequenced-parameters
slug: sequences-and-sequenced-parameters
lace: http://in.relation.to/21005.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2011/07/13/sequences-and-sequenced-parameters
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
I've been thinking about the problem of passing a <tt>Sequence</tt> of values to a <a href="http://in.relation.to/Bloggers/IntroductionToCeylonPart7#H-SequencedParameters" target="" class="regularLink">sequenced parameter</a> in Ceylon (a <q>varargs</q> parameter in Java terminology). Consider:
</p>

<pre class="wikiPreformatted brush:ceylon">void print(Object... objects) { ... }</pre>


<pre class="wikiPreformatted brush:ceylon">String[] words = {"hello", "world"};
print(words);   //what does this do?</pre>


<p class="wikiPara">
Does the second line mean that we're passing a single <tt>Sequence&lt;String&gt;</tt> to <tt>print()</tt>, or two <tt>String</tt>s? Java behaves very strangely in this situation:
</p>

<pre class="wikiPreformatted brush:java">//Java:
print(new String[]{"hello", "world"}); //passes two Strings with a compiler warning asking for an explicit cast to Object[]
print(new Object[]{"hello", "world"}); //passes two Objects with no compiler warning
print(new String[]{"hello", "world"}, new String[]{"hello", "world"}); //passes two String[] arrays as varargs!</pre>


<p class="wikiPara">
Ugh!
</p>

<p class="wikiPara">
Things gets even a little more complicated when you have a generic method like this:
</p>

<pre class="wikiPreformatted brush:ceylon">T? first&lt;T&gt;(T... objects) { ... }</pre>


<pre class="wikiPreformatted brush:ceylon">String[] words = {"hello", "world"};
first(words);    //what type should be inferred for T?</pre>


<p class="wikiPara">
This really starts to screw up my beautiful clean type argument inference algorithm! Which is why this issue is coming up now - it's a corner case that I only noticed once I actually implemented generic type argument inference in the type analyzer. 
</p>

<p class="wikiPara">
So I think we need to make you explicitly specify what you mean when you pass a sequence of values to a sequenced parameter. I have a couple of ideas about how to do this.
</p>

<h2 class="wikiHeadline2" id="H-Solution1"><a href="/2011/07/13/sequences-and-sequenced-parameters#H-Solution1">Solution 1</a></h2>

<p class="wikiPara">
First solution, kinda indirectly inspired by groovy, would be a special syntax in the positional parameter method invocation protocol.
</p>

<pre class="wikiPreformatted brush:ceylon">String[] words = {"hello", "world"};

print(words);      //pass a single String[]
print(words...);   //pass two Strings

String[]? words2 = first(words);   //infers T = String[];
String? word = first(words...);    //infers T = String</pre>


<p class="wikiPara">
I think this reads fairly naturally. The downside is it's a special-purpose kind of punctuation that needs to be specially explained in the specification.
</p>

<h2 class="wikiHeadline2" id="H-Solution2"><a href="/2011/07/13/sequences-and-sequenced-parameters#H-Solution2">Solution 2</a></h2>

<p class="wikiPara">
Second solution is to introduce a special type (a subtype of <tt>Sequence</tt>) to represent a package of sequenced arguments. Call it <tt>SequencedArguments</tt>. Then, with a little helper method <tt>spread()</tt> that wraps up a <tt>Sequence</tt> as a <tt>SequencedArguments</tt>, the syntax would look like:
</p>

<pre class="wikiPreformatted brush:ceylon">String[] words = {"hello", "world"};

print(words);           //compiler automatically produces a SequencedArguments&lt;String[]&gt;
print(spread(words)));  //explicitly pass a SequencedArguments&lt;String&gt;

String[]? words2 = first(spread(words));    //infers T = String[];
String? word = first(spread(words));        //infers T = String</pre>


<p class="wikiPara">
This is a little more verbose, but reasonable. It also makes the specification easier to write.
</p>

<h2 class="wikiHeadline2" id="H-Solution3"><a href="/2011/07/13/sequences-and-sequenced-parameters#H-Solution3">Solution 3</a></h2>

<p class="wikiPara">
Solutions 1 and 2 can be combined very elegantly. We can define:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> <tt>T...</tt> means <tt>SequencedArguments&lt;T&gt;</tt> for any type <tt>T</tt>
</li>
<li class="wikiUnorderedListItem"> <tt>e...</tt> means <tt>SequencedArguments(e)</tt> for any expression <tt>e</tt>
</li>
</ul>

<p class="wikiPara">
So <tt>T...</tt> is just a type name abbreviation like <tt>T[]</tt> and <tt>T?</tt>, and <tt>e...</tt> is just an operator expression. We end up with exactly the same syntax as Solution 1, but with the semantics of Solution 2.
</p>

<p class="wikiPara">
I think this works out, and is very much in the spirit of the language. On the other hand, if <tt>T...</tt> is just an ordinary type declaration, I don't know how we can go about enforcing that a sequenced parameter must be the last parameter in a parameter list. I kinda like the fact that this is an error:
</p>

<p class="wikiPara">
 </p>
<pre class="wikiPreformatted brush:ceylon">void print(Object... objects, OutputStream stream) { ... } //compile error?</pre>



<p class="wikiPara">
WDYT? Does <tt>print(words...)</tt> read well to you guys, or does it feel arbitrary?
</p>

<h2 class="wikiHeadline2" id="H-PS"><a href="/2011/07/13/sequences-and-sequenced-parameters#H-PS">P.S.</a></h2>

<p class="wikiPara">
Let's not confuse this too much with the idea of applying an operation to a tuple of arguments like what you can do in functional languages and dynamic languages. This is superficially similar, but not quite the same.
</p>

<h2 class="wikiHeadline2" id="H-UPDATE"><a href="/2011/07/13/sequences-and-sequenced-parameters#H-UPDATE">UPDATE</a></h2>

<p class="wikiPara">
A reasonable syntactic variation that perhaps reads somewhat better would use <tt>all</tt> as a keyword:
</p>

<pre class="wikiPreformatted brush:ceylon">void print(Object all objects) { ... }</pre>


<pre class="wikiPreformatted brush:ceylon">print(words);       //pass a single String[]
print(all words);   //pass two Strings</pre>


<p class="wikiPara">
I could probably get into this if I didn't just hate the idea of keywordizing the very useful word <q>all</q>.</p>
</div>

