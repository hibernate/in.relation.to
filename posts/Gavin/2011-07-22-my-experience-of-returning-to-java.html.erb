---
title: "My experience of returning to Java"
author: "Gavin King"
blogger_name: "Gavin"
creation_date: "22-07-2011"
original_tags: [Ceylon]
tags: [Ceylon]

relative_url: /2011/07/22/my-experience-of-returning-to-java
slug: my-experience-of-returning-to-java
lace: http://in.relation.to/21294.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2011/07/22/my-experience-of-returning-to-java
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
So my recent return to writing code in Java has been interesting. Most of my Java programming experience has been in web apps, where there is a lot of UI/declarative code, and state-holding classes, or in framework development where I need a lot of interception and reflective code, and in those domains I have <i class="wikiEmphasis">often</i> found that Java gets in the way. But now I'm writing a compiler (well, a type checker/analyzer to be precise), and I don't have much use for declarative code, interception, or reflection. And there is a lot more code that <q>does stuff</q> rather than represents state or data. Java is honestly a quite different experience in this domain. My overall reaction is that Java is simply very reasonable and non-annoying for this kind of work. It just doesn't get in my way much. And in an IDE like Eclipse, Java's static typing saves me <i class="wikiEmphasis">enormous</i> gobs of time.
</p>

<p class="wikiPara">
Nevertheless, there are definitely some moments where I find myself wishing I had Ceylon already. Here are the things I really miss:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> Typesafe <tt>null</tt>. One of the things about a compiler is that it needs to be able to accept input that is partly rubbish and partly meaningful and just keep going and do the best it can with what it has. That means that there are a <i class="wikiEmphasis">lot</i> of null checks in my code, and, frankly, catching all the places an NPE could occur is very tough work. I wish the <a href="http://in.relation.to/Bloggers/IntroductionToCeylonPart1#H-DealingWithObjectsThatArentThere" target="" class="regularLink">compiler would help me here</a>.</li>
<li class="wikiUnorderedListItem"> Algebraic types. There's lots of <tt>instanceof</tt> in my code. Indeed, the whole thing is a bunch of tree <tt>Visitor</tt>s. <a href="http://in.relation.to/Bloggers/IntroductionToCeylonPart5#H-EnumeratedSubtypes" target="" class="regularLink">Algebraic types</a>, <a href="http://in.relation.to/Bloggers/IntroductionToCeylonPart5#H-NarrowingTheTypeOfAnObjectReference" target="" class="regularLink">typesafe narrowing</a>, and <a href="http://in.relation.to/Bloggers/IntroductionToCeylonPart5#H-Visitors" target="" class="regularLink">built-in support for the visitor pattern</a> would help enormously.</li>
<li class="wikiUnorderedListItem"> Mixin inheritance. The metamodel classes which represent Ceylon types would turn out much cleaner if I had <a href="http://in.relation.to/Bloggers/IntroductionToCeylonPart3#H-InterfacesAndQmixinqInheritance" target="" class="regularLink">concrete methods on interfaces</a>. As it is, I'm stuck with some code duplication.</li>
</ul>

<p class="wikiPara">
These are the three things I really miss. Sure, there are other bits of Java that I don't love, but for now they're just not bothering me much.</p>
</div>

