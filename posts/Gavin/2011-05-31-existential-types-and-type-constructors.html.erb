---
title: "Existential types and type constructors"
author: "Gavin King"
blogger_name: "Gavin"
creation_date: "31-05-2011"
original_tags: [Ceylon]
tags: [Ceylon]

relative_url: /2011/05/31/existential-types-and-type-constructors
slug: existential-types-and-type-constructors
lace: http://in.relation.to/20609.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2011/05/31/existential-types-and-type-constructors
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
I just ran across a great usecase for existential types (like Java's wildcard types, which Ceylon <a href="http://in.relation.to/Bloggers/IntroductionToCeylonPart6" target="" class="regularLink">doesn't and won't support</a>). It's a little involved, and revolves around an advanced feature of Ceylon that other languages don't have: the typesafe metamodel. But let me see if I can get the idea across.
</p>

<h1 class="wikiHeadline1" id="H-MetamodelReferencesAsIndirection"><a href="/2011/05/31/existential-types-and-type-constructors#H-MetamodelReferencesAsIndirection">Metamodel references as indirection</a></h1>

<p class="wikiPara">
In Ceylon, a metamodel reference like <tt>Entry&lt;String,File&gt;</tt> has a well defined type which captures the signature of the operation the declaration defines — in this case, instantiation of the <tt>Entry</tt> class. We can write:
</p>

<pre class="wikiPreformatted brush: ceylon">ConcreteClass&lt;Entry&lt;String,File&gt;,String,File&gt; stringFileEntryClass = Entry&lt;String,File&gt;;</pre>


<p class="wikiPara">
It just so happens that the metamodel type <tt>ConcreteClass&lt;T,P...&gt;</tt> is defined to extend <a href="http://in.relation.to/Bloggers/IntroductionToCeylonPart8#H-RepresentingTheTypeOfAFunction" target="" class="regularLink">the function type</a> <tt>Callable&lt;T,P...&gt;</tt>, so we can even write stuff like this:
</p>

<pre class="wikiPreformatted brush: ceylon">Entry&lt;String,File&gt; stringFileEntryClass(String s, File f) = Entry&lt;String,File&gt;;
...
Entry&lt;String,File&gt; entry = stringFileEntryClass("out", File(outputFilePath));</pre>


<p class="wikiPara">
Which is just an indirected way of writing the following:
</p>

<pre class="wikiPreformatted brush: ceylon">Entry&lt;String,File&gt; entry = Entry("out", File(outputFilePath));</pre>


<p class="wikiPara">
What's going on here is that <tt>stringFileEntryClass()</tt> is an alias for the first-class function reference <tt>Entry&lt;String,File&gt;</tt> which just instantiates an <tt>Entry&lt;String,File&gt;</tt>.
</p>

<p class="wikiPara">
Nice, huh? This is what we're talking about when we say Ceylon is a <i class="wikiEmphasis">higher-order</i> language. We can use a reference to any named declaration as first-class value, with a correctly-defined type.
</p>

<h1 class="wikiHeadline1" id="H-ReferencesToTypeConstructors"><a href="/2011/05/31/existential-types-and-type-constructors#H-ReferencesToTypeConstructors">References to type constructors</a></h1>

<p class="wikiPara">
But what if we want to use <tt>Entry</tt> as a first-class value without nailing down concrete arguments to its type parameters. Well, <tt>Entry</tt> by itself isn't a type, it's a <i class="wikiEmphasis">type constructor</i> — a function that accepts two types as arguments and produces a type — or in more pretentious terminology that I personally prefer to avoid, a <i class="wikiEmphasis">higher kind</i>.
</p>

<p class="wikiPara">
So, the question is, if we have a metamodel object for a type constructor, can we correctly represent its type within Ceylon's type system? Well, unfortunately not, because Ceylon doesn't have existential types. In an imaginary language Existential Ceylon, this is how the type of <tt>Entry</tt> would be specified:
</p>

<pre class="wikiPreformatted brush: ceylon">ConcreteClassConstructor&lt;Entry&lt;U,V&gt;,U,V&gt; entryClassConstructor 
        given U satisfies Equality 
        given V satisfies Equality
    = Entry;</pre>


<p class="wikiPara">
And here's the kind of thing we could do with it:
</p>

<pre class="wikiPreformatted brush: ceylon">Entry&lt;U,V&gt; entryClassConstructor&lt;U,V&gt;(Type&lt;U&gt; ut, Type&lt;V&gt; ut)(U u, V v) 
        given U satisfies Equality 
        given V satisfies Equality
    = Entry;
...
Entry&lt;String,File&gt; stringFileEntryClass(String s, File f) = entryClassConstructor(String,File);
...
Entry&lt;String,File&gt; entry = stringFileEntryClass("out", File(outputFilePath));</pre>


<p class="wikiPara">
i.e. We get an extra additional level of indirection here, letting us pass type arguments as ordinary first-class values. (It's actually pretty incredibly cool that you could even <i class="wikiEmphasis">imagine</i> making this work in Ceylon.)
</p>

<p class="wikiPara">
Unfortunately, in Ceylon we won't be able to write things like this, since we simply can't correctly define the type of the value <tt>Entry</tt> without support for existential types. As ever, language design is all about compromises.
</p>

<h1 class="wikiHeadline1" id="H-ReferencesToOperators"><a href="/2011/05/31/existential-types-and-type-constructors#H-ReferencesToOperators">References to operators</a></h1>

<p class="wikiPara">
There's another situation in which this same limitation arises. Ceylon's operators are defined in terms of methods, in many cases parameterized methods, or methods of parameterized types. For example, the <tt>&lt;</tt> operator is defined in terms of the method <tt>smallerThan()</tt> of <tt>Comparable&lt;T&gt;</tt>. Earlier today I was asking myself if Ceylon should support some syntax like <tt>(&lt;)</tt> (borrowed from OCaml) for references to operators. But I realized that this suffers from the problem described above. The type of <tt>(&lt;)</tt> simply can't be expressed without the use of existential types or some kind of left-to-right type inference, because of the type parameter of <tt>Comparable</tt>. So you'll never be able to write:
</p>

<pre class="wikiPreformatted brush: ceylon">names.sortedBy((&lt;))</pre>


<p class="wikiPara">
in Ceylon. The best you'll be able to do is something like this:
</p>

<pre class="wikiPreformatted brush: ceylon">names.sortedBy(smaller&lt;String&gt;)</pre>


<p class="wikiPara">
UPDATE: Well, actually, there <i class="wikiEmphasis">is</i> a reasonable solution that occurs to me. We're <a href="http://in.relation.to/Bloggers/PluginLiteralFormats#comment20441" target="" class="regularLink">considering</a> supporting a left-to-right type inference for the special case of <a href="/Bloggers/PluginLiteralFormats" target="" class="regularLink">single quoted literals</a>, which would be limited to syntactically occur only in places where left-to-right type inference is possible. So the following syntax would work out, I suppose:
</p>

<pre class="wikiPreformatted brush: ceylon">names.sortedBy('&lt;')</pre>


<h1 class="wikiHeadline1" id="H-IsThisADeeperProblem"><a href="/2011/05/31/existential-types-and-type-constructors#H-IsThisADeeperProblem">Is this a deeper problem?</a></h1>

<p class="wikiPara">
This got me thinking. <i class="wikiEmphasis">Type constructor parametrization</i> (what's often called <q>support for higher kinds</q>) is something we wonder if Ceylon should eventually support. I'm talking about method signatures like the following, where the parameter <tt>M</tt> is not a type parameter that accepts a type, but a <i class="wikiEmphasis">type constructor parameter</i>, that accepts a type constructor:
</p>

<pre class="wikiPreformatted brush: ceylon">M&lt;U&gt; map&lt;M&lt;T&gt;,U,V&gt;(U function(V v), M&lt;V&gt; inputs) 
        given M&lt;T&gt;() satisfies Iterable&lt;T&gt; &amp; Addable&lt;T&gt; {
    variable M&lt;U&gt; outputs := M&lt;U&gt;(); 
    for (V input in inputs) {
        outputs:=ouputs.add(function(input)); 
    }
    return outputs;
}</pre>


<p class="wikiPara">
A question that naturally arises from the above discussion is whether you can even have support for type constructor parametrization at all in a language without existential types.
</p>

<p class="wikiPara">
Well, yes, it seems to me that you can. The reason is that type arguments — and by extension <i class="wikiEmphasis">type constructor arguments</i> — aren't passed as ordinary values, but specified statically in the special type argument list delimited by angle brackets. Ceylon, along other C-like languages, doesn't let you write the following:
</p>

<pre class="wikiPreformatted brush: ceylon">Interface&lt;Sequence&lt;String&gt;&gt; stringSequenceType = Sequence&lt;String&gt;;
Sequence&lt;String&gt; hello = singleton&lt;stringSequenceType&gt;("Hello");  //error: stringSequenceType isn't a legal type argument</pre>


<p class="wikiPara">
So the compiler does not need to be able to assign a Ceylon type to a type constructor argument in order to perform the necessary type checking. At some level, the compiler would need to be able to determine <q>assignability</q> of a type constructor to a type constructor parameter, but it would be able to go outside the bounds of the usual type system for first-class values in order to be able to make this determination. (This is no different from what Java does with type arguments, of course, since types aren't first-class values in Java.) 
</p>

<h1 class="wikiHeadline1" id="H-SomeSpeculation"><a href="/2011/05/31/existential-types-and-type-constructors#H-SomeSpeculation">Some speculation</a></h1>

<p class="wikiPara">
Interestingly, Ceylon probably could have gone down a different path. Rather uniquely, the language has:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> reified generics, and</li>
<li class="wikiUnorderedListItem"> a typesafe metamodel.</li>
</ul>

<p class="wikiPara">
So there's no really strong reason why Ceylon needs to have the special angle-bracket syntax for type arguments. Types <i class="wikiEmphasis">are</i> first-class values in Ceylon. We could in theory just treat type arguments as any other kind of value. It might even wind up actually <i class="wikiEmphasis">simplifying</i> the type checker.
</p>

<p class="wikiPara">
At least now we've discovered one reason for not going down that path. It would mean either:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> abandoning forever the idea of supporting type constructor parameterization, or</li>
<li class="wikiUnorderedListItem"> introducing existential types.</li>
</ul>

<h1 class="wikiHeadline1" id="H-OhAnd"><a href="/2011/05/31/existential-types-and-type-constructors#H-OhAnd">Oh and...</a></h1>

<p class="wikiPara">
.. don't worry if you don't understand this post. Nobody really needs or wants to know what existential types and type constructor parameterization are in order to be able to write a useful program. Which is a little fact that is really important to keep in mind when designing languages. It's better if the conceptual framework of a language stays close enough to the kind of things people want to be thinking about when writing programs in the language.
</p>
</div>

