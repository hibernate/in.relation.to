---
title: "What methods belong on an entity?"
author: "Gavin King"
blogger_name: "Gavin"
creation_date: "09-11-2007"
original_tags: [Persistence]
tags: [Discussion]

relative_url: /2007/11/09/what-methods-belong-on-an-entity
slug: what-methods-belong-on-an-entity
lace: http://in.relation.to/2786.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2007/11/09/what-methods-belong-on-an-entity
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
Kinda tangentially related to <a href="/Bloggers/SilliestPersistencePostEver" target="" class="regularLink">this discussion</a>, I'm often asked whether I believe in <q>rich</q> domain models or <q>anemic</q> domain models. I guess I'm pretty much ignorant as to what these terms really mean, since I've never seen a proper definition of either term.
</p>

<p class="wikiPara">
If by <q>anemic</q> domain model, we mean /never/ writing any business logic on our object model, and if by <q>rich</q> domain model, we mean /writing as much business logic as possible/ on our domain model, then I certainly don't believe in either approach. But these seem to be caricatures; I don't think anyone follows either extreme.
</p>

<p class="wikiPara">
So how do /I/ decide if method that implements business logic might belong on the domain model?
</p>

<p class="wikiPara">
Well, here I'm guided by an understanding that the domain model (entity classes) are /the most reusable/ classes in my codebase. So I don't want to put any logic there that has dependencies to any state or collaborating classes /other than/:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> state held in the domain model (the persistent attributes), and</li>
<li class="wikiUnorderedListItem"> other domain model classes.</li>
</ul>

<p class="wikiPara">
In particular, I would never write code that calls out to external services, or accesses the database, or calls an EJB/Seam/Spring component in my entity class. I want my domain model to be /completely self-contained!/
</p>

<p class="wikiPara">
So anytime you find yourself wishing that entities supported injection, or find yourself writing a JNDI lookup in a method of an entity, please consider that your domain model is no longer self-contained, and will be less reusable in different execution environments.
</p>

<p class="wikiPara">
I'm not saying it's /wrong/ to <q>disobey</q> these <q>rules</q>. There's no right or wrong in design. But I think there's good value having a self-contained domain model, and I've never seen a situation where this idea was impractical.
 </p>
</div>

