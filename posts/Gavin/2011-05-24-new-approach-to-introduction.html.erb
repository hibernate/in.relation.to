---
title: "New approach to introduction"
author: "Gavin King"
blogger_name: "Gavin"
creation_date: "24-05-2011"
original_tags: [Ceylon]
tags: [Ceylon]

relative_url: /2011/05/24/new-approach-to-introduction
slug: new-approach-to-introduction
lace: http://in.relation.to/20349.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2011/05/24/new-approach-to-introduction
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
One of the best features of Ceylon is lexically-scoped <i class="wikiEmphasis">introduction</i>, which we <a href="http://in.relation.to/Bloggers/IntroductionToCeylonPart3#H-Decoration" target="" class="regularLink">discussed here, calling it decoration</a>.
</p>

<p class="wikiPara">
I've recently come to the conclusion that the explicit <tt>decorate</tt> statement is a barrier to modularity, and decided upon a slightly different approach. In this approach, an interface may declare that it <tt>adapts</tt> another type:
</p>

<pre class="wikiPreformatted brush: ceylon">doc "Adaptor that introduces List to Sequence."
see (List,Sequence)
shared interface SequenceList&lt;T&gt; 
        adapts Sequence&lt;T&gt;
        satisfies List&lt;T&gt; {
    
    shared actual default List&lt;T&gt; sortedElements() {
    	//define the operation of List in
    	//terms of operations on Sequence
        return asList(sortSequence(this));
    }
    
    ...
    
}</pre>


<p class="wikiPara">
Then the interface is called an <i class="wikiEmphasis">introduction</i> - or, alternatively, an <i class="wikiEmphasis">adapter</i>, in a nod to the terminology used in the Go4 book. (In that book, a <q>decorator</q> is a slightly different concept.) According to the spec:
</p>

<blockquote class="wikiBlockquote">
The interface may not:

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> declare or inherit a member that refines a member of any adapted type, or</li>
<li class="wikiUnorderedListItem"> declare or inherit a <tt>formal</tt> or non-<tt>default</tt> <tt>actual</tt> member unless the member is inherited from an adapted type.</li>
</ul>


</blockquote>

<p class="wikiPara">
Now, to enable the introduction in a certain compilation unit, all you need to do is <tt>import</tt> it.
</p>

<pre class="wikiPreformatted brush: ceylon">import ceylon.collection { SequenceList }    //import the adapter

String[] cities = { "Melbourne", "Atlanta", "San Francisco", "Guanajuato", "Paris" };
List&lt;String&gt; sortedCities = cities.sortedElements();    //call the adapter</pre>


<p class="wikiPara">
Again, according to the spec:
</p>

<blockquote class="wikiBlockquote">
If, in a certain compilation unit, multiple introductions of a certain adapted type declare or inherit a member that refines a common member of a common supertype then either:

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> there must be a unique member from the set of members, called the most refined member, that refines all the other members, or</li>
<li class="wikiUnorderedListItem"> the adapted type must declare or inherit a member that refines all the members.</li>
</ul>

At runtime, an operation (method invocation, member class instantiation, or attribute evaluation) upon any type that is a subtype of all the adapted types is dispatched according to the following rule:

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> If the runtime type of the instance of the adapted type declares or inherits a member defining the operation, the operation is dispatched to the runtime type of the instance.</li>
<li class="wikiUnorderedListItem"> Otherwise, the operation is dispatched to the introduction that has the most-refined member defining the operation.</li>
</ul>


</blockquote>

<p class="wikiPara">
I think this is a significantly better approach, making introduction much easier to use.
</p>

<p class="wikiPara">
UPDATE: A commenter asks if Ceylon will support C#-style extension methods. No need. Every concrete method of an adapter is an extension method! Indeed, an adapter without a <tt>satisfies</tt> clause is <q>just</q> a package of extension methods and attributes.
</p>
</div>

