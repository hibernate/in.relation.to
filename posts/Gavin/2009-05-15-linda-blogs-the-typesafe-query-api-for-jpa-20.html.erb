---
title: "Linda blogs the typesafe query API for JPA 2.0"
author: "Gavin King"
blogger_name: "Gavin"
creation_date: "15-05-2009"
original_tags: [Criteria Queries,Hibernate,JPA,JPA 2]
tags: [Hibernate ORM,JPA]

relative_url: /2009/05/15/linda-blogs-the-typesafe-query-api-for-jpa-20
slug: linda-blogs-the-typesafe-query-api-for-jpa-20
lace: http://in.relation.to/11427.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2009/05/15/linda-blogs-the-typesafe-query-api-for-jpa-20
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
Linda has written up the <a href="http://blogs.sun.com/ldemichiel/entry/java_persistence_2_0_proposed" target="" class="regularLink">new typesafe query API</a>. I previously blogged the reasoning behind this stuff <a href="/Bloggers/ATypesafeCriteriaQueryAPIForJPA" target="" class="regularLink">here</a> and <a href="/Bloggers/Java6CompilerPluginsAndTypesafeCriteriaQueries" target="" class="regularLink">here</a>. 
</p>

<p class="wikiPara">
An open issue that Linda doesn't mention is query execution. I'm trying to convince the rest of the group that we should carry the typesafety all the way through to the query result set. Here's what I wrote to the group a few weeks ago:
</p>

<blockquote>
Folks, I figured out a refactoring that gives us a way to do typesafe
result sets, avoiding the use of <tt>Result</tt>. In this new approach,
<tt>CriteriaQuery</tt> and <tt>Query</tt> would both have a type parameter.

You could write code like this, if you have a single selection:

<pre class="wikiPreformatted">  CriteriaQuery&lt;Order&gt; q = qb.create(Order.class);
  Root&lt;Order&gt; order = q.from(Order.class);
  q.select(order);

  Query&lt;Order&gt; eq = em.createQuery(q);
  List&lt;Order&gt; res= eq.getTypedResultList();</pre>


like this, if you have multiple selections and an object to wrap them in:

<pre class="wikiPreformatted">  CriteriaQuery&lt;OrderProduct&gt; q = qb.create(OrderProduct.class);
  Root&lt;Order&gt; order = q.from(Order.class);
  Join&lt;Item, Product&gt; product = order.join(Order_.items)
                                     .join(Item_.product);
  q.select( qb.construct(OrderProduct.class, order, product) );

  Query&lt;OrderProduct&gt; eq = em.createQuery(q);
  List&lt;OrderProduct&gt; res= eq.getTypedResultList();</pre>


Or, if you don't have a nice wrapper class like OrderProduct, you can
fall back to use Result:

<pre class="wikiPreformatted">  CriteriaQuery&lt;Result&gt; q = qb.create();
  Root&lt;Order&gt; order = q.from(Order.class);
  Join&lt;Item, Product&gt; product = order.join(Order_.items)
                                     .join(Item_.product);
  q.select( qb.result(order, product) );

  Query&lt;Result&gt; eq = em.createQuery(q);
  List&lt;Result&gt; res= eq.getTypedResultList();</pre>


This change let's people directly get typesafe lists of entities or
wrappers, which is something that <i class="wikiEmphasis">many</i> people have asked for!
</blockquote>

<p class="wikiPara">
The big point about this API is that I can't write a query which selects <tt>Foo</tt> and then try to put it in a <tt>List&lt;Bar&gt;</tt>. It's truly typesafe, end-to-end.
</p>

<p class="wikiPara">
The sticking point with this is that <tt>javax.persistence.Query</tt> does not currently have the needed type parameter, and there are millions of queries written to the JPA 1.0 APIs which would suddenly spit compiler warnings if we added a type parameter. So we might have to introduce a new interface like <tt>TypesafeQuery</tt> or something.</p>
</div>

