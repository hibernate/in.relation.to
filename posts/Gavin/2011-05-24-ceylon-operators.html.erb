---
title: "Ceylon operators"
author: "Gavin King"
blogger_name: "Gavin"
creation_date: "24-05-2011"
original_tags: [Ceylon]
tags: [Ceylon]

relative_url: /2011/05/24/ceylon-operators
slug: ceylon-operators
lace: http://in.relation.to/20329.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2011/05/24/ceylon-operators
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
We've already discussed the <a href="http://in.relation.to/Bloggers/IntroductionToCeylonPart10#H-OperatorPolymorphism" target="" class="regularLink">theory behind operators in Ceylon</a>, but I missed out on giving you guys an actual list of them. In compiling this list of operators, we've tried to select operators that make code easier to read instead of harder to read. (Ceylon is supposed to be a language that eschews ASCII-art.) There are a couple of operators in the list that I have doubts about, especially the <a href="http://in.relation.to/Bloggers/IntroductionToCeylonPart9#comment19770" target="" class="regularLink">format operator</a>, <tt>$</tt>, that is used to format an object to a string.
</p>

<h1 class="wikiHeadline1" id="H-OperatorPrecedence"><a href="/2011/05/24/ceylon-operators#H-OperatorPrecedence">Operator precedence</a></h1>

<p class="wikiPara">
Ceylon has more operators than Java, and they're somewhat more flexible, due to <a href="http://in.relation.to/Bloggers/IntroductionToCeylonPart10#H-OperatorPolymorphism" target="" class="regularLink">operator polymorphism</a>, so we decided to categorize the operators into <q>layers</q>, to make it easier to come up with a consistent set of precedences. According to the language spec:
</p>

<blockquote class="wikiBlockquote">
There are 15 distinct operator precedence levels, but these levels are arranged into layers in order to make them easier to predict.

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> Operators in layer 1 produce, transform, and combine values.</li>
<li class="wikiUnorderedListItem"> Operators in layer 2 compare or predicate values, producing a <tt>Boolean</tt> result.</li>
<li class="wikiUnorderedListItem"> Operators in layer 3 are logical operators that operate upon <tt>Boolean</tt> arguments to produce a <tt>Boolean</tt> value.</li>
<li class="wikiUnorderedListItem"> Operators in layer 4 perform assignment.</li>
</ul>

Within each layer, postfix operators have a higher precedence than prefix operators, and prefix operators have a higher precedence than binary operators.

There is a single exception to this principal: the binary exponentiation operator <tt>**</tt> has a higher precedence than the prefix operators <tt>+</tt> and <tt>-</tt>. The reason for this is that the following expressions should be equivalent:

<pre class="wikiPreformatted">-x**2	//means -(x**2)</pre>


<pre class="wikiPreformatted">0 - x**2	//means 0 - (x**2)</pre>



</blockquote>

<p class="wikiPara">
Of course, the traditional rules that:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem">  <q>multiplicative</q> operators like <tt>*</tt>, <tt>/</tt>, and <tt>%</tt> have a higher precedence than <q>additive</q> operators like <tt>+</tt> and <tt>-</tt>, and</li>
<li class="wikiUnorderedListItem"> <q>conjunctive</q> operators like <tt>&amp;&amp;</tt> and <tt>&amp;</tt> have a higher precedence than <q>disjunctive</q> operators like <tt>||</tt>, <tt>|</tt> and <tt>^</tt>
</li>
</ul>

<p class="wikiPara">
are also respected.
</p>

<p class="wikiPara">
In most cases, these rules result in the same relative operator precedences that you find in C, Java, and C#. But there is one exception to be aware of. The logical not operator <tt>!</tt> has a very high precedence in C, but a very low precedence in Ceylon (since it belongs to layer 3).
</p>

<p class="wikiPara">
Now, finally, here's the list, omitting compound assignment operators like <tt>+=</tt>. (This list is not categorized in order of precedence.)
</p>

<h2 class="wikiHeadline2" id="H-BasicInvocationAndAssignmentOperators"><a href="/2011/05/24/ceylon-operators#H-BasicInvocationAndAssignmentOperators">Basic invocation and assignment operators</a></h2>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> Select: <tt>lhs.member</tt>
</li>
<li class="wikiUnorderedListItem"> Invoke: <tt>lhs(x,y,z)</tt>, or <tt>lhs { x=x; y=y; z=z; }</tt>
</li>
<li class="wikiUnorderedListItem"> Assign: <tt>lhs := rhs</tt>
</li>
<li class="wikiUnorderedListItem"> Format: <tt>$rhs</tt>
</li>
</ul>

<h2 class="wikiHeadline2" id="H-EqualityAndComparisonOperators"><a href="/2011/05/24/ceylon-operators#H-EqualityAndComparisonOperators">Equality and comparison operators</a></h2>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> Identical: <tt>lhs === rhs</tt>
</li>
<li class="wikiUnorderedListItem"> Equals: <tt>lhs == rhs</tt>
</li>
<li class="wikiUnorderedListItem"> Not equals: <tt>lhs != rhs</tt>
</li>
<li class="wikiUnorderedListItem"> Compare: <tt>lhs &lt;=&gt; rhs</tt>
</li>
<li class="wikiUnorderedListItem"> Smaller: <tt>lhs &lt; rhs</tt>
</li>
<li class="wikiUnorderedListItem"> Larger: <tt>lhs &gt; rhs</tt>
</li>
<li class="wikiUnorderedListItem"> Small as: <tt>lhs &lt;= rhs</tt>
</li>
<li class="wikiUnorderedListItem"> Large as: <tt>lhs &gt;= rhs</tt>
</li>
<li class="wikiUnorderedListItem"> In: <tt>lhs in rhs</tt>
</li>
<li class="wikiUnorderedListItem"> Is: <tt>lhs is Rhs</tt>
</li>
<li class="wikiUnorderedListItem"> Satisfies: <tt>Lhs satisfies Rhs</tt>
</li>
</ul>

<h2 class="wikiHeadline2" id="H-LogicalOperators"><a href="/2011/05/24/ceylon-operators#H-LogicalOperators">Logical operators</a></h2>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> Not: <tt>!rhs</tt>
</li>
<li class="wikiUnorderedListItem"> Conditional or: <tt>lhs||rhs</tt>
</li>
<li class="wikiUnorderedListItem"> Conditional and: <tt>lhs&amp;&amp;rhs</tt>
</li>
</ul>

<h2 class="wikiHeadline2" id="H-OperatorsForHandlingNullValues"><a href="/2011/05/24/ceylon-operators#H-OperatorsForHandlingNullValues">Operators for handling null values</a></h2>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> Exists: <tt>lhs exists</tt>
</li>
<li class="wikiUnorderedListItem"> Nonempty: <tt>lhs nonempty</tt>
</li>
<li class="wikiUnorderedListItem"> Default: <tt>lhs ? rhs</tt>
</li>
<li class="wikiUnorderedListItem"> Nullsafe select: <tt>lhs?.member</tt>
</li>
</ul>

<h2 class="wikiHeadline2" id="H-CorrespondenceAndSequenceOperators"><a href="/2011/05/24/ceylon-operators#H-CorrespondenceAndSequenceOperators">Correspondence and sequence operators</a></h2>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> Lookup: <tt>lhs[index]</tt>
</li>
<li class="wikiUnorderedListItem"> Nullsafe lookup: <tt>lhs?[index]</tt>
</li>
<li class="wikiUnorderedListItem"> Subrange: <tt>lhs[x..y]</tt>
</li>
<li class="wikiUnorderedListItem"> Upper range: <tt>lhs[x...]</tt>
</li>
<li class="wikiUnorderedListItem"> Spread member: <tt>lhs[].member</tt>
</li>
</ul>

<h2 class="wikiHeadline2" id="H-OperatorsForCreatingObjects"><a href="/2011/05/24/ceylon-operators#H-OperatorsForCreatingObjects">Operators for creating objects</a></h2>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> Range: <tt>lhs .. rhs</tt>
</li>
<li class="wikiUnorderedListItem"> Entry: <tt>lhs -&gt; rhs</tt>
</li>
</ul>

<h2 class="wikiHeadline2" id="H-ArithmeticOperators"><a href="/2011/05/24/ceylon-operators#H-ArithmeticOperators">Arithmetic operators</a></h2>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> Successor: <tt>++rhs</tt>
</li>
<li class="wikiUnorderedListItem"> Predecessor: <tt>--rhs</tt>
</li>
<li class="wikiUnorderedListItem"> Increment: <tt>lhs++</tt>
</li>
<li class="wikiUnorderedListItem"> Decrement: <tt>lhs--</tt>
</li>
<li class="wikiUnorderedListItem"> Positive: <tt>+rhs</tt>
</li>
<li class="wikiUnorderedListItem"> Negative: <tt>-rhs</tt>
</li>
<li class="wikiUnorderedListItem"> Sum: <tt>lhs + rhs</tt>
</li>
<li class="wikiUnorderedListItem"> Difference: <tt>lhs - rhs</tt>
</li>
<li class="wikiUnorderedListItem"> Product: <tt>lhs * rhs</tt>
</li>
<li class="wikiUnorderedListItem"> Quotient: <tt>lhs / rhs</tt>
</li>
<li class="wikiUnorderedListItem"> Remainder: <tt>lhs % rhs</tt>
</li>
<li class="wikiUnorderedListItem"> Power: <tt>lhs ** rhs</tt>
</li>
</ul>

<h2 class="wikiHeadline2" id="H-SlotwiseOperators"><a href="/2011/05/24/ceylon-operators#H-SlotwiseOperators">Slotwise operators</a></h2>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> Complement: <tt>~rhs</tt>
</li>
<li class="wikiUnorderedListItem"> Or: <tt>lhs | rhs</tt>
</li>
<li class="wikiUnorderedListItem"> And: <tt>lhs &amp; rhs</tt>
</li>
<li class="wikiUnorderedListItem"> Exclusive or: <tt>lhs ^ rhs</tt>
</li>
<li class="wikiUnorderedListItem"> Complement in: <tt>lhs ~ rhs</tt>
</li>
</ul>

<p class="wikiPara">
Note that the slotwise operators apply to <tt>Set</tt>s as well as binary strings, as <a href="http://in.relation.to/Bloggers/IntroductionToCeylonPart10#H-OperatorPolymorphism" target="" class="regularLink">briefly discussed here</a>. So set union is written <tt>U|V</tt>, set intersection <tt>U&amp;V</tt>, and set complement <tt>U~V</tt>.
</p>
</div>

