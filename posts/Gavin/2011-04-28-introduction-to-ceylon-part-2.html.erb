---
title: "Introduction to Ceylon Part 2"
author: "Gavin King"
blogger_name: "Gavin"
creation_date: "28-04-2011"
original_tags: [Ceylon,Introduction to Ceylon]
tags: [Ceylon]

relative_url: /2011/04/28/introduction-to-ceylon-part-2
slug: introduction-to-ceylon-part-2
lace: http://in.relation.to/19556.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2011/04/28/introduction-to-ceylon-part-2
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
<i class="wikiEmphasis">This is the second installment in a <a href="/Tutorials/IntroductionToCeylon" target="" class="regularLink">series of articles</a> introducing the Ceylon language. Note that some features of the language may change before the final release.</i>
</p>

<h1 class="wikiHeadline1" id="H-CreatingYourOwnClasses"><a href="/2011/04/28/introduction-to-ceylon-part-2#H-CreatingYourOwnClasses">Creating your own classes</a></h1>

<p class="wikiPara">
Ceylon is an object oriented language, so we usually write most of our code in <i class="wikiEmphasis">classes</i>. A class is a type that packages:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> operations — called methods, </li>
<li class="wikiUnorderedListItem"> state — held by attributes, </li>
<li class="wikiUnorderedListItem"> logic to initialize the state when the object is first created, and, </li>
<li class="wikiUnorderedListItem"> sometimes, other nested types.</li>
</ul>

<p class="wikiPara">
Types (interfaces, classes, and type parameters) have names that begin with uppercase letters. Members (methods and attributes) and locals have names that begin with lowercase letters. This is the rule you're used to from Java. Unlike Java, the Ceylon compiler enforces these rules. If you try to write <tt>class hello</tt> or <tt>String Name</tt>, you'll get a compilation error.
</p>

<p class="wikiPara">
Our first version of the <tt>Hello</tt> class has a single attribute and a single method:
</p>

<pre class="wikiPreformatted brush:ceylon">doc "A personalized greeting" 
class Hello(String? name) {
	
    doc "The greeting" 
    shared String greeting; 
    if (exists name) {
        greeting = "Hello, " name "!";
    } 
    else {
        greeting = "Hello, World!";
    }
    
    doc "Print the greeting" 
    shared void say(OutputStream stream) {
        stream.writeLine(greeting);
    }
    
}</pre>


<p class="wikiPara">
To understand this code completely, we're going to need to first explore Ceylon's approach to program element accessibility — the <tt>shared</tt> annotation above, then meet the concept of an attribute, and finally discuss how object initialization works in Ceylon.
</p>

<h1 class="wikiHeadline1" id="H-HidingImplementationDetails"><a href="/2011/04/28/introduction-to-ceylon-part-2#H-HidingImplementationDetails">Hiding implementation details</a></h1>

<p class="wikiPara">
In Java and C#, a class controls the accessibility of its members using visibility modifier annotations, allowing the class to hide its internal implementation from other code. The visibility modifiers select between pre-defined, definite visibility levels like <tt>public</tt>, <tt>protected</tt>, package private, and <tt>private</tt>. Ceylon provides just one annotation for access control. The key difference is that Ceylon's <tt>shared</tt> annotation does not represent a single definite scope. Rather, its meaning is contextual, relative to the program element at which it appears. The <tt>shared</tt> annotation is in some cases more flexible, in certain cases less flexible, but almost always simpler and easier to use than the approach taken by Java and C#. And it's a far better fit to a language like Ceylon with a regular, recursive block structure.
</p>

<p class="wikiPara">
Members of a class are hidden from code outside the body of the class by default — only members explicitly annotated <tt>shared</tt> are visible to other toplevel types or methods, other compilation units, other packages, or other modules. A <tt>shared</tt> member is visible to any code to which the class itself is visible.
</p>

<p class="wikiPara">
And, of course, a class itself may be hidden from other code. By default, a toplevel class is hidden from code outside the package in which the class is defined — only toplevel classes explicitly annotated <tt>shared</tt> are visible to other packages or modules. A <tt>shared</tt> toplevel class is visible to any code to which the package containing the class is visible.
</p>

<p class="wikiPara">
Finally, a package may be hidden from packages in other modules. In fact, packages are hidden from code outside the module to which the package belongs by default — only explicitly shared packages are visible to other modules.
</p>

<p class="wikiPara">
It's not possible to create a shared toplevel class with package-private members. Members of a shared toplevel class must be either <tt>shared</tt> — in which case they're visible outside the package containing the class, or un-<tt>shared</tt> — in which case they're only visible to the class itself. Package-private functionality <i class="wikiEmphasis">must</i> be defined in un-<tt>shared</tt> (package-private) toplevel classes or interfaces. Likewise, a <tt>shared</tt> package can't contain a module-private toplevel class. Module-private toplevel classes must belong to unshared (module-private) packages.
</p>

<p class="wikiPara">
Ceylon doesn't have anything like Java's <tt>protected</tt>. The purpose of visibility rules and access control is to limit dependencies between code that is developed by different teams, maintained by different developers, or has different release cycles. From a software engineering point of view, any code element exposed to a different package or module is a dependency that must be managed. And a dependency is a dependency. It's not any less of a dependency if the code to which the program element is exposed is in a subclass of the type which contains the program element!
</p>

<h1 class="wikiHeadline1" id="H-AbstractingStateUsingAttributes"><a href="/2011/04/28/introduction-to-ceylon-part-2#H-AbstractingStateUsingAttributes">Abstracting state using attributes</a></h1>

<p class="wikiPara">
The attribute <tt>greeting</tt> is a <i class="wikiEmphasis">simple attribute</i>, the closest thing Ceylon has to a Java field. Its value is specified immediately after it is declared. Usually we can declare and specify the value of an attribute in a single line of code.
</p>

<pre class="wikiPreformatted brush:ceylon">shared String greeting = "Hello, " name "!";</pre>


<pre class="wikiPreformatted brush:ceylon">shared Natural months = years * 12;</pre>


<p class="wikiPara">
The Ceylon compiler forces us to specify a value of any simple attribute or local before making use of the simple attribute or local in an expression. Ceylon will never automatically initialize an attribute to any kind of default value or <a href="http://in.relation.to/Bloggers/IntroductionToCeylonPart11#H-DefiniteAssignmentAndDefiniteInitialization" target="" class="regularLink">let code observe the value of an uninitialized attribute</a>. This code results in an error at compile time:
</p>

<pre class="wikiPreformatted brush:ceylon">Natural count;
shared void inc() {
    count++;   //compile error
}</pre>


<p class="wikiPara">
An attribute is a bit different to a Java field. It's an abstraction of the notion of a value. Some attributes are simple value holders like the one we've just seen; others are more like a getter method, or, sometimes, <a href="http://in.relation.to/Bloggers/IntroductionToCeylonPart7#H-Setters" target="" class="regularLink">like a getter and setter method pair</a>. Like methods, attributes are polymorphic—an attribute definition may be <a href="http://in.relation.to/Bloggers/IntroductionToCeylonPart3#H-InheritanceAndRefinement" target="" class="regularLink">refined</a> (overridden) by a subclass.
</p>

<p class="wikiPara">
We could rewrite the attribute <tt>greeting</tt> as a getter:
</p>

<pre class="wikiPreformatted brush:ceylon">shared String greeting { 
    if (exists name) {
        return "Hello, " name "!";
    } 
    else {
        return "Hello, World!";
    }
}</pre>


<p class="wikiPara">
Notice that the syntax of a getter declaration looks a lot like a method declaration with no parameter list.
</p>

<p class="wikiPara">
Clients of a class never need to know whether the attribute they access holds state directly, or is a getter that derives its value from other attributes of the same object or other objects. In Ceylon, you don't need to go around declaring all your attributes private and wrapping them in getter and setter methods. Get out of that habit right now!
</p>

<h1 class="wikiHeadline1" id="H-UnderstandingObjectInitialization"><a href="/2011/04/28/introduction-to-ceylon-part-2#H-UnderstandingObjectInitialization">Understanding object initialization</a></h1>

<p class="wikiPara">
In Ceylon, classes don't have constructors. Instead:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> the parameters needed to instantiate the class — the <i class="wikiEmphasis">initializer parameters</i> — are declared directly after the name of the class, and</li>
<li class="wikiUnorderedListItem"> code to initialize the new instance of the class — the <i class="wikiEmphasis">class initializer</i> — goes directly in the <a href="http://in.relation.to/Bloggers/IntroductionToCeylonPart11#H-ClassBodies" target="" class="regularLink">body of the class</a>.</li>
</ul>

<p class="wikiPara">
Take a close look at the following code fragment:
</p>

<pre class="wikiPreformatted brush:ceylon">String greeting; 
if (exists name) {
    greeting = "Hello, " name "!";
}
else {
    greeting = "Hello, World!";
}</pre>


<p class="wikiPara">
In Ceylon, this code could appear in the body of a class, where it would be declaring and specifying the value of an immutable attribute, or it could appear in the body of a method definition, where it would be declaring and specifying the value of an immutable local variable. That's not the case in Java, where initialization of fields looks very different to initialization of local variables! Thus the syntax of Ceylon is more <i class="wikiEmphasis">regular</i> than Java. Regularity makes a language easy to learn and easy to refactor.
</p>

<p class="wikiPara">
Now let's turn our attention to a different possible implementation of greeting:
</p>

<pre class="wikiPreformatted brush:ceylon">class Hello(String? name) {
    shared String greeting { 
        if (exists name) {
            return "Hello, " name "!";
        } 
        else {
            return "Hello, World!";
        }
    } 
    ...

}</pre>



<p class="wikiPara">
You might be wondering why we're allowed to use the parameter <tt>name</tt> inside the body of the getter of <tt>greeting</tt>. Doesn't the parameter go out of scope as soon as the initializer terminates? Well, that's true, but Ceylon is a language with a very strict block structure, and the scope of declarations is governed by that block structure. In this case, the scope of <tt>name</tt> is the whole body of the class, and the definition of <tt>greeting</tt> sits inside that scope, so <tt>greeting</tt> is permitted to access <tt>name</tt>.
</p>

<p class="wikiPara">
We've just met our first example of <i class="wikiEmphasis">closure</i>. We say that method and attribute definitions receive a closure of values defined in the class body to which they belong. That's just a fancy way of obfuscating the idea that <tt>greeting</tt> holds onto the value of <tt>name</tt>, even after the initializer completes.
</p>

<p class="wikiPara">
In fact, one way to look at the whole notion of a class in Ceylon is to think of it as a function which returns a closure of its own local variables. This helps explain why the syntax of class declarations is so similar to the syntax of method declarations (a class declaration looks a lot like a method declaration where the return type and the name of the method are the same).
</p>

<h1 class="wikiHeadline1" id="H-InstantiatingClassesAndOverloadingTheirInitializerParameters"><a href="/2011/04/28/introduction-to-ceylon-part-2#H-InstantiatingClassesAndOverloadingTheirInitializerParameters">Instantiating classes and overloading their initializer parameters</a></h1>

<p class="wikiPara">
Oops, I got so excited about attributes and closure and null value handling that I forgot to show you the code that uses <tt>Hello</tt>!
</p>

<pre class="wikiPreformatted brush:ceylon">doc "Print a personalized greeting" 
void hello() {
    Hello(process.args.first).say(process.output);
}</pre>


<p class="wikiPara">
Our rewritten <tt>hello()</tt> method just creates a new instance of <tt>Hello</tt>, and invokes <tt>say()</tt>. Ceylon doesn't need a <tt>new</tt> keyword to know when you're instantiating a class. No, we don't know why Java needs it. You'll have to ask James.
</p>

<p class="wikiPara">
I suppose you're worried that if Ceylon classes don't have constructors, then they also can't have multiple constructors. Does that mean we can't overload the initialization parameter list of a class?
</p>

<p class="wikiPara">
I guess now's as good a time as any to break some more bad news: Ceylon doesn't support method overloading either! But, actually, this isn't as bad as it sounds. The sad truth is that overloading is the source of various problems in Java, especially when generics come into play. And in Ceylon, we can emulate most non-evil uses of constructor or method overloading using:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> <i class="wikiEmphasis">defaulted parameters</i>, to emulate the effect of overloading a method or class by <q>arity</q> (the number of parameters),</li>
<li class="wikiUnorderedListItem"> <i class="wikiEmphasis">sequenced parameters</i>, i.e. <q>varargs</q>, and</li>
<li class="wikiUnorderedListItem"> <i class="wikiEmphasis">union types</i> or <i class="wikiEmphasis">enumerated type constraints</i>, to emulate the effect of overloading a method or class by parameter type.</li>
</ul>

<p class="wikiPara">
We're not going to get into all the details of these workarounds right now, but here's a quick example of each of the three techniques:
</p>

<pre class="wikiPreformatted brush:ceylon">//defaulted parameter 
void print(String string = "\n") {
    writeLine(string);
}</pre>


<pre class="wikiPreformatted brush:ceylon">//sequenced parameter 
void print(String... strings) {
    for (String string in strings) { 
        writeLine(string);
    }
}</pre>


<pre class="wikiPreformatted brush:ceylon">//union type 
void print(String|Named printable) {
    String string;
    switch (printable) 
    case (is String) {
        string = printable;
    } 
    case (is Named) {
        string = printable.name;
    }
    writeLine(string);
}</pre>


<p class="wikiPara">
Don't worry if you don't completely understand the third example just yet. Just think of it as a completely typesafe version of how you would write an <q>overloaded</q> operation in a dynamic language like Smalltalk, Python, or Ruby. (If you're really impatient, skip forward to the <a href="http://in.relation.to/Bloggers/IntroductionToCeylonPart6#H-GenericTypeConstraints" target="" class="regularLink">discussion of generic type constraints</a>.)
</p>

<p class="wikiPara">
To be completely honest, there are some circumstances where this approach ends up slightly more awkward than Java-style overloading. But that's a small price to pay for a language with clearer semantics, without nasty corner cases, that is ultimately more powerful.
</p>

<p class="wikiPara">
Let's <q>overload</q> Hello, and its <tt>say()</tt> method, using defaulted parameters:
</p>

<pre class="wikiPreformatted brush:ceylon">doc "A command line greeting" 
class Hello(String? name = process.args.first) {
	...
    
    doc "Print the greeting" 
    shared void say(OutputStream stream = process.output) {
        stream.writeLine(greeting);
    }
    
}</pre>


<p class="wikiPara">
Our <tt>hello()</tt> method is now looking really simple:
</p>

<pre class="wikiPreformatted brush:ceylon">doc "Print a personalized greeting" 
void hello() {
    Hello().say();
}</pre>


<h1 class="wikiHeadline1" id="H-TheresMore"><a href="/2011/04/28/introduction-to-ceylon-part-2#H-TheresMore">There's more...</a></h1>

<p class="wikiPara">
In <a href="/Bloggers/IntroductionToCeylonPart3" target="" class="regularLink">Part 3</a>, we'll explore inheritance and refinement (overriding).
</p>
</div>

