---
title: "Rapture -> disillusion -> insight"
author: "Gavin King"
blogger_name: "Gavin"
creation_date: "23-06-2006"
original_tags: []
tags: []

relative_url: /2006/06/23/rapture-disillusion-insight
slug: rapture-disillusion-insight
lace: http://in.relation.to/1940.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2006/06/23/rapture-disillusion-insight
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
In the spirit of <q>stages of grief</q>, these are the <q>stages of adoption</q> of new software development techniques: 
</p>

<p class="wikiPara">
UPDATE: Hopefully this does not look too much like a bite of Gartner's Hype Cycle.
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> Stage 1, <i class="wikiEmphasis">Rapture:</i> The <q>shiny new toy</q> phase, where we first discover a new idea, and realize how powerful it is. As we get confident, we start trying to use it for /everything/.</li>
<li class="wikiUnorderedListItem"> Stage 2, <i class="wikiEmphasis">Disillusion:</i> Inevitably, as we start trying to apply this new approach to more and more complex and obscure problems, we start to run into cases where it doesn't quite fit - either because the expression of the idea (the current implementation) is still immature and imperfect, or because in our excitement, we're simply misapplying it.</li>
<li class="wikiUnorderedListItem"> Stage 3, <i class="wikiEmphasis">Insight:</i> The shiny toy is now just another gadget in our toolbox. We finally have the experience to know when and when not to use it. We understand not only the limitations of the idea, but also /why/ the limitations exist.</li>
</ul>

<p class="wikiPara">
The earliest release of Seam was a whole year ago, and Seam is now I guess the fastest growing framework in Java (500 downloads each day and rising). But the ideas in Seam - contextual components, state management, conversations, BPM - are still new to most people and the Seam community is still in the process of understanding exactly how and when to apply these ideas. This is actually the most exciting phase for a project like Seam. I loved the early days of Hibernate, when the community was still developing the patterns (and finding the language for describing those patterns) that are now formalized into books and examples and known to most enterprise Java developers.
</p>

<p class="wikiPara">
Today I got an email from a user who had just hit Stage 2, Disillusion. He asked:
</p>

<blockquote class="wikiBlockquote">

<ol class="wikiOrderedList">
<li class="wikiOrderedListItem"> If is best to use page flows or is normal JSF navigation in <tt>faces-config.xml</tt> enough?</li>
<li class="wikiOrderedListItem"> Is there a one sentence explanation on how to use <tt>@Begin</tt> and <tt>@End?</tt> I think most of my problems are due to misunderstood and invalid usage of conversations.</li>
</ol>


</blockquote>

<p class="wikiPara">
I spent more than a year thinking about conversations and optimistic transactions and designing Seam's conversation model before I actually sat down and wrote my first two Seam example applications a year ago. Even so, I got it wrong in both cases! I actually managed to screw up the conversation model on the first release of our beloved Booking demo. My lame-ass excuse is I was trying to illustrate the /idea/ of conversations, while keeping the actual conversation model extremely simple. But of course the worst way to illustrate the power of an idea is to misapply it. Mea culpa.
</p>

<p class="wikiPara">
A year later, I think we're finally at the point where we can start to formalize a set of rules of thumb on where to use conversations, where not to use them, where to begin them, where to end them. We now have the hard-won practical experience to go with the idea and its implementation.
</p>

<p class="wikiPara">
It's very difficult to define a correct state management model without interaction with the users. The first thing we need to understand is how the users want the application to work: what tasks should be multi-taskable, what pages need to be bookmarkable or exchanged in email, when should work become persistent, etc.
</p>

<p class="wikiPara">
My first stab at <q>when should I start a conversation?</q> is the following:
</p>

<p class="wikiPara">
Start a new conversation if you are at page X, and:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> the user is expected to want to navigate to page Y using <q>open in new tab</q> or <q>open in new window</q>, and </li>
<li class="wikiUnorderedListItem"> you want some state that is retrieved while rendering Y to remain in memory on the server, but isolated to the tab or window.</li>
</ul>

<p class="wikiPara">
We need to supplement this with the following additional rule:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> If page X already has a conversation, and page Y needs access to the state held in X's conversation, then make it a nested conversation. Otherwise make it a whole new toplevel conversation.</li>
</ul>

<p class="wikiPara">
Well, those rules are really just a restatement of the definition of <q>conversation</q> and <q>nested conversation</q>. They don't really tell you anything you didn't already know (though it is perhaps a more friendly formulation). What we really need is a characterization of the kinds of things that X and Y can be. So, when I'm developing frameworks, I really need to think about the following canonical cases:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> <i class="wikiEmphasis">Search/list screens:</i> these let the user find and navigate to the entity instances they are interested in. Search screens often support sorting.</li>
</ul>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> <i class="wikiEmphasis">Item detail pages:</i> these let the user view not just an instance, but also associated objects. Sometimes these pages can be complex views driven by a treeview control and requiring lazy fetching of data possibly via AJAX.</li>
</ul>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> <i class="wikiEmphasis">Edit/association management pages:</i> these pages implement simple optimistic transactions that let the user atomically view and update an entity instance, and possibly change its association to other entities. I'll throw create and delete functionality into this bucket for now, though these should strictly have their own categories.</li>
</ul>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> <i class="wikiEmphasis">Wizards:</i> I'm not just thinking of simple linear flows here, but rather of any interactions where we guide the user through a series of steps that form a single unit of work. In fact, a <q>wizard</q> can even be something as complex as a treeview control where the user can edit data from a toplevel object and its child objects spanned over several different pages, lazily fetching data and caching edits in memory on the server, and then finally make all the changes persistent in one atomic <q>save</q> operation.</li>
</ul>

<p class="wikiPara">
The answer to my Disillusioned user's first question is simple: /only use jBPM pageflows for wizards/. The stateless navigation model is much more appropriate for our other canonical cases.
</p>

<p class="wikiPara">
But I still havn't satisfied his request for a <q>one sentence explanation</q> of when to use a conversation. Instead, I'll try to sketch out a set of steps to take when designing a disciplined state management model for an application:
</p>

<p class="wikiPara">
<u>STEP 1:</u>
The first thing to consider is the search or list screens. These are extremely important, since they are the entry point to all application functionality. We need to decide where to <q>put</q> the search result list. Alternatives include:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> keep their result list in a conversation - this is usually overkill</li>
<li class="wikiUnorderedListItem"> keep the results in the session context - not good if the user needs to be able to run multiple simultaneous searches</li>
<li class="wikiUnorderedListItem"> go stateless (use a redirect with request parameters and pull MVC) - the advantage is the results can be bookmarked; the disadvantage is that we can√≠t easily cache the search results, which might slow performance if the user is allowed to sort and reorder the result list</li>
<li class="wikiUnorderedListItem"> put the results in the page context (which is serialized to the client) - this can mean quite a lot of serialization overhead</li>
</ul>

<p class="wikiPara">
On balance, my preference is for statelessness most of the time, but it depends upon the needs of your users. Session scope might be what they prefer (this is what we use in the Booking demo). Conversations don't usually have a place here.
</p>

<p class="wikiPara">
<u>STEP 2:</u> When we navigate from a search screen to an item detail page, a similar choice space exists:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> keep the item in a new conversation</li>
<li class="wikiUnorderedListItem"> stay stateless (request parameter and pull MVC)</li>
<li class="wikiUnorderedListItem"> use the page context</li>
</ul>

<p class="wikiPara">
Now the balance swings toward using a conversation, especially if we have some kind of complex object and need treeview-style navigation. (In this case, conversations give you transparent lazy association loading and all that good stuff.) But if bookmarkability is a requirement, statelessness is again the best choice.
</p>

<p class="wikiPara">
<u>STEP 3:</u>
Now we start getting to edit pages, association management pages, create/delete and the like. We are in the world of optimistic transactions, and so conversations rule. The main decisions revolve around conversation propagation: nested conversation? new conversation? stay in existing conversation? This depends upon how much the user wants to use <q>open in new tab</q>!
</p>

<p class="wikiPara">
<u>STEP 4:</u>
Finally, wizards should always run in a conversation. In fact, it is highly likely that you want to use the <q>atomic conversation</q> pattern where changes are kept transiently in memory on the server side until the conversation ends. Some wizards should use pageflows. (Remember I am using an extremely broad definition of <q>wizard</q> here.)
</p>

<p class="wikiPara">
Hopefully this discussion helps the path from Disillusion to Insight, without scaring away the many people who have yet to experience the Rapture.
</p>
</div>

