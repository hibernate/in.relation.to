---
title: "Debunked?"
author: "Gavin King"
blogger_name: "Gavin"
creation_date: "10-05-2004"
original_tags: []
tags: []

relative_url: /2004/05/10/debunked
slug: debunked
lace: http://in.relation.to/1578.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2004/05/10/debunked
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
Abe White of Solarmetric replies to my criticisms of JDO on TSS. I'm actually not interested in getting into a lengthy debate over this, but since there /was/ an error in my first post, I must certainly acknowledge that.
</p>

<p class="wikiPara">
First, Abe displays a trivial query that looks superficially similar in HQL and JDOQL. I'm not certain  exactly what this is intended to prove, but I'm not going to get into a lengthy debate over this. I encourage anyone who is interested to compare the two query languages for themselves. It is my firm belief that a query language for ORM should look like SQL. (Unlike HQL and EJBQL, JDOQL is not targetted specifically at ORM, which explains some of the difference of opinion.) I guess I should make it clear that it is really the query language that is the showstopper for me personally.
</p>

<p class="wikiPara">
Next, Abe points out that I am wrong about the semantics for unfetched associations in JDO detachment. I stand corrected. From the JDO1 spec, and from earlier conversations with JDO EG members, I had understood that the JDO guys were insistent that enhanced classes not be needed on the <q>client</q> - which means that interception could not be done for serialized instances on the client side. Apparently they have changed their minds and dropped that requirement. That's reasonable, I suppose. It probably means that there would be difficulties with enhancing at classloading time, but I'm not certain of this and I do accept that build-time enhancement is a reasonable approach to supporting detach/reattach.
</p>

<p class="wikiPara">
There was some suggestion that my other objections to field interception might be wrong, but I think I'm right on those. I think you'll see this if you carefully consider how polymorphic associations and detachment complicate the picture. (Remember, we cannot decide the concrete subclass of an associated instance without hitting its database table or tables.)
</p>

<p class="wikiPara">
Last, Abe argues that JDO really only has exactly the same <q>kinds</q> of identity and instance states as Hibernate. I agree - and that's the whole problem! Let's take identity. There is really just one kind of identity that is interesting: persistent identity. The only thing that should vary is how the identity value (primary key value) is assigned. But JDO has a different representation for <q>datastore</q> identity (a surrogate key generated by the persistence layer) and <q>application</q> identity (a natural key assigned by the application). JDO2 adds <q>simple</q> identity to paper over the problems with this, and complicates the picture further.
</p>

<p class="wikiPara">
OK, no time for more, I gotta catch a plane. Of course, everyone thinks their own technology is best and that everyone who criticizes it is wrong/stupid/spreading FUD/etc. I have absolutely zero expectation that a debate about this will produce any clear technical winner (rather than smeared reputations). I'm fallible, the JDO guys are fallible, everyone else is fallible. I prefer to surrender to darwinism, and watch what solution is actually adopted in real projects.
</p>
</div>

