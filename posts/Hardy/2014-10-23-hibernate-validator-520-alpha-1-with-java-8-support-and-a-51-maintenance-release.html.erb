---
title: "Hibernate Validator 5.2.0.Alpha1 with Java 8 support and a 5.1 maintenance release"
author: "Hardy Ferentschik"
blogger_name: "Hardy"
creation_date: "23-10-2014"
original_tags: [Bean Validation,Hibernate Validator]
tags: [Bean Validation,Hibernate Validator]

relative_url: /2014/10/23/hibernate-validator-520-alpha-1-with-java-8-support-and-a-51-maintenance-release
slug: hibernate-validator-520-alpha-1-with-java-8-support-and-a-51-maintenance-release
lace: http://in.relation.to/34906.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2014/10/23/hibernate-validator-520-alpha-1-with-java-8-support-and-a-51-maintenance-release
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
After some time in the making, we are happy to announce the first Hibernate Validator release of
the 5.2 series - 5.2.0.Alpha1.
This release focuses mainly on Java 8 support, but we will get to this in a bit.
</p>

<p class="wikiPara">
First a big thank you to <a href="https://github.com/khalidq" target="" class="regularLink">Khalid Alqinyah</a> who, as part of a
<a href="https://www.google-melange.com/gsoc/homepage/google/gsoc2014" target="" class="regularLink">Google Summer of Code</a> project,
implemented many of these new features.
</p>

<p class="wikiPara">
So what's in it for you?
</p>

<h2 class="wikiHeadline2" id="H-Java8Support"><a href="/2014/10/23/hibernate-validator-520-alpha-1-with-java-8-support-and-a-51-maintenance-release#H-Java8Support">Java 8 support</a></h2>

<p class="wikiPara">
<i class="wikiEmphasis">Note</i>: Java 8 is not a requirement for Hibernate Validator 5.2. Hibernate Validator is still
backward compatible with Java 6. Java 8 specific features are only enabled when a Java 8 runtime
is detected.
</p>

<p class="wikiPara">
First off, the Java 8 date/time data types (JSR 310) are supported and can be validated via <tt>@Past</tt>
and <tt>@Future</tt>. Also <tt>Optional</tt> and JavaFX types are supported via an improved <tt>ValidatedValueUnwrapper</tt>.
<a href="https://docs.jboss.org/hibernate/validator/5.2/reference/en-US/html_single/#section-value-handling" target="" class="regularLink">ValidatedValueUnwrapper</a> was already introduced in Validator 5.1,
but works now in a more transparent way. Upon validation all registered <tt>ValidatedValueUnwrapper</tt>
instances are checked. If a handler supports the validated type its <tt>handleValidatedValue</tt> method
is called, provided that there exists no matching <tt>ConstraintValidator</tt> for the wrapper itself.
This is best explained with an example:</p>
<pre class="wikiPreformatted brush: java; gutter: true;">@Size(min = 3) // the @Size constraint can only apply to the string value which gets automatically validated
private Optional&lt;String&gt; firstName = Optional.of( "John" );

@NotNull
@UnwrapValidatedValue(false) // Use @UnwrapValidatedValue(false) to ensure the wrapper itself is validated
private Optional&lt;String&gt; lastName = Optional.of( "Doe" );
</pre>

Another Java 8 related feature is the ability to use type annotations on <tt>Iterable</tt> instances. Something like
this:<pre class="wikiPreformatted brush: java; gutter: true;">private List&lt;@AcmeEmail String&gt; emails;
</pre>

Note that the example is not using Hibernate Validator's <tt>@Email</tt>. Neither Bean Validation's built-in
constraints nor Hibernate Validator specific ones, can be used. The simple reason is that these constraints
are missing <tt>java.lang.annotation.ElementType.TYPE_USE</tt> in their definition and it cannot be added
in a backwards compatible way. At the moment we have not yet decided what to do. Should we make Java 8
a requirement for Validator 5.2 or should we somehow provide JVM specific artifacts? What do you think?
Right now we want to keep the options open and see which path Bean Validation 1.2 and other Java EE 8 standards
are taking. For now this feature is limited to custom constraints where you can add the required
<tt>ElementType</tt> yourself.


<p class="wikiPara">
Last but not least, in the Java 8 driven feature list, is <tt>ReflectionParameterNameProvider</tt>.
This new <tt>ParameterNameProvider</tt> makes use of enhancements in the Java 8 reflection API and reports actual parameter names instead of the
generic <i>arg0</i>, <i>arg1</i>, etc. A requirement for this provider to work is that the sources are compiled
with the <i>-parameters</i> compiler option. Refer to the <a href="https://docs.jboss.org/hibernate/validator/5.2/reference/en-US/html_single/#section-parameter-name-provider" target="" class="regularLink">docs</a>
to see how to configure a custom <tt>ParameterNameProvider</tt>.
</p>

<h2 class="wikiHeadline2" id="H-WhatElse"><a href="/2014/10/23/hibernate-validator-520-alpha-1-with-java-8-support-and-a-51-maintenance-release#H-WhatElse">What else?</a></h2>

<p class="wikiPara">
Here are a couple of more highlights from this release:
</p>

<h3 class="wikiHeadline3" id="H-ConstraintDefinitionContributorAndServiceLoaderForConstraintDefinitions"><a href="/2014/10/23/hibernate-validator-520-alpha-1-with-java-8-support-and-a-51-maintenance-release#H-ConstraintDefinitionContributorAndServiceLoaderForConstraintDefinitions">ConstraintDefinitionContributor and ServiceLoader for constraint definitions</a></h3>

<p class="wikiPara">
The Bean Bean Validation specification allows to register new constraint definitions via XML mapping
files. For example:
</p>

<pre class="wikiPreformatted brush: xml; gutter: true;">&lt;constraint-definition annotation="org.hibernate.validator.constraints.URL"&gt;
  &lt;validated-by include-existing-validators="false"&gt;
    &lt;value&gt;org.hibernate.validator.constraintvalidators.RegexpURLValidator&lt;/value&gt;
  &lt;/validated-by&gt;
&lt;/constraint-definition&gt;
</pre>


<p class="wikiPara">
We offer now two more ways of contributing constraint definitions. The first is programmatically via
the <tt>ConstraintDefinitionContributor</tt> SPI.
The above example would look like:
</p>

<pre class="wikiPreformatted brush: xml; gutter: true;">HibernateValidatorConfiguration configuration = Validation
	.byProvider( HibernateValidator.class )
	.configure();

configuration.addConstraintDefinitionContributor(
	new ConstraintDefinitionContributor() {
		@Override
		public void collectConstraintDefinitions(ConstraintDefinitionBuilder builder) {
			builder.constraint( URL.class )
				.includeExistingValidators( false )
				.validatedBy( RegexpURLValidator.class );
		}
	}
);
</pre>


<p class="wikiPara">
By the way, <tt>org.hibernate.validator.constraintvalidators.RegexpURLValidator</tt> is not a made up class.
It is another new feature (<a href="https://hibernate.atlassian.net/browse/HV-920" target="" class="regularLink">HV-920</a>) which allows to
configure a regular expression based validator for the <tt>@URL</tt> constraint.
</p>

<p class="wikiPara">
Back to constraint definition though. The second way to contribute constraint definitions is
via the Java <a href="http://docs.oracle.com/javase/8/docs/api/java/util/ServiceLoader.html/" target="" class="regularLink">ServiceLoader</a> mechanism.
Just add <tt>META-INF/services/javax.validation.ConstraintValidator</tt> to your artifact listing the
fully qualified classnames of your constraint validator classes (one per line). This mechanism works
fine for adding constraint definitions for new types. You cannot as possible in XML or via the
<tt>ConstraintDefinitionContributor</tt> disable default definitions.
</p>

<h3 class="wikiHeadline3" id="H-TtParameterMessageInterpolatortt"><a href="/2014/10/23/hibernate-validator-520-alpha-1-with-java-8-support-and-a-51-maintenance-release#H-TtParameterMessageInterpolatortt"><tt>ParameterMessageInterpolator</tt></a></h3>

<p class="wikiPara">
Hibernate Validator requires per default an implementation of the Unified EL to be available.
For environments where you cannot or do not want to provide an EL implementation, we offer now
a non EL based message interpolator
- <tt>org.hibernate.validator.messageinterpolation.ParameterMessageInterpolator</tt>.
</p>

<p class="wikiPara">
<i class="wikiEmphasis">Warning</i>: Constraint messages containing EL expressions will be returned un-interpolated!
</p>

<p class="wikiPara">
These were just the highlights. In total a whopping <a href="https://hibernate.atlassian.net/secure/ReleaseNote.jspa?projectId=10060&amp;version=18150" target="" class="regularLink">40</a> issues got resolved. Be one of the early adopters and get the
Maven artifacts from the JBoss Maven repository (GAV <a href="https://repository.jboss.org/nexus/index.html#nexus-search;gav~org.hibernate~hibernate-validator~5.2.0.Alpha1~~" target="" class="regularLink">org.hibernate:hibernate-validator:5.2.Alpha1</a>) or
the <a href="https://sourceforge.net/projects/hibernate/files/hibernate-validator/5.2.0.Alpha1" target="" class="regularLink">SourceForge</a>
distribution bundles.
</p>

<hr>

<p class="wikiPara">
Simultaneously with the 5.2 alpha release we published a 5.1 maintenance release.
We accidentally broke Java 6 backwards compatibility in 5.1.2.Final by using <tt>Collections#emptyIterator()</tt>.
This is corrected in 5.1.3.Final and Java 6 compatibility is restored.
</p>

<p class="wikiPara">
The second bug fixed in 5.1.3.Final is <a href="https://hibernate.atlassian.net/browse/HV-930" target="" class="regularLink">HV-930</a> where
constraints were not validated when the internal weak reference cache of Hibernate Validator got
partly invalidated due to memory pressure.
</p>

<p class="wikiPara">
The full 5.1.3.Final change log can be found here. Maven artifacts are on the JBoss Maven repository
under the GAV <a href="https://repository.jboss.org/nexus/index.html#nexus-search;gav~org.hibernate~hibernate-validator~5.1.3.Final~~" target="" class="regularLink">org.hibernate:hibernate-validator:5.1.3.Final</a> and distribution bundles are available
on <a href="https://sourceforge.net/projects/hibernate/files/hibernate-validator/5.1.3.Final/" target="" class="regularLink">SourceForge</a>.
</p>

<p class="wikiPara">
If you are using a 5.1 version of Validator it is highly recommended to upgrade to 5.1.3.Final. Or
why not giving the 5.2 Alpha version a go?
</p>

<p class="wikiPara">
Feedback and questions are welcome via the Hibernate Validator <a href="https://forum.hibernate.org/viewforum.php?f=9" target="" class="regularLink">forum</a>
or on stackoverflow using the hibernate-validator <a href="http://stackoverflow.com/questions/tagged/hibernate-validator" target="" class="regularLink">tag</a>.
</p>

<p class="wikiPara">
Enjoy!</p>
</div>

