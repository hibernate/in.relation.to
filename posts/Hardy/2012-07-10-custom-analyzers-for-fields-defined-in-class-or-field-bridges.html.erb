---
title: "Custom analyzers for fields defined in class or field bridges"
author: "Hardy Ferentschik"
blogger_name: "Hardy"
creation_date: "10-07-2012"
original_tags: [Hibernate Search]
tags: [Hibernate Search]

relative_url: /2012/07/10/custom-analyzers-for-fields-defined-in-class-or-field-bridges
slug: custom-analyzers-for-fields-defined-in-class-or-field-bridges
lace: http://in.relation.to/23329.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2012/07/10/custom-analyzers-for-fields-defined-in-class-or-field-bridges
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
Inspired by these questions on the <a href="https://forum.hibernate.org/viewtopic.php?f=9&amp;t=1016667" target="" class="regularLink">Search forum</a> and <a href="http://stackoverflow.com/questions/10118212/using-an-analyzer-within-a-custom-fieldbridge" target="" class="regularLink">stackoverflow</a> I decided 
to blog about different solutions for the problem using only the tools available in <a href="http://search.hibernate.org" target="" class="regularLink">Search</a> right now (<a href="http://www.hibernate.org/subprojects/search/download" target="" class="regularLink">4.1.1.Final</a>). But let's start with the problem.
</p>

<h1 class="wikiHeadline1" id="H-TheProblem"><a href="/2012/07/10/custom-analyzers-for-fields-defined-in-class-or-field-bridges#H-TheProblem">The Problem</a></h1>

<p class="wikiPara">
How can I define a custom analyzer for a field added in a custom class bridge? Let's look at an example. Below the 
class <tt>Foo</tt> defines a custom bridge <tt>FooBridge</tt>. How can I specify a custom analyzer for the field added by this bridge?</p>
<pre class="wikiPreformatted">
@Entity
@Indexed
@ClassBridge(impl = FooBridge.class)
public static class Foo {
	@Id
	@GeneratedValue
	private Integer id;
}</pre>




<h1 class="wikiHeadline1" id="H-Solution1"><a href="/2012/07/10/custom-analyzers-for-fields-defined-in-class-or-field-bridges#H-Solution1">Solution 1</a></h1>

<p class="wikiPara">
The straight forward approach looks something like that.</p>
<pre class="wikiPreformatted">
@Entity
@Indexed
@ClassBridge(name = "myCustomField", impl = FooBridge.class, analyzer = @Analyzer(impl = MyCustomAnalyzer.class))
public static class Foo {
	@Id
	@GeneratedValue
	private Integer id;
}</pre>



<p class="wikiPara">
This works fine, provided the field you are adding in <tt>FooBridge</tt> has the name <tt>myCustomField</tt>. In case you are adding
a field (or even multiple fields) with a different name this approach does not work anymore. In Lucene analyzers 
are specified per field identified by field name. Since from your <tt>@ClassBridge</tt> definition we cannot tell which
fields you are adding, there is no way of registering and applying the right analyzers. See also the related issue <a href="https://hibernate.onjira.com/browse/HSEARCH-904" target="" class="regularLink">HSEARCH-904</a>. 
</p>

<h1 class="wikiHeadline1" id="H-Solution2"><a href="/2012/07/10/custom-analyzers-for-fields-defined-in-class-or-field-bridges#H-Solution2">Solution 2</a></h1>

<p class="wikiPara">
In the second solution you are managing the analyzers on your own. The relevant part is in the bridge implementation:</p>
<pre class="wikiPreformatted">
public class FooBridge implements FieldBridge {

	@Override
	public void set(String name, Object value, Document document, LuceneOptions luceneOptions) {
		Field field = new Field(
				name,  
				"",
				luceneOptions.getStore(),
				luceneOptions.getIndex(),
				luceneOptions.getTermVector()
		);
		try {
			String text = "whatever you want to index";
			MyCustomAnalyzer analyzer = new MyCustomAnalyzer( );
			field.setTokenStream( analyzer.reusableTokenStream( name, new StringReader( text ) ) );
			document.add( field );
		}
		catch ( IOException e ) {
			// error handling
		}
	}
}</pre>

	
As you can see you need to instantiate your analyzer yourself and then set the token stream for the field you want to add. This will work, but it does not work with <tt>@AnalyzerDef</tt> which is often used to define and reuse analyzers globally for your application. Lets have a look at this solution.


<h1 class="wikiHeadline1" id="H-Solution3"><a href="/2012/07/10/custom-analyzers-for-fields-defined-in-class-or-field-bridges#H-Solution3">Solution 3</a></h1>

<p class="wikiPara">
Let's start directly with the code:</p>
<pre class="wikiPreformatted">
	@Entity
	@Indexed
	@AnalyzerDefs({
			@AnalyzerDef(name = "analyzer1",
					tokenizer = @TokenizerDef(factory = MyFirstTokenizer.class),
					filters = {
							@TokenFilterDef(factory = MyFirstFilter.class)
					}),
			@AnalyzerDef(name = "analyzer2",
					tokenizer = @TokenizerDef(factory = MySecondTokenizer.class),
					filters = {
							@TokenFilterDef(factory = MySecondFilter.class)
					}),
			@AnalyzerDef(name = "analyzer3",
					tokenizer = @TokenizerDef(factory = MyThirdTokenizer.class),
					filters = {
							@TokenFilterDef(factory = MyThirdFilter.class)
					})
	})
	@ClassBridge(impl = FooBridge.class)
	@AnalyzerDiscriminator(impl = FooBridge.class)
	public static class Foo {
		@Id
		@GeneratedValue
		private Integer id;
	}

	public static class FooBridge implements Discriminator, FieldBridge {

		public static final String[] fieldNames = new String[] { "field1", "field2", "field3" };
		public static final String[] analyzerNames = new String[] { "analyzer1", "analyzer2", "analyzer3" };

		@Override
		public void set(String name, Object value, Document document, LuceneOptions luceneOptions) {
			for ( String fieldName : fieldNames ) {
				Fieldable field = new Field(
						fieldName,
						"Your text to analyze and index",
						luceneOptions.getStore(),
						luceneOptions.getIndex(),
						luceneOptions.getTermVector()
				);
				field.setBoost( luceneOptions.getBoost() );
				document.add( field );
			}
		}

		public String getAnalyzerDefinitionName(Object value, Object entity, String field) {
			for ( int i = 0; i &lt; fieldNames.length; i++ ) {
				if ( fieldNames[i].equals( field ) ) {
					return analyzerNames[i];
				}
			}
			return null;
		}
	}</pre>

	
A lot is going on here and the example shows many useful features of Search. First <tt>@AnalyzerDefs</tt> is used to
declaratively define and build your analyzers. This analyzers are globally available under their given names and can
be reused across the application (see also SearchFactory#getAnalyzer(String)). You build an analyzer by first specifying its tokenizer and then a list of filters to apply. Have a look at <a href="http://docs.jboss.org/hibernate/stable/search/reference/en-US/html_single/%5C#d0e3446" target="" class="regularLink">named analyzers</a> in the online documentation for more information.


<p class="wikiPara">
Next the example uses <tt>@ClassBridge(impl = FooBridge.class)</tt> to define the custom class bridge. Nothing special there.
Which fields you are adding in the implementation is up to you.
</p>

<p class="wikiPara">
Last but not least, we have <tt>@AnalyzerDiscriminator(impl = FooBridge.class)</tt>. This annotation is normally used for <a href="http://docs.jboss.org/hibernate/stable/search/reference/en-US/html_single/%5C#d0e3825" target="" class="regularLink">dynamic analyzer selection</a> based on the entity state. However, it can easily be used in this context as well. To make things easy I let the field bridge directly implement the required <tt>Discriminator</tt> interface. <tt>Discriminator#getAnalyzerDefinitionName</tt> will now be called for each field being added to the index. You also get passed the entity itself and the value (in case the field bridge is defined on a property), but this is not important in this case. All which remains to be done is to make sure to return the right analyzer name based on the passed field name. 
</p>

<p class="wikiPara">
Solution 3 seems maybe longer, but it is a declarative approach and it also allows you to reuse analyzer configurations. It also shows that the current API might still have its shortcomings (eg <a href="https://hibernate.onjira.com/browse/HSEARCH-904" target="" class="regularLink">HSEARCH-904</a>), but using the tools already available, there are often work-arounds. 
</p>

<p class="wikiPara">
Happy analyzing,
</p>

<p class="wikiPara">
Hardy
</p>




<p class="wikiPara">
	</p>
</div>

