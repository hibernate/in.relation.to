---
title: "Haste makes waste - here comes Hibernate Validator 5.1.0.Beta1"
author: "Hardy Ferentschik"
blogger_name: "Hardy"
creation_date: "15-01-2014"
original_tags: [Hibernate Validator,hv51]
tags: [Hibernate Validator]

relative_url: /2014/01/15/haste-makes-waste-here-comes-hibernate-validator-510-beta-1
slug: haste-makes-waste-here-comes-hibernate-validator-510-beta-1
lace: http://in.relation.to/24788.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2014/01/15/haste-makes-waste-here-comes-hibernate-validator-510-beta-1
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
It has been a while since the first alpha release of Validator 5.1, but as the saying goes: <q>Haste makes waste</q> :-)
There is a lot going on in the Hibernate universe and over the last few months we have been
especially busy with projects like <a href="http://hibernate.org/search" target="" class="regularLink">Search</a> and <a href="http://hibernate.org/ogm" target="" class="regularLink">OGM</a>.
Not to speak of the new Hibernate <a href="http://hibernate.org" target="" class="regularLink">website</a>. Sigh, if we just had more contributors lending a 
hand (hint, hint).
</p>

<p class="wikiPara">
Nevertheless, we found time to also work on Validator and the result is Hibernate Validator 5.1.0.Beta1 with 
some nice new features and bug fixes. The most notable feature is the introduction of <tt>@UnwrapValidatedValue</tt> and the corresponding <tt>ValidatedValueUnwrapper</tt> SPI (see <a href="https://hibernate.atlassian.net/browse/HV-819" target="" class="regularLink">HV-819</a>).
The idea is that in some cases the value to validate is contained in a wrapper type and one would have to
add custom ConstraintValidator implementations for each constrained type and constraint. Think
Java 8 <tt>Optional</tt> or JavaFX <tt>Property</tt> types. For example in JavaFX you could have:</p>
<pre class="wikiPreformatted brush:java">@NotBlank
@UnwrapValidatedValue
private Property&lt;String&gt; name = new SimpleStringProperty( "Foo" );
</pre>

Here the intention is to apply the <tt>@NotBlank</tt> constraint to the string value, not the the <tt>Property</tt> instance. By annotating name
with <tt>@UnwrapValidatedValue</tt> the Validator engine knows that it has to unwrap the value prior to validation. 
To be able to do this, you need to also register an implementation of <tt>ValidatedValueUnwrapper</tt> which specifies how this unwrapping has
to happen. You can
do this via <tt>validation.xml</tt> as provider specific property (<tt>hibernate.validator.validated_value_handlers</tt>) or programmatically via:<pre class="wikiPreformatted brush:java">Validator validator = Validation.byProvider( HibernateValidator.class )
        .configure()
        .addValidatedValueHandler( new PropertyValueUnwrapper() )
        .buildValidatorFactory()
        .getValidator();
</pre>

<tt>PropertyValueUnwrapper</tt> is in this case an implementation of <tt>ValidatedValueUnwrapper</tt> which tells 
the Validator engine how to unwrap a Property type and of which type the validated value is. The latter 
is needed for constraint validator resolution. For more information refer to the 
<a href="http://docs.jboss.org/hibernate/validator/5.1/reference/en-US/html_single/#section-value-handling" target="" class="regularLink">online documetnation</a>.


<p class="wikiPara">
What else is worth mentioning? Thanks to Brent Douglas for profiling of Hibernate Validator and  
detecting of some potential memory leaks - see <a href="https://hibernate.atlassian.net/browse/HV-838" target="" class="regularLink">HV-838</a> and 
<a href="https://hibernate.atlassian.net/browse/HV-842" target="" class="regularLink">HV-842</a>. They are fixed now.
</p>

<p class="wikiPara">
Thanks also to Victor Rezende dos Santos and Shin Sang-Jae. Victor found a problem with the Brazilian CPF 
constraint which lead to its refactoring <a href="https://hibernate.atlassian.net/browse/HV-808" target="" class="regularLink">HV-808</a>, as well as the deprecation of <tt>@ModCheck</tt> and the 
introduction of dedicated <tt>@Mod10</tt> and <tt>@Mod11</tt> constraints as replacements. Shin on the other hand provided a Korean translation of the ValidationMessages
properties bundle. 
</p>

<p class="wikiPara">
Last but not least, we also have an improved the memory footprint by reducing the amount of memory consumed 
by metadata (<a href="https://hibernate.atlassian.net/browse/HV-589" target="" class="regularLink">HV-589</a>).
</p>

<p class="wikiPara">
In total <a href="https://hibernate.atlassian.net/secure/ReleaseNote.jspa?projectId=10060&amp;version=13952" target="" class="regularLink">29</a> resolved
issues. Not bad in my opinion and definitely worth upgrading to Validator 5.1.
</p>

<p class="wikiPara">
Maven artefacts are on the JBoss Maven repository under the GAV <a href="https://repository.jboss.org/nexus/index.html#nexus-search;gav~org.hibernate~hibernate-validator~5.1.0.Beta1~~" target="" class="regularLink">org.hibernate:hibernate-validator:5.1.0.Beta1</a> and <a href="https://sourceforge.net/projects/hibernate/files/hibernate-validator/5.1.0.Beta1/" target="" class="regularLink">distribution bundles</a> are available on SourceForge.
Send us feedback either via the Hibernate Validator <a href="https://forum.hibernate.org/viewforum.php?f=9" target="" class="regularLink">forum</a> or 
on stackoverflow using the <a href="http://stackoverflow.com/questions/tagged/hibernate-validator" target="" class="regularLink">hibernate-validator</a> tag.
</p>

<p class="wikiPara">
Enjoy!</p>
</div>

