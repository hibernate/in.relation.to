---
title: "A Hitchhikers Guide to Java EE 6 application setup, Part III"
author: "Nicklas Karlsson"
blogger_name: "Nicklas"
creation_date: "07-06-2010"
original_tags: [Bean Validation,JSF,JSF 2]
tags: [Bean Validation,Java EE,JSF]

relative_url: /2010/06/07/a-hitchhikers-guide-to-java-ee-6-application-setup-part-iii
slug: a-hitchhikers-guide-to-java-ee-6-application-setup-part-iii
lace: http://in.relation.to/15767.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2010/06/07/a-hitchhikers-guide-to-java-ee-6-application-setup-part-iii
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
In this third part we'll be hooking up JPA 2 with the static metamodel generator, Bean Validation and Envers
</p>

<h1 class="wikiHeadline1" id="H-JPA"><a href="/2010/06/07/a-hitchhikers-guide-to-java-ee-6-application-setup-part-iii#H-JPA">JPA</a></h1>

<p class="wikiPara">
Let's get persistent. When we're talking persistence, we need a persistence.xml so let's make a folder META-INF src/main/resources and create one there
</p>

<pre class="wikiPreformatted">
&lt;persistence xmlns="http://java.sun.com/xml/ns/persistence"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd"
	version="2.0"&gt;
	&lt;persistence-unit name="Greetings"&gt;
		&lt;jta-data-source&gt;java:/DefaultDS&lt;/jta-data-source&gt;
		&lt;properties&gt;
			&lt;property name="hibernate.dialect" value="org.hibernate.dialect.HSQLDialect" /&gt;
			&lt;property name="hibernate.hbm2ddl.auto" value="create-drop" /&gt;
			&lt;property name="hibernate.show-sql" value="true" /&gt;
		&lt;/properties&gt;
	&lt;/persistence-unit&gt;
&lt;/persistence&gt;
</pre>


<p class="wikiPara">
We're using the standard HSQL DefaultDS that comes with JBoss AS 6. If you want to be really hip, google around for @DataSourceDefinition which is
a new kid on the block in EE 6 (haven't tried if AS 6 supports it yet, though)
</p>

<p class="wikiPara">
Next, let's expand our model from Strings to a Greeting entity. Create a
</p>

<pre class="wikiPreformatted">
package com.acme.greetings;

import static javax.persistence.TemporalType.TIMESTAMP;

import java.util.Date;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Temporal;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

@Entity
public class Greeting
{
   @Id
   @GeneratedValue
   int id;

   String text;
   
   @Temporal(TIMESTAMP)
   Date created = new Date();

   public int getId()
   {
      return id;
   }

   public void setId(int id)
   {
      this.id = id;
   }

   public String getText()
   {
      return text;
   }

   public void setText(String text)
   {
      this.text = text;
   }
}
</pre>


<p class="wikiPara">
change the GreetingBean to
</p>

<pre class="wikiPreformatted">
package com.acme.greetings;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.enterprise.context.ApplicationScoped;
import javax.enterprise.event.Event;
import javax.inject.Inject;
import javax.inject.Named;

import org.icefaces.application.PushRenderer;


@ApplicationScoped
@Named
public class GreetingBean implements Serializable
{
   Greeting greeting = new Greeting();
   List&lt;Greeting&gt; greetings = new ArrayList&lt;Greeting&gt;();

   @Inject
   @Added
   Event&lt;Greeting&gt; greetingAddedEvent;

   @Inject
   GreetingArchiver greetingArchiver;
   
   @PostConstruct
   public void init()
   {
      greetings = greetingArchiver.loadGreetings();
   }

   public void addGreeting()
   {
      greetings.add(greeting);
      greetingAddedEvent.fire(greeting);
      greeting = new Greeting();
      PushRenderer.render("greetings");
   }

   public Greeting getGreeting()
   {
      return greeting;
   }

   public void setGreeting(Greeting greeting)
   {
      this.greeting = greeting;
   }

   public List&lt;Greeting&gt; getGreetings()
   {
      PushRenderer.addCurrentSession("greetings");
      return greetings;
   }

   public void setGreetings(List&lt;Greeting&gt; greetings)
   {
      this.greetings = greetings;
   }
}
</pre>


<p class="wikiPara">
We have also injected an event that is fired when comments are added:
</p>

<pre class="wikiPreformatted">
@Inject
@Added
Event&lt;Greeting&gt; greetingAddedEvent;
</pre>


<p class="wikiPara">
so we need a qualifier called Added:
</p>

<pre class="wikiPreformatted">
package com.acme.greetings;

import static java.lang.annotation.ElementType.FIELD;
import static java.lang.annotation.ElementType.METHOD;
import static java.lang.annotation.ElementType.PARAMETER;
import static java.lang.annotation.ElementType.TYPE;
import static java.lang.annotation.RetentionPolicy.RUNTIME;

import java.lang.annotation.Retention;
import java.lang.annotation.Target;

import javax.inject.Qualifier;

@Qualifier
@Retention(RUNTIME)
@Target( { METHOD, FIELD, PARAMETER, TYPE })
public @interface Added
{
}
</pre>


<p class="wikiPara">
and greetings.xhtml to
</p>

<pre class="wikiPreformatted">
&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "DTD/xhtml1-strict.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:ice="http://www.icesoft.com/icefaces/component"
	xmlns:ui="http://java.sun.com/jsf/facelets"&gt;
	&lt;h:head&gt;
		&lt;title&gt;
			Greetings
		&lt;/title&gt;
	&lt;/h:head&gt;

	&lt;h:body&gt;
		&lt;h:form&gt;
			&lt;ice:inputText value="#{greetingBean.greeting.text}" effect="#{greetingBean.appear}"/&gt;
			&lt;h:commandButton value="Add" action="#{greetingBean.addGreeting}" /&gt;
			&lt;h:dataTable value="#{greetingBean.greetings}" var="greeting"&gt;
				&lt;h:column&gt;
					&lt;h:outputText value="#{greeting.text}"/&gt;
				&lt;/h:column&gt;
			&lt;/h:dataTable&gt;
		&lt;/h:form&gt;
	&lt;/h:body&gt;
&lt;/html&gt;
</pre>


<p class="wikiPara">
(we changed the order of the table and the input fields as it was getting annoying to have the field and button move down as we add comments)
</p>

<p class="wikiPara">
Of course since we are firing events it would be nice if someone is actually listening. Let's create a GreetingArchvier:
</p>

<pre class="wikiPreformatted">
package com.acme.greetings;

import java.util.List;

import javax.enterprise.context.ApplicationScoped;
import javax.enterprise.event.Observes;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

@ApplicationScoped
public class GreetingArchiver
{
   @PersistenceContext
   EntityManager db;

   @Inject
   UserTransaction userTransaction;

   public void saveGreeting(@Observes @Added Greeting greeting)
   {
      try
      {
         userTransaction.begin();
         db.joinTransaction();
         db.persist(greeting);
         db.flush();
         userTransaction.commit();
      }
      catch (Exception e)
      {
         e.printStackTrace();
         // The recommended way of dealing with exceptions, right?
      }
   }

   public List&lt;Greeting&gt; loadGreetings()
   {
      return db.createQuery("from Greeting").getResultList();
   }

}
</pre>


<p class="wikiPara">
That observes @Added Greetings and store them to the database. Notice also the loadGreetings() method that GreetingBean calls in it's @PostConstruct
to populate itself with old comments. Well, with create-drop in our persistence.xml there won't be much to load but let's fix that later.
</p>

<h1 class="wikiHeadline1" id="H-JPA2"><a href="/2010/06/07/a-hitchhikers-guide-to-java-ee-6-application-setup-part-iii#H-JPA2">JPA 2</a></h1>

<p class="wikiPara">
That's all nice but we're trying to be livin' on the edge so let's bring in JPA and typesafe queries and with those we better have some static metamodel
generator, otherwise the attributes will quickly become a burden. There is Eclipse integration available (google around) but if you're doing automated 
maven-based builds, you're going to need this anyway. Since both Eclipse and Maven are involved in building, be prepared for some 
chicken-egg-project-cleaning-and-refreshing in Eclipse from time to time when adding new entities. Anyways, open up pom.xml and add some plugin repositories:
</p>

<pre class="wikiPreformatted">
&lt;pluginRepositories&gt;
	&lt;pluginRepository&gt;
		&lt;id&gt;jfrog&lt;/id&gt;
		&lt;url&gt;http://repo.jfrog.org/artifactory/plugins-releases/&lt;/url&gt;
	&lt;/pluginRepository&gt;
	&lt;pluginRepository&gt;
		&lt;id&gt;maven plugins&lt;/id&gt;
		&lt;url&gt;http://maven-annotation-plugin.googlecode.com/svn/trunk/mavenrepo/&lt;/url&gt;
	&lt;/pluginRepository&gt;
&lt;/pluginRepositories&gt;
</pre>


<p class="wikiPara">
The maven-compiler-plugin will need an argument to not process annotations automagically once we slap jpamodelgen on the classpath
</p>

<pre class="wikiPreformatted">
&lt;configuration&gt;
	&lt;source&gt;1.6&lt;/source&gt;
	&lt;target&gt;1.6&lt;/target&gt;
	&lt;compilerArgument&gt;-proc:none&lt;/compilerArgument&gt;
&lt;/configuration&gt;
</pre>


<p class="wikiPara">
and the job should be taken over by our new build-plugins:
</p>

<pre class="wikiPreformatted">
&lt;plugin&gt;
	&lt;groupId&gt;org.bsc.maven&lt;/groupId&gt;
	&lt;artifactId&gt;maven-processor-plugin&lt;/artifactId&gt;
	&lt;version&gt;1.3.5&lt;/version&gt;
	&lt;executions&gt;
		&lt;execution&gt;
			&lt;id&gt;process&lt;/id&gt;
			&lt;goals&gt;
				&lt;goal&gt;process&lt;/goal&gt;
			&lt;/goals&gt;
			&lt;phase&gt;generate-sources&lt;/phase&gt;
			&lt;configuration&gt;
				&lt;outputDirectory&gt;target/metamodel&lt;/outputDirectory&gt;
			&lt;/configuration&gt;
		&lt;/execution&gt;
	&lt;/executions&gt;
	&lt;dependencies&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;org.hibernate&lt;/groupId&gt;
			&lt;artifactId&gt;hibernate-jpamodelgen&lt;/artifactId&gt;
			&lt;version&gt;1.0.0.Final&lt;/version&gt;
		&lt;/dependency&gt;
	&lt;/dependencies&gt;
&lt;/plugin&gt;
&lt;plugin&gt;
	&lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
	&lt;artifactId&gt;build-helper-maven-plugin&lt;/artifactId&gt;
	&lt;version&gt;1.3&lt;/version&gt;
	&lt;executions&gt;
		&lt;execution&gt;
			&lt;id&gt;add-source&lt;/id&gt;
			&lt;phase&gt;generate-sources&lt;/phase&gt;
			&lt;goals&gt;
				&lt;goal&gt;add-source&lt;/goal&gt;
			&lt;/goals&gt;
			&lt;configuration&gt;
				&lt;sources&gt;
					&lt;source&gt;target/metamodel&lt;/source&gt;
				&lt;/sources&gt;
			&lt;/configuration&gt;
		&lt;/execution&gt;
	&lt;/executions&gt;
&lt;/plugin&gt;
</pre>


<p class="wikiPara">
Dan Allen thinks this is a lot of configuration for this task, I'll have to remember to ask if he ever got his simple, elegant solution 
to place the artifacts in usable places ;-)
</p>

<p class="wikiPara">
Run mvn eclipse:eclipse to have the target/metamodel added to eclipse and do the project level Maven, refresh project configuration.
</p>

<p class="wikiPara">
Run the maven build and you should see the Greeting_ class appear in target/metamodel and in the WAR structure. Now let's bring it into use:
</p>

<p class="wikiPara">
First we add EntityManger/EntityManagerFactory producers (the recommeded CDI way of wrapping them)
</p>

<pre class="wikiPreformatted">
package com.acme.greetings;

import javax.enterprise.inject.Produces;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.PersistenceContext;
import javax.persistence.PersistenceUnit;

public class DBFactory
{
   @Produces @GreetingDB @PersistenceContext EntityManager entityManager;
   @Produces @GreetingDB @PersistenceUnit EntityManagerFactory entityManagerFactory;
}
</pre>


<p class="wikiPara">
We also need a qualifier for that
</p>

<pre class="wikiPreformatted">
package com.acme.greetings;

import static java.lang.annotation.ElementType.FIELD;
import static java.lang.annotation.ElementType.METHOD;
import static java.lang.annotation.ElementType.PARAMETER;
import static java.lang.annotation.ElementType.TYPE;
import static java.lang.annotation.RetentionPolicy.RUNTIME;

import java.lang.annotation.Retention;
import java.lang.annotation.Target;

import javax.inject.Qualifier;

@Qualifier
@Retention(RUNTIME)
@Target( { METHOD, FIELD, PARAMETER, TYPE })
public @interface GreetingDB
{
}
</pre>


<p class="wikiPara">
Finally, let's modify or GreetingArchiver:
</p>

<pre class="wikiPreformatted">
package com.acme.greetings;

import java.util.Date;
import java.util.List;

import javax.enterprise.context.ApplicationScoped;
import javax.enterprise.event.Observes;
import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.ParameterExpression;
import javax.persistence.criteria.Root;
import javax.transaction.UserTransaction;

@ApplicationScoped
public class GreetingArchiver
{
   @Inject
   @GreetingDB
   EntityManager db;

   @Inject
   UserTransaction userTransaction;

   CriteriaQuery&lt;Greeting&gt; loadQuery;
   ParameterExpression&lt;Date&gt; timestampParam;

   @Inject
   public void initQuery(@GreetingDB EntityManagerFactory emf)
   {
      CriteriaBuilder cb = emf.getCriteriaBuilder();
      timestampParam = cb.parameter(Date.class);
      loadQuery = cb.createQuery(Greeting.class);
      Root&lt;Greeting&gt; greeting = loadQuery.from(Greeting.class);
      loadQuery.select(greeting);
      loadQuery.where(cb.greaterThan(greeting.get(Greeting_.created), timestampParam));
   }

   public void saveGreeting(@Observes @Added Greeting greeting)
   {
      try
      {
         userTransaction.begin();
         db.joinTransaction();
         db.persist(greeting);
         db.flush();
         userTransaction.commit();
      }
      catch (Exception e)
      {
         e.printStackTrace();
         // The recommended way of dealing with exceptions, right?
      }
   }

   public List&lt;Greeting&gt; loadGreetings()
   {
      Date tenMinutesAgo = new Date();
      tenMinutesAgo.setTime(tenMinutesAgo.getTime() - 10 * 60 * 1000);
      return db.createQuery(loadQuery).setParameter(timestampParam, tenMinutesAgo).getResultList();
   }
}
</pre>


<h1 class="wikiHeadline1" id="H-BeanValidation"><a href="/2010/06/07/a-hitchhikers-guide-to-java-ee-6-application-setup-part-iii#H-BeanValidation">Bean Validation</a></h1>

<p class="wikiPara">
Adding Bean Validation is a breeze, just stick the annotations on the entity fields in Greeting:
</p>

<pre class="wikiPreformatted">
@Size(min = 1, max = 50)
String text;
</pre>


<p class="wikiPara">
and attach a message to the input field in greetings.xhtml:
</p>

<pre class="wikiPreformatted">
&lt;ice:inputText id="feedback" value="#{greetingBean.greeting.text}" effect="#{greetingBean.appear}"/&gt;
&lt;h:message for="feedback" /&gt;
</pre>


<p class="wikiPara">
I tried placing a @NotNull on text but it still failed on submit because the values came in as empty string (might be this is the designed
behavior) so I used min = 1 instead.
</p>

<h1 class="wikiHeadline1" id="H-Envers"><a href="/2010/06/07/a-hitchhikers-guide-to-java-ee-6-application-setup-part-iii#H-Envers">Envers</a></h1>

<p class="wikiPara">
If you would like to have auditing on your entities, you need to add the Envers dep to pom.xml
</p>

<pre class="wikiPreformatted">
&lt;dependency&gt;
	&lt;groupId&gt;org.hibernate&lt;/groupId&gt;
	&lt;artifactId&gt;hibernate-envers&lt;/artifactId&gt;
	&lt;version&gt;3.5.1-Final&lt;/version&gt;
	&lt;scope&gt;provided&lt;/scope&gt;
&lt;/dependency&gt;
</pre>


<p class="wikiPara">
I cheated a little and marked it <q>provided</q> as it was pulling in a lot of deps. I downloaded the envers.jar and dropped it in the server
common lib with it's other hibernate buddy-jar:s. After that we can stick an annotation on the entity
</p>

<pre class="wikiPreformatted">
@Entity
@Audited
public class Greeting
</pre>


<p class="wikiPara">
Last but not least to enjoy automatic data auditing we need to add the Envers listeners to persistence.xml
</p>

<pre class="wikiPreformatted">
&lt;property name="hibernate.ejb.event.post-insert"
	value="org.hibernate.ejb.event.EJB3PostInsertEventListener,org.hibernate.envers.event.AuditEventListener" /&gt;
&lt;property name="hibernate.ejb.event.post-update"
	value="org.hibernate.ejb.event.EJB3PostUpdateEventListener,org.hibernate.envers.event.AuditEventListener" /&gt;
&lt;property name="hibernate.ejb.event.post-delete"
	value="org.hibernate.ejb.event.EJB3PostDeleteEventListener,org.hibernate.envers.event.AuditEventListener" /&gt;
&lt;property name="hibernate.ejb.event.pre-collection-update"
	value="org.hibernate.envers.event.AuditEventListener" /&gt;
&lt;property name="hibernate.ejb.event.pre-collection-remove"
	value="org.hibernate.envers.event.AuditEventListener" /&gt;
&lt;property name="hibernate.ejb.event.post-collection-recreate"
	value="org.hibernate.envers.event.AuditEventListener" /&gt;		
</pre>


<p class="wikiPara">
This concludes part II, next time we'll be looking at EJB:s and MDB:s in more details. And perhaps abandoning our WAR-only utopia for now.
Guess I'll have to learn about the maven EJB plugin. Hints for good tutorials accepted.
</p>

<p class="wikiPara">
PS. Have you checked the size of the WAR file after you've taken all these technologies into use? Around 320k. And of those ~85% are the 
ICEfaces libs (the only external deps)
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> <a href="http://in.relation.to/Bloggers/AHitchhikersGuideToJavaEE6ApplicationSetupPartI" target="" class="regularLink">part I </a>
</li>
<li class="wikiUnorderedListItem"> <a href="http://in.relation.to/Bloggers/AHitchhikersGuideToJavaEE6ApplicationSetupPartII" target="" class="regularLink">part II </a>
</li>
<li class="wikiUnorderedListItem"> <a href="http://in.relation.to/Bloggers/AHitchhikersGuideToJavaEE6ApplicationSetupPartIV" target="" class="regularLink">part IV </a>
</li>
<li class="wikiUnorderedListItem"> <a href="http://in.relation.to/Bloggers/AHitchhikersGuideToJavaEE6ApplicationSetupPartV" target="" class="regularLink">part V </a>
</li>
</ul>
</div>

