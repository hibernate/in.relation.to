---
title: "A Hitchhikers Guide to Java EE 6 application setup, Part V"
author: "Nicklas Karlsson"
blogger_name: "Nicklas"
creation_date: "22-06-2010"
original_tags: []
tags: [Java EE]

relative_url: /2010/06/22/a-hitchhikers-guide-to-java-ee-6-application-setup-part-v
slug: a-hitchhikers-guide-to-java-ee-6-application-setup-part-v
lace: http://in.relation.to/15914.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2010/06/22/a-hitchhikers-guide-to-java-ee-6-application-setup-part-v
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
In this shortish part, we'll add some interfaces to our application so external users can read the current greetings.
Expanding the interfaces so greetings can be added is left as an exercise for the reader
</p>

<h1 class="wikiHeadline1" id="H-JAXRS"><a href="/2010/06/22/a-hitchhikers-guide-to-java-ee-6-application-setup-part-v#H-JAXRS">JAX-RS</a></h1>

<p class="wikiPara">
REST is hip (and now in EE 6 as JAX-RS) so let's throw it in. Add
</p>

<pre class="wikiPreformatted">
package com.acme.greetings;

import java.util.List;

import javax.inject.Inject;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;

@Path(value = "/RESTExport")
public class RESTExporter
{

   @Inject
   GreetingServer greetingServer;

   @GET
   @Path("/greetings")
   @Produces("application/xml")
   public List&lt;Greeting&gt; getGreetings()
   {
      return greetingServer.getGreetings();
   }

}
</pre>


<p class="wikiPara">
That fetches the current greetings (notice the injection) from the server and presents them in XML format. To hook up
the JAX-RS implementation, RESTEasy, add the following to web.xml
</p>

<pre class="wikiPreformatted">
&lt;context-param&gt;
	&lt;param-name&gt;resteasy.scan&lt;/param-name&gt;
	&lt;param-value&gt;true&lt;/param-value&gt;
&lt;/context-param&gt;
&lt;context-param&gt;
	&lt;param-name&gt;resteasy.servlet.mapping.prefix&lt;/param-name&gt;
	&lt;param-value&gt;/resteasy&lt;/param-value&gt;
&lt;/context-param&gt;
&lt;listener&gt;
	&lt;listener-class&gt;org.jboss.resteasy.plugins.server.servlet.ResteasyBootstrap&lt;/listener-class&gt;
&lt;/listener&gt;
&lt;servlet&gt;
	&lt;servlet-name&gt;Resteasy&lt;/servlet-name&gt;
	&lt;servlet-class&gt;org.jboss.resteasy.plugins.server.servlet.HttpServletDispatcher&lt;/servlet-class&gt;
&lt;/servlet&gt;
&lt;servlet-mapping&gt;
	&lt;servlet-name&gt;Resteasy&lt;/servlet-name&gt;
	&lt;url-pattern&gt;/resteasy/*&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;
</pre>


<p class="wikiPara">
and the @XMLRootElement annotation to the top of our Greeting class
</p>

<pre class="wikiPreformatted">
@Entity
@Audited
@XmlRootElement
public class Greeting
</pre>


<p class="wikiPara">
Your greetings should now be available from /Greetings/resteasy/RESTExport/greetings.
</p>

<h1 class="wikiHeadline1" id="H-JAXWS"><a href="/2010/06/22/a-hitchhikers-guide-to-java-ee-6-application-setup-part-v#H-JAXWS">JAX-WS</a></h1>

<p class="wikiPara">
Adding a Web Service is even more simple. Add
</p>

<pre class="wikiPreformatted">
package com.acme.greetings;

import java.util.List;

import javax.inject.Inject;
import javax.jws.WebService;

@WebService
public class WebServiceExporter
{
   @Inject
   GreetingServer greetingServer;

   public List&lt;Greeting&gt; getGreetings()
   {
      return greetingServer.getGreetings();
   }

}
</pre>


<p class="wikiPara">
That does a similar job as our RESTExporter and then hook it up in web.xml
</p>

<pre class="wikiPreformatted">
&lt;servlet&gt;
	&lt;servlet-name&gt;WSExport&lt;/servlet-name&gt;
	&lt;servlet-class&gt;com.acme.greetings.WebServiceExporter&lt;/servlet-class&gt;
&lt;/servlet&gt;
&lt;servlet-mapping&gt;
	&lt;servlet-name&gt;WSExport&lt;/servlet-name&gt;
	&lt;url-pattern&gt;/WebServiceExport/*&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;
</pre>


<p class="wikiPara">
Hmm. Wonder if you can make it auto-register? Anyway, the WDSL should be viewable from /Greetings/WebServiceExport?wsdl
</p>

<h1 class="wikiHeadline1" id="H-Conclusion"><a href="/2010/06/22/a-hitchhikers-guide-to-java-ee-6-application-setup-part-v#H-Conclusion">Conclusion</a></h1>

<p class="wikiPara">
This was a short one. Partly because setting things up is really straightforward and don't require us to do that many
workarounds. Hopefully, once Aslak finishes the Arqullian DBUnit integration (I already heard rumors on JSFUnit integration)
I can be back with a more thorough article on testing all parts of the application.
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"><a href="http://in.relation.to/Bloggers/AHitchhikersGuideToJavaEE6ApplicationSetupPartI" target="" class="regularLink">Part I</a></li>
<li class="wikiUnorderedListItem"><a href="http://in.relation.to/Bloggers/AHitchhikersGuideToJavaEE6ApplicationSetupPartII" target="" class="regularLink">Part II</a></li>
<li class="wikiUnorderedListItem"><a href="http://in.relation.to/Bloggers/AHitchhikersGuideToJavaEE6ApplicationSetupPartIII" target="" class="regularLink">Part III</a></li>
<li class="wikiUnorderedListItem"><a href="http://in.relation.to/Bloggers/AHitchhikersGuideToJavaEE6ApplicationSetupPartIV" target="" class="regularLink">Part IV</a></li>
</ul>
</div>

