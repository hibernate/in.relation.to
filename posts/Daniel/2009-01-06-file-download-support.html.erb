---
title: "File download support"
author: "Daniel Roth"
blogger_name: "Daniel"
creation_date: "06-01-2009"
original_tags: [Seam,Seam News]
tags: [Seam]

relative_url: /2009/01/06/file-download-support
slug: file-download-support
lace: http://in.relation.to/10412.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2009/01/06/file-download-support
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
Web applications often need to provide a link for the user to download a file, such as an expense report. Seam 2.1.2.CR1 makes the task of serving a file to the user easy and RESTful using a combination of the s:resource and s:download tags. But before we can use these tags, we need to do some simple configuration.
</p>

<p class="wikiPara">
The s:resource tag uses Seam’s DocumentStore to serve (or push) documents. You'll need to configure this servlet in to your web.xml:
</p>

<p class="wikiPara">
web.xml
</p>

<pre class="wikiPreformatted">&lt;servlet&gt;
   &lt;servlet-name&gt;Document Store Servlet&lt;/servlet-name&gt;
   &lt;servlet-class&gt;org.jboss.seam.document.DocumentStoreServlet&lt;/servlet-class&gt;
&lt;/servlet&gt;
&lt;servlet-mapping&gt;
   &lt;servlet-name&gt;Document Store Servlet&lt;/servlet-name&gt;
   &lt;url-pattern&gt;/seam/docstore/*&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;
</pre>


<p class="wikiPara">
Alone in a page, s:resource will act as the file download provider by defining where to get the file data and meta-data. You use it in place of HTML (not inside of HTML) since the intent is to serve the document and not a web page. Thus, the page template should look something like this.
</p>

<p class="wikiPara">
resources.xhtml
</p>

<pre class="wikiPreformatted">&lt;s:resource xmlns="http://www.w3.org/1999/xhtml"
	xmlns:s="http://jboss.com/products/seam/taglib"
	data="#{fileResourceProvider.data}"
	contentType="#{fileResourceProvider.contentType}"
	fileName="#{fileResourceProvider.fileName}" /&gt;
</pre>


<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> data is the actual file data. It may be a java.util.File, an InputStream or a byte[]. </li>
<li class="wikiUnorderedListItem"> contentType (e.g., <q>image/jpeg</q>) </li>
<li class="wikiUnorderedListItem"> filename (e.g., someFile.jpg) which will likely be displayed in the user's file download prompt </li>
</ul>

<p class="wikiPara">
Other attributes are described in the Seam reference documentation.
</p>

<p class="wikiPara">
If we want resources.xml to serve all of our documents (or at least those handled by the fileResourceProvider component), we need to pass one (or many) parameters to it such that it can load the document information and data for a given request. We do that by using request parameters (e.g., <a href="http://localhost/app/resources.seam?fileId=1" target="" class="regularLink">http://localhost/app/resources.seam?fileId=1</a>). There are at least two ways of getting the parameter holding the file id into the fileResourceProvider component. You could use the @RequestParameter annotation;
</p>

<pre class="wikiPreformatted">@RequestParameter
private Long fileId;
</pre>



<p class="wikiPara">
or inject it via pages.xml:
</p>


<pre class="wikiPreformatted">&lt;page view-id=”/resources.xhtml”&gt;
   &lt;param name="fileId" value="#{fileResourceProvider.fileId}"/&gt;
&lt;/page&gt;
</pre>


<p class="wikiPara">
Taking the first approach, the FileResourceProvider.java would then be defined as follows:
</p>

<pre class="wikiPreformatted">
@Name("fileResourceProvider")
@Scope(ScopeType.EVENT)
public class FileResourceProvider
{

   @RequestParameter
   private Long fileId;
   private String fileName;
   private String contentType;
   private byte[] data;

   @Create
   public void create()
   {
      FileItem item = em.find(FileItem.class, fileId); // Get document representation
      this.fileName = item.getFileName();
      this.data = item.getData();
      this.contentType = item.getContentType();
   }
   //.. getters setters
}
</pre>


<p class="wikiPara">
That's all that is needed to serve documents in a RESTful way. To make the creation of the download link even easier, you can use the s:download tag. Here's how it works:
</p>

<pre class="wikiPreformatted">
&lt;s:download src=”/resources.xhtml”&gt;
    &lt;f:param name=”fileId” value=”#{someBean.downloadableFileId}”/&gt;
&lt;/s:download&gt;
</pre>


<p class="wikiPara">
The s:download tag is a variation on the Seam s:link tag. It will generate a bookmarkable link looking something like <a href="http://localhost/resources.seam?fileId=1" target="" class="regularLink">http://localhost/resources.seam?fileId=1</a>. You can then use Seam URL rewriting to translate the link into <a href="http://localhost/resources/1" target="" class="regularLink">http://localhost/resources/1</a>. See examples in the examples/ui in the Seam distribution for further guidance!
</p>
</div>

