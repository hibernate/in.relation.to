---
title: "Seam Module Spotlight: Seam Catch"
author: "Jason Porter"
blogger_name: "JasonP"
creation_date: "11-04-2011"
original_tags: []
tags: [Seam]

relative_url: /2011/04/11/seam-module-spotlight-seam-catch
slug: seam-module-spotlight-seam-catch
lace: http://in.relation.to/19121.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2011/04/11/seam-module-spotlight-seam-catch
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
This is my first in.relation.to entry! Hello everyone, my name is Jason Porter, author of Seam Catch. You'll see more Seam 3 / CDI posts from me in the future, for now, let's get to our first Seam Module spotlight:
</p>

<p class="wikiPara">
For our first entry in the Seam Module spotlight we're placing Seam Catch front and center! Catch is the go to module for handling exceptions in your application. You no longer need to worry about what to do in those catch blocks, or how exceptions will be handled in a uniform manner. As long as you're using Catch (either through an integration via another module such as Servlet, Faces, Rest, etc. or via manual integration it is the same) all of those concerns are taken care of, all you have to do is create the handlers, which are very easy and follow a very deterministic order. The following examples assume you have a basic working knowledge of Catch, to understand the basics please see the <a href="http://docs.jboss.org/seam/3/catch/latest/reference/en-US/html/" target="" class="regularLink">reference documentation</a>.
</p>

<p class="wikiPara">
In this example we want three different actions to happen based on the type of exception:
</p>

<ol class="wikiOrderedList">
<li class="wikiOrderedListItem">  Log each exception</li>
<li class="wikiOrderedListItem">  Rollback the transaction on all <tt>PersistenceException</tt>s</li>
<li class="wikiOrderedListItem">  End the current long running conversation for all of our application exceptions</li>
</ol>

<p class="wikiPara">
This is done by creating three very simple exception handlers:
</p>


<pre class="wikiPreformatted">
    @HandlesExceptions
    public class StandardHandlers {
        public void rollbackTransaction(@Handles CaughtException&lt;PersistenceException&gt; event, UserTransaction tx) {
            try {
                tx.rollback();
            }
            // catch any jta exceptions
            event.handled();
        }

        public void logExceptions(@Handles(during = TraversalMode.BREADTH_FIRST, precedence = Precedence.HIGH) CaughtException&lt;Throwable&gt; evt, Log log) {
            log.error("Exception caught: " + evt.getException().getMessage());
        }

        public void endConversation(@Handles CaughtException&lt;MyBaseApplicationException&gt; evt, Conversation conv) {
            if (!conv.isTransient())
                conv.end();
        }
    }</pre>


<p class="wikiPara">
The first handler (method <tt>rollbackTransaction(...)</tt>) is notified when any <tt>javax.persistence.PersistenceException</tt> is passed to Catch, it also has the current transaction as an injection point. At this point, all we want to is rollback the transaction that was injected. We're also marking the exception as handled, meaning we don't need any further handlers to be notified about this exception.
</p>

<p class="wikiPara">
The next exception handler, <tt>logExceptions(...)</tt> is invoked for every exception that Catch receives. I know you're wondering about that statement in the above paragraph about marking the exception as handled and no other exception handlers will be notified. Catch traverses the exception hierarchy for each exception (and each exception wrapped) looking first for handlers that match the exception hierarchy that are to be notified during the <tt>BREADTH_FIRST</tt> cycle, then handlers that are marked as <tt>DEPTH_FIRST</tt> (the default). You'll notice our logging handler is <tt>BREADTH_FIRST</tt> and also pertains to all instances of <tt>Throwable</tt>, it also has a high precedence, meaning any other handlers of the same type (<tt>Throwable</tt>) will be notified after this handler executes. We're simply going to log this exception and continue on with the rest of the handlers (by default a handler that does not invoke any of the handler chain status methods will be treated as <tt>markAsHandled()</tt> and continue with the rest of the handlers). Any handler that has already been called for a particular exception passed to Catch will never be called more than once.
</p>

<p class="wikiPara">
The last handler in our example is <tt>endConversation(...)</tt>. Again, not very much to do here, ideally your handlers should be fairly simple. We're simply checking to see if the user has a long running conversation and ending that conversation when Catch receives an application exception, meaning an exception specific to your application; in other words, an exception you have created. This handler will be be notified after the logging handler.
</p>

<p class="wikiPara">
That about wraps it up for this edition of Seam Module spot... what, how do you pass an exception to Catch? This question has come up a few times on the Seam Forums, so I'll answer it here. If you are using another Seam Module that has Catch integration (at the time of writing those are Servlet, Faces and Rest): nothing, it's already done for you! Any exception that is not explicitly handled via a try/catch block will be passed to Catch. In Faces it uses the JSF2 exception handling APIs to pass all exceptions to Catch, with Rest it uses the JAX-RS exception handling APIs and with Servlet, a servlet filter that is around each request passes the exception to Catch. If you are not using one of these other modules, or you want Catch to be used in your own try/catch blocks you need to do a manual integration by using the CDI <tt>Event</tt> class:
</p>

<pre class="wikiPreformatted">
    public MyClass {
        ...
        @Inject Event&lt;ExceptionToCatch&gt; catchEvt 

        try {
            ...
        }
        catch (...) {
            catchEvt.fire(new ExceptionToCatch(Exception));
        }

        ....
    }
</pre>


<p class="wikiPara">
That's it, two lines of CDI code and Catch can be used for all your exception handling needs! With that, thank you for reading our first Seam Module spotlight! Stay tuned for spotlights on other Seam Modules. Other Catch Spotlights may include StackTrace Filtering: the ability to modify the stack trace of an exception, and exception mapping: the very handy feature of changing an exception for another exception such as mapping <tt>SQLException</tt> instances to actual meaningful exceptions, similar to what's available in the Spring Framework, but can be easily customized to your own application. </p>
</div>

