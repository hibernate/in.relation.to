---
title: "Handling failure with Hibernate"
author: "Max Andersen"
blogger_name: "Max"
creation_date: "30-09-2008"
original_tags: [Hibernate]
tags: []

relative_url: /2008/09/30/handling-failure-with-hibernate
slug: handling-failure-with-hibernate
lace: http://in.relation.to/9450.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2008/09/30/handling-failure-with-hibernate
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
I'm sitting in at <a href="http://www.michaelnygard.com/" target="" class="regularLink">Michael Nygard</a>'s talk at <a href="http://wwww.jaoo.dk" target="" class="regularLink">JAOO</a> about handling failure in production systems. He wrote 'Release It!' a pattern book that describes common anti-patterns and illustrates how they can cause massive downtimes and lost business. During his talk he called out ORM Tools to be bad at handling some of these which urged me to make this blog. 
</p>

<h1 class="wikiHeadline1" id="H-UnboundedResultSet"><a href="/2008/09/30/handling-failure-with-hibernate#H-UnboundedResultSet">Unbounded result set</a></h1>
<p class="wikiPara">
He mentioned ORM Tools are bad at handling the pattern he calls <q>Unbounded result set</q> which is done by applications assuming that a query will only return a few records but when put into production the query suddenly starts returning million of rows instead of those few that were in the development/test systems.
</p>

<p class="wikiPara">
I asked Michael what he actually meant by this since Hibernate have always had <a href="http://www.hibernate.org/hib_docs/v3/reference/en-US/html_single/#objectstate-querying-executing-pagination" target="" class="regularLink">pagniation support</a> allowing you to safely iterate over results in a controlled manner:
</p>

<pre class="wikiPreformatted">
Query q = sess.createQuery("from OrderLines lines where lines.order = :id")
           .setProperties(order)
           .setFirstResult(20).setMaxResults(10)
List lines = q.list();
</pre>


<p class="wikiPara">
It turns out what Michael was referring to (as I expected) was that developers instead of doing focused queries maps where mapping their complete object model blindly and was doing this instead:
</p>

<pre class="wikiPreformatted">
List lines = order.getOrderLines();
</pre>


<p class="wikiPara">
which probably works fine in 99% of the cases because there seldom are more than a few records in an Order, but sometimes you got an enterprise making a big order and you can end up with thousands line items which can have a ripple effect on the memory and cpu usage when each orderline and its connected objects starts to be fetched/used.
</p>

<p class="wikiPara">
In my mind that is not really the fault of the ORM Tool, but more that Java's collections does not have the API to provide a transparent iteration over large collections. But saying that does not make the problem go away, some ORM Tools solves this with vendor specific collection's - in Hibernate we have Collection filters:
</p>

<pre class="wikiPreformatted">Collection lines = session.createFilter(
    order.getOrderLines(), "")
    .setFirstResult(20).setMaxResults(10)
    .list();</pre>


<p class="wikiPara">
This gives you the exact same pagniation features on mapped collections as normal queries and helps you avoid the <q>Unbound Result Set</q> anti-pattern. 
</p>

<h1 class="wikiHeadline1" id="H-Timeouts"><a href="/2008/09/30/handling-failure-with-hibernate#H-Timeouts">Timeouts</a></h1>

<p class="wikiPara">
Another issue Michael urged developers to take care of is to always use timeouts for any remote calls, incl. database queries.
</p>

<p class="wikiPara">
Timeouts are important to use when you are accessing external systems which might become overloaded and start having slow response times or maybe even never respond. 
</p>

<p class="wikiPara">
Hibernate have support for <a href="http://www.hibernate.org/hib_docs/v3/reference/en-US/html_single/#transactions-demarcation-timeout" target="" class="regularLink">Transaction time outs</a>:
</p>

<pre class="wikiPreformatted">
try {
    //set transaction timeout to 3 seconds
    sess.getTransaction().setTimeout(3);
    sess.getTransaction().begin();

    // do some work
    ...

    sess.getTransaction().commit()
}
catch (RuntimeException e) {
    sess.getTransaction().rollback();
    throw e; // or display error message
}
finally {
    sess.close();
}
</pre>


<p class="wikiPara">
and <a href="http://www.hibernate.org/hib_docs/v3/api/org/hibernate/Query.html#setTimeout(int)" target="" class="regularLink">Query timeouts</a>. 
</p>

<pre class="wikiPreformatted">
Query q = sess.createQuery("from OrderLines lines where lines.order = :id")
           .setProperties(order)
           .setFirstResult(20).setMaxResults(10)
           .setTimeOut(3);
List lines = q.list();
</pre>


<p class="wikiPara">
which can also be used on the Collection filters:
</p>

<pre class="wikiPreformatted">Collection lines = session.createFilter(
    order.getOrderLines(), "")
    .setFirstResult(20).setMaxResults(10)
    .setTimeout(3)
    .list();
</pre>


<p class="wikiPara">
Hibernate does not do anything magically here we just delegate the timeout to the underlying systems thus the functionality are dependent on your database or application server vendors implementing the standard timeout functionalities.  
</p>

<p class="wikiPara">
I hope Michael will be glad to know (I know he knows ;) that if you by accident repeats some of these anti-patterns Hibernate does have the features to allow you to avoid them.
</p>

</div>

