---
title: "Pop Quiz: Does Connection.close() result in commit or rollback ?"
author: "Max Andersen"
blogger_name: "Max"
creation_date: "20-10-2005"
original_tags: []
tags: []

relative_url: /2005/10/20/pop-quiz-does-connectionclose-result-in-commit-or-rollback
slug: pop-quiz-does-connectionclose-result-in-commit-or-rollback
lace: http://in.relation.to/2104.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2005/10/20/pop-quiz-does-connectionclose-result-in-commit-or-rollback
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
Earlier today I saw a transaction question targeted for a completely
different audience pop up as the first headline news item on a well
known java news site.
 
Besides giving me and my colleagues a good laugh
about bugs and transactions it also touched upon one of the questions
that have given me a couple of free beers in bar bets and been
mind-boggling for students during trainings.
 
The question relates to the following (simplified) code:
</p>

<pre class="wikiPreformatted">
Connection con = DriverManager.getConnection(url, name, pwd);
con.setAutoCommit(false);
Statement st = con.prepareStatement("delete VITAL_DATA");
st.executeUpdate();
con.close();
</pre>


<p class="wikiPara">
Assuming that <tt>VITAL_DATA</tt> contains data before we execute this code,
will it still contain those data after the call to <tt>con.close()</tt>?
</p>

<p class="wikiPara">
Yes or No ?
</p>

<p class="wikiPara">
The answer is: It depends!
</p>

<p class="wikiPara">
If this code were executed against an Oracle database <tt>VITAL_DATA</tt> will no longer contain data since Oracle implicitly calls <tt>commit()</tt> if
your connection has <q>left over</q> changes.
</p>

<p class="wikiPara">
It is about here people starts arguing with me and say I'm crazy!
No way that is possible, because all developers who believe in the
goodness of transactions and its ACID properties would state that
nothing should be committed to a database without an explicit call to
<tt>commit()</tt> when not running in auto-commit mode - anything else would be a sin.
</p>

<p class="wikiPara">
Well, I guess Oracle like to be sinful, and it is even documented.
</p>

<p class="wikiPara">
/Page 3-14, Oracle9i JDBC Developers Guide and Reference/ contains the
following text:
</p>

<pre class="wikiPreformatted">
If auto-commit mode is disabled and you close the connection
without explicitly committing or rolling back your last changes,
then an implicit &lt;code&gt;COMMIT&lt;/code&gt; operation is executed.
</pre>


<p class="wikiPara">
I heard from an Oracle tech-guy that this behavior is a left over from
how the old OCI library worked - whether that is true or not I don't
know; but it sure is a surprise for most developers I have shown this
too (including my self the first time I bumped into this issue).
</p>

<p class="wikiPara">
After discovering this a couple of years back I went to look in the
JDBC spec to see who is to <q>blame</q> for this behavior.
</p>

<p class="wikiPara">
The <q>fun</q> part is that I have not been able to find anything about the
behavior of <code>close()</code> in JDBC besides the following text from
the /JDBC 4.0/ spec:
</p>

<pre class="wikiPreformatted">
When auto-commit is disabled, each transaction must be explicitly committed by
calling the Connection method commit or explicitly rolled back by calling the
Connection method rollback, respectively.
</pre>


<p class="wikiPara">
The javadoc for <tt>close()</tt> states:
</p>

<pre class="wikiPreformatted">
Releases this Connection object's database and JDBC resources
immediately instead of waiting for them to be automatically released
</pre>


<p class="wikiPara">
From a naive ACID believing person I would say Oracle are wrong on
this, but notice how the specification only mentions how the
transaction behaves ? It does not explicitly state that <tt>close()</tt> is
not allowed to commit the data, only that it should release resources
(which it does!)
</p>

<p class="wikiPara">
Thus from my perspective Oracle is walking on an edge here, but
apparently without breaking the spec. Note that it might also occur on
other databases, but it has never occurred for me on the other major
databases I have worked with.
</p>

<p class="wikiPara">
Lessons learned ? <i class="wikiEmphasis">Always</i> explicitly (or declaratively) commit or rollback your transactions!
</p>
</div>

