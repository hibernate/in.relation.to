---
title: "Using the jboss-as maven plugin to deploy DataSources to AS7"
author: "Stuart Douglas"
blogger_name: "Stuart"
creation_date: "19-08-2011"
original_tags: []
tags: [JBoss AS]

relative_url: /2011/08/19/using-the-jbossas-maven-plugin-to-deploy-data-sources-to-as-7
slug: using-the-jbossas-maven-plugin-to-deploy-data-sources-to-as-7
lace: http://in.relation.to/21611.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2011/08/19/using-the-jbossas-maven-plugin-to-deploy-data-sources-to-as-7
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
With the 7.0.1 release of AS7 comes a new release of the <a href="https://github.com/jbossas/jboss-as-maven-plugin" target="" class="regularLink">JBoss AS7 Maven Plugin</a>. In addition to allowing you to deploy your apps to AS7, the plugin now has the ability to automatically add datasources to a running AS7 instance. 
</p>

<p class="wikiPara">
Deploying a datasource is a two stage process, first we have to deploy the driver, then we setup a datasource through the AS7 management api. The example below walks you through the process of deploying a postgresql datasource, but for the impatient among you a complete example can be found <a href="https://github.com/stuartwdouglas/quickstart/blob/master/datasource/pom.xml" target="" class="regularLink">here</a>. 
</p>

<h1 class="wikiHeadline1" id="H-DeployingADatabaseDriver"><a href="/2011/08/19/using-the-jbossas-maven-plugin-to-deploy-data-sources-to-as-7#H-DeployingADatabaseDriver">Deploying a database driver</a></h1>

<p class="wikiPara">
To deploy a database driver we first have to list our driver in the &lt;dependencies&gt; section of pom.xml:
</p>

<pre class="wikiPreformatted lang='XML'">&lt;dependencies&gt;
  &lt;dependency&gt;
    &lt;groupId&gt;postgresql&lt;/groupId&gt;
    &lt;artifactId&gt;postgresql&lt;/artifactId&gt;
    &lt;version&gt;8.4-702.jdbc4&lt;/version&gt;
  &lt;/dependency&gt;
&lt;/dependencies&gt;
</pre>
<p class="wikiPara">
 
</p>

<p class="wikiPara">
We then have to setup the JBoss AS7 Maven plugin to deploy the datasource to the app server:
</p>

<pre class="wikiPreformatted">
&lt;plugin&gt;
    &lt;groupId&gt;org.jboss.as.plugins&lt;/groupId&gt;
    &lt;artifactId&gt;jboss-as-maven-plugin&lt;/artifactId&gt;
    &lt;executions&gt;
        &lt;execution&gt;
            &lt;id&gt;deploy-driver&lt;/id&gt;
            &lt;phase&gt;package&lt;/phase&gt;
            &lt;configuration&gt;
                &lt;groupId&gt;postgresql&lt;/groupId&gt;
                &lt;artifactId&gt;postgresql&lt;/artifactId&gt;
                &lt;name&gt;postgresql.jar&lt;/name&gt;
            &lt;/configuration&gt;
            &lt;goals&gt;
                &lt;goal&gt;deploy-artifact&lt;/goal&gt;
            &lt;/goals&gt;
        &lt;/execution&gt;
    &lt;/executions&gt;
&lt;/plugin&gt;
</pre>


<p class="wikiPara">
Running <i class="wikiEmphasis">mvn package</i> will now connect to a running AS7 instance on localhost and deploy the driver as a deployment named <i class="wikiEmphasis">postgresql.jar</i>. 
</p>

<p class="wikiPara">
Note that this capability it not limited to just deploying database drivers, using the <i class="wikiEmphasis">deploy-artifact</i> goal it is possible to deploy any maven artifact to the app server.
</p>

<h1 class="wikiHeadline1" id="H-CreatingTheDataSource"><a href="/2011/08/19/using-the-jbossas-maven-plugin-to-deploy-data-sources-to-as-7#H-CreatingTheDataSource">Creating the DataSource</a></h1>

<p class="wikiPara">
Now that we have our driver deployed, we need to create the DataSource. To do this, we will need to update our pom again so it looks like this:
</p>

<pre class="wikiPreformatted">
&lt;plugin&gt;
    &lt;groupId&gt;org.jboss.as.plugins&lt;/groupId&gt;
    &lt;artifactId&gt;jboss-as-maven-plugin&lt;/artifactId&gt;
    &lt;executions&gt;
        &lt;execution&gt;
            &lt;id&gt;deploy-driver&lt;/id&gt;
            &lt;phase&gt;package&lt;/phase&gt;
            &lt;configuration&gt;
                &lt;groupId&gt;postgresql&lt;/groupId&gt;
                &lt;artifactId&gt;postgresql&lt;/artifactId&gt;
                &lt;name&gt;postgresql.jar&lt;/name&gt;
            &lt;/configuration&gt;
            &lt;goals&gt;
                &lt;goal&gt;deploy-artifact&lt;/goal&gt;
            &lt;/goals&gt;
        &lt;/execution&gt;
        &lt;execution&gt;
            &lt;id&gt;add-datasource&lt;/id&gt;
            &lt;phase&gt;install&lt;/phase&gt;
            &lt;configuration&gt;
                &lt;address&gt;subsystem=datasources,data-source=myDatasource&lt;/address&gt;
                &lt;properties&gt;
                    &lt;connection-url&gt;jdbc:postgresql://localhost/myDatabase&lt;/connection-url&gt;
                    &lt;jndi-name&gt;myDatasource&lt;/jndi-name&gt;
                    &lt;enabled&gt;true&lt;/enabled&gt;
                    &lt;pool-name&gt;myPool&lt;/pool-name&gt;
                    &lt;user-name&gt;dmusername&lt;/user-name&gt;
                    &lt;password&gt;secret&lt;/password&gt;
                    &lt;driver-name&gt;postgresql.jar&lt;/driver-name&gt;
                &lt;/properties&gt;
            &lt;/configuration&gt;
            &lt;goals&gt;
                &lt;goal&gt;add-resource&lt;/goal&gt;
            &lt;/goals&gt;
        &lt;/execution&gt;
    &lt;/executions&gt;
&lt;/plugin&gt;

</pre>


<p class="wikiPara">
With this configuration running <i class="wikiEmphasis">mvn install</i> should deploy a Postgresql datasource to AS7. 
</p>


<p class="wikiPara">
For some more examples, including XA DataSource and MySQL examples, please see my example pom.xml at <a href="https://github.com/stuartwdouglas/quickstart/blob/master/datasource/pom.xml" target="" class="regularLink">https://github.com/stuartwdouglas/quickstart/blob/master/datasource/pom.xml</a>.
</p>



<h1 class="wikiHeadline1" id="H-HowItWorks"><a href="/2011/08/19/using-the-jbossas-maven-plugin-to-deploy-data-sources-to-as-7#H-HowItWorks">How it works</a></h1>

<p class="wikiPara">
You may have noticed about that the name of the maven goal is add-resource, rather than add-datasource. This is because the plugin is not limited to just adding datasources, but can also be used to add other resources to AS7. Internally the plugin uses the AS7 management API, and the &lt;address&gt; and &lt;properties&gt; elements correspond exactly to the management API / command line equivalents. This means that we can add other resources as well, e.g. JMS Queues.
</p>

<p class="wikiPara">
The first thing we need to do is figure out the syntax we need to use to add a JMS Queue. To do this we are going to use the command line client. Fire up an instance of AS7, and then in another terminal window run <i class="wikiEmphasis">jboss-admin.sh</i> in the bin directory. You should see the following:
</p>

<pre class="wikiPreformatted">
You are disconnected at the moment. Type 'connect' to connect to the server or 'help' for the list of supported commands.
[disconnected /]
</pre>


<p class="wikiPara">
Type <i class="wikiEmphasis">connect</i> and you should connect to the running AS7 instance. Now we need to figure out the syntax to add a JMS Queue. To do this we run the following command:
</p>

<pre class="wikiPreformatted">
[standalone@localhost:9999 /] /subsystem=messaging/jms-queue=*:read-operation-description(name="add")
</pre>


<p class="wikiPara">
This should give us the following result:
</p>

<pre class="wikiPreformatted">
{
    "outcome" =&gt; "success",
    "result" =&gt; {
        "operation-name" =&gt; "add",
        "description" =&gt; "Add a queue.",
        "request-properties" =&gt; {
            "entries" =&gt; {
                "type" =&gt; LIST,
                "description" =&gt; "The jndi names the queue will be bound to.",
                "required" =&gt; true,
                "nillable" =&gt; false
            },
            "selector" =&gt; {
                "type" =&gt; STRING,
                "description" =&gt; "The queue selector.",
                "required" =&gt; false,
                "nillable" =&gt; true
            },
            "durable" =&gt; {
                "type" =&gt; BOOLEAN,
                "description" =&gt; "Whether the queue is durable or not.",
                "required" =&gt; false,
                "nillable" =&gt; true
            }
        },
        "reply-properties" =&gt; {}
    }
}
</pre>


<p class="wikiPara">
This output means that the operation has three parameters, <i class="wikiEmphasis">entries</i>, <i class="wikiEmphasis">selector</i> and <i class="wikiEmphasis">durable</i>, Of type List, String, and Boolean respectively. Using this information we can add queue on the command line as follows:
</p>

<pre class="wikiPreformatted">
[standalone@localhost:9999 /] /subsystem=messaging/jms-queue=cmdLineQueue:add(entries=["java:jboss/cmdLineQueue"], durable=true)
{"outcome" =&gt; "success"}
</pre>


<p class="wikiPara">
Now lets re-create this from the maven plugin:
</p>


<pre class="wikiPreformatted">
&lt;plugin&gt;
    &lt;groupId&gt;org.jboss.as.plugins&lt;/groupId&gt;
    &lt;artifactId&gt;jboss-as-maven-plugin&lt;/artifactId&gt;
    &lt;executions&gt;
        &lt;execution&gt;
            &lt;id&gt;add-queue&lt;/id&gt;
            &lt;phase&gt;install&lt;/phase&gt;
            &lt;configuration&gt;
                &lt;address&gt;subsystem=messaging,jms-queue=myQueue&lt;/address&gt;
                &lt;properties&gt;
                    &lt;entries&gt;!!["java:jboss/myQueue", "java:jboss/anotherJndiBinding"]&lt;/entries&gt;
                    &lt;durable&gt;true&lt;/durable&gt;
                &lt;/properties&gt;
            &lt;/configuration&gt;
            &lt;goals&gt;
                &lt;goal&gt;add-resource&lt;/goal&gt;
            &lt;/goals&gt;
        &lt;/execution&gt;
    &lt;/executions&gt;
&lt;/plugin&gt;

</pre>


<p class="wikiPara">
The most interesting part of the above configuration is the &lt;entries&gt; element. Because the parameter is of a non-primitive type (in this case LIST), it must be specified as a <a href="https://docs.jboss.org/author/display/AS7/Detyped+management+and+the+jboss-dmr+library" target="" class="regularLink">DMR String</a>. The <i class="wikiEmphasis">!!</i> escape as the start of the test tells the plugin to interpret it as such.
</p>



</div>

