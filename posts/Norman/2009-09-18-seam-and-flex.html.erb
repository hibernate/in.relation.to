---
title: "Seam and Flex"
author: "Norman Richards"
blogger_name: "Norman"
creation_date: "18-09-2009"
original_tags: []
tags: [Seam]

relative_url: /2009/09/18/seam-and-flex
slug: seam-and-flex
lace: http://in.relation.to/12339.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2009/09/18/seam-and-flex
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
If the forums are any indication, there's quite a bit of interest in the Seam community for adding <a href="http://www.adobe.com/products/flex/" target="" class="regularLink">Flex</a> interfaces to Seam applications.  Members of the seam community have stepped forward and put together some interesting examples of Seam and Flex working together, and that's been good enough for our more ambitious users.  But now it's time to make that integration a bit more formal.  So with that, we've added the first round of Flex support to Seam.  
</p>

<p class="wikiPara">
We're starting with a simple solution for Flex remoting to Seam applications using <a href="http://opensource.adobe.com/wiki/display/blazeds/BlazeDS/" target="" class="regularLink">BlazeDS</a>.  Getting going with Seam involves adding <tt>jboss-seam-flex.jar</tt> to your application, along with the BlazeDS libraries.  The BlazeDS <tt>MessageBroker</tt>, which responds to requests from the Flex client, is instantiated and managed my the Seam Flex filter:
</p>

<pre class="wikiPreformatted">&lt;flex:flex-filter url-pattern="/messagebroker/*" /&gt;</pre>


<p class="wikiPara">
With that, your Flex application can talk to your Seam application.  Obviously it wouldn't be wise to expose all your Seam components for remote access automatically.  Individual components can be enabled for Flex remoting with a single annotation:
</p>

<pre class="wikiPreformatted">
@Name("org.jboss.seam.example.flex.foo")
@FlexRemote(name="foo")
public class Foo
{
   public void ping() {
      System.out.println("ping!");
   }
}
</pre>


<p class="wikiPara">
This annotation causes Seam to add a named remoting destination on the default channel, which can immediately be accessed as a <tt>\&lt;mx:RemoteObject&gt;</tt> in a Flex application.  The minimal mxml on the client side would be:   
</p>

<pre class="wikiPreformatted">&lt;mx:RemoteObject id="remoteFoo" destination="foo" /&gt;</pre>


<p class="wikiPara">
This declares a remote objection.  The destination name should match the destination name on the @FlexRemote annotation.  
</p>

<pre class="wikiPreformatted">&lt;mx:Button id="button" label="Click Me!" click="remoteFoo.ping()" /&gt;</pre>


<p class="wikiPara">
This creates a button, that when pressed calls the remote method.  Dealing with results and errors requires a little more code than this, but it works the same as any other Flex remote object.
</p>

<p class="wikiPara">
One of the nice things about Flex remoting is how simple it is to pass complex data structures around. For example, suppose you are writing a Flex client to work with the hotel data in the Seam booking application.  If your Seam components had the following:
</p>

<pre class="wikiPreformatted">    
public List&lt;Hotel&gt; queryAllHotels() {
   return entityManager.createQuery("select h from Hotel h").getResultList();
}
</pre>


<p class="wikiPara">
Then the entire data set could be loaded into the table quite easily.  
</p>

<pre class="wikiPreformatted">
&lt;mx:RemoteObject id="remoteFoo" destination="foo" fault="fault(event)"&gt;
    &lt;mx:method name="queryHotels"
               result="hotelTable.dataProvider=ResultEvent(event).result" /&gt;
&lt;/mx:RemoteObject&gt;

&lt;mx:DataGrid id="hotelTable" /&gt;
&lt;mx:Button label="Query Hotels" click="remoteFoo.queryHotels()" /&gt;
</pre>


<p class="wikiPara">
Note here that the remoting is smart enough to figure out the column names and values to display based on the Java objects returned, with no extra coding.  It may not be production ready, but it makes for a great demo.  
</p>

<p class="wikiPara">
So, if you want to use Flex and Seam together, how can you give this a try?  The Flex module is under development in the Seam<u>2</u>2 branch.  At this point we only support the basic remoting shown here and don't support conversation or business process scoped components, since the correct mapping of conversations to a rich client is not entirely obvious.  If you can live with that, or if you'd like to help contribute to the future development of the Flex module, please jump in on the <a href="http://seamframework.org/Community/SeamUsers" target="" class="regularLink">forums</a> and provide some feedback.  
</p>


</div>

