---
title: "Arquillian 1.0.0 Alpha 1 Released!"
author: "Aslak Knutsen"
blogger_name: "Aslak"
creation_date: "11-03-2010"
original_tags: [Arquillian,Seam News,Test]
tags: [Arquillian,Seam]

relative_url: /2010/03/11/arquillian-100-alpha-1-released
slug: arquillian-100-alpha-1-released
lace: http://in.relation.to/14773.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2010/03/11/arquillian-100-alpha-1-released
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
I'm happy to announce the first alpha release of <a href="http://community.jboss.org/en/arquillian" target="" class="regularLink">Arquillian</a>, an open source (<a href="http://www.apache.org/licenses/LICENSE-2.0" target="" class="regularLink">ASL v2</a>) framework for running tests in the container. If you want to read more about Arquillian's mission, and how it fits into our vision for testing at JBoss, read <a href="http://in.relation.to/Bloggers/TestingJavaEETheJBossWay" target="" class="regularLink">Pete's blog</a>.
</p>

<p class="wikiPara">
It's one thing to unit test your code outside of the container, but what happens when you run it inside? Does it still behave the same? How about testing against container managed resources? This is where Arquillian comes into its own.
</p>

<p class="wikiPara">
With Arquillian it's just as easy to write integration tests as unit tests. In fact, to minimize the burden on <i class="wikiEmphasis">you</i>, Arquillian integrates with familiar testing frameworks, allowing reuse of tools such as the JUnit/TestNG support in your favorite IDE, Maven Surefire, Ant - in fact any tool which supports TestNG or JUnit! 
</p>

<p class="wikiPara">
To show you just how simple this is, here's an example test case setup using JUnit: (we'll get to the actual test next)
</p>

<pre class="wikiPreformatted brush: java;">@RunWith(org.jboss.arquillian.junit.Arquillian.class)
public class TemperatureConverterTestCase {

   @Deployment
   public static JavaArchive createTestArchive() {
      return Archives.create("test.jar", JavaArchive.class)
         .addClasses(TemperatureConverter.class, TemperatureConverterBean.class);
   }

}</pre>


<p class="wikiPara">
By using JUnit's <tt>@RunWith</tt> annotation, you tell JUnit to use Arquillian as the test controller. Arquillian will then look for a static method marked with the <tt>@Deployment</tt> annotation, which creates your micro deployment. In the example above we simply deploy a session bean interface and implementation. 
</p>

<p class="wikiPara">
Arquillian hooks into your testing frameworks lifecycle and reacts to events. On the before suite and after suite events the container is started/stopped, while on the before class and after class events your micro deployment is deployed to/undeployed from the container.
</p>

<p class="wikiPara">
The test case is started in the local JVM, and then Arquillian overrides the normal test execution and migrates the test so that it's executed inside the container. By the time the test framework calls your <tt>@Test</tt> annotated method, the test is running inside the container, giving us the possibility to work with container managed resources. Here's the complete test class with JUnit <tt>@Test</tt> methods.
</p>

<pre class="wikiPreformatted brush: java;">@RunWith(org.jboss.arquillian.junit.Arquillian.class)
public class TemperatureConverterTestCase {

   @Deployment
   public static JavaArchive createTestArchive() {
      return Archives.create("test.jar", JavaArchive.class)
         .addClasses(TemperatureConverter.class, TemperatureConverterBean.class);
   }

   @EJB
   private TemperatureConverter converter;

   @Test
   public void shouldConvertToCelsius() {
      Assert.assertEquals(converter.convertToCelsius(32d), 0d);
      Assert.assertEquals(converter.convertToCelsius(212d), 100d);
   }

   @Test
   public void shouldConvertToFarenheit() {
      Assert.assertEquals(converter.convertToFarenheit(0d), 32d);
      Assert.assertEquals(converter.convertToFarenheit(100d), 212d);
   }
}</pre>


<p class="wikiPara">
Note how we can use <tt>@EJB</tt> to inject the session bean from our deployment into the test case for use in our test method - neat!
</p>

<p class="wikiPara">
The Arquillian TestEnricher SPI supports all the injection annotations from Java EE 6 - <tt>@EJB</tt>, <tt>@Resource</tt> and <tt>@Inject</tt>.
</p>

<p class="wikiPara">
This example test case could run in GlassFish, JBoss AS or OpenEJB as there are no container specific code/configuration at all. The choice is yours. You could even test on multiple platforms!
</p>

<h2 class="wikiHeadline2" id="H-IWantToLearnMoreWhereShouldIGoFromHere"><a href="/2010/03/11/arquillian-100-alpha-1-released#H-IWantToLearnMoreWhereShouldIGoFromHere">I want to learn more, where should I go from here?</a></h2>

<p class="wikiPara">
You can follow up with some in depth usage scenarios and tests described in these articles: 
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem">Dan Allen - <a href="http://community.jboss.org/wiki/UsingArquilliantotestapossiblebuginWeld" target="" class="regularLink">Using Arquillian to test a possible bug in Weld</a>
</li>
<li class="wikiUnorderedListItem">Jordan Ganoff - <a href="http://community.jboss.org/wiki/Seam3JMSModuleTestingwithArquillian" target="" class="regularLink">Seam 3 JMS Module Testing with Arquillian</a>
</li>
<li class="wikiUnorderedListItem">German Escobar - <a href="http://community.jboss.org/wiki/TestingaJMXPortableExtensionforCDI" target="" class="regularLink">Testing a JMX Portable Extension for CDI</a>
</li>
</ul>

<p class="wikiPara">
We also have <a href="http://docs.jboss.org/arquillian/reference/1.0.0.Alpha1/en-US/html_single" target="" class="regularLink">reference documentation</a> which walks you through the examples from Arquillian, and shows you how to create your own Arquillian test suite. You might also find the <a href="http://docs.jboss.org/arquillian/api/1.0.0.Alpha1/" target="" class="regularLink">Javadoc</a> <a href="http://docs.jboss.org/arquillian/spi/1.0.0.Alpha1" target="" class="regularLink">useful</a>, especially if you plan on adding support for another container. You can also check out the forums and more articles can be found on <a href="http://community.jboss.org/en/arquillian" target="" class="regularLink">our community site</a>. If your interested in chatting to us, please drop by <tt>#jbosstesting</tt> on <a href="irc://irc.freenode.net">irc.freenode.net</a>
</p>

<h2 class="wikiHeadline2" id="H-SoWhatsNext"><a href="/2010/03/11/arquillian-100-alpha-1-released#H-SoWhatsNext">So, what's next?</a></h2>

<p class="wikiPara">
Some of the things you can expect from Arquillian are:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> <i class="wikiEmphasis">Local run mode</i> -- Sometimes, you don't want to run the test case inside the container itself. A local run mode will be added; a mode where your test controls the deployment but is not deployed as a part of it. This will give you the chance to run a test against, for example, JSF pages or RMI (testing for those nasty Non-Serializable / SessionClosed exceptions).</li>
</ul>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> <i class="wikiEmphasis">Multiple deployments controlled by same test</i> -- Sometimes your micro deployment is not enough to test on its own and you want to package other components as part of the same deployment. For example, you need to test the interaction between two Web applications. </li>
</ul>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> <i class="wikiEmphasis">Support for method argument injection</i> -- In the first alpha we only support field injection. In alpha 2 we will be extending the <a href="http://docs.jboss.org/arquillian/spi/1.0.0.Alpha1/org/jboss/arquillian/spi/TestEnricher.html" target="" class="regularLink">TestEnricher</a> SPI to include support for method argument injection:</li>
</ul>

<pre class="wikiPreformatted brush: java;">@Test
public void shouldWithdrawFromAccount(@EJB AccountManager manager) throws Exception
{
   ...
}</pre>


<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> <i class="wikiEmphasis">Test method interceptors</i> -- Another planned enricher SPI is a test method interceptor. With this we can add support for transactions:</li>
</ul>

<pre class="wikiPreformatted brush: java;">@Test
@TransactionAttribute(TransactionAttributeType.REQUIRES_NEW)
public void shouldWithdrawFromAccount(@EJB AccountManager manager) throws Exception
{
   ...
}</pre>


<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> <i class="wikiEmphasis">Convention over configuration</i> -- The micro deployments should be as easy as possible to create, so adding support for common conventions should help speed up the test development. For example we can automatically add all classes in the same package as the test class to the deployment</li>
</ul>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> <i class="wikiEmphasis">Arquillian controlled resources</i> -- Sometimes the container requires container specific configuration e.g, <tt>java.naming.\*</tt> parameters needed to create a InitialContext. If the test case has to explicitly deal with this, it places the burden for container portability back on the test case author. Arquillian will provide an extension point to add Arquillian created/managed resources:</li>
</ul>

<pre class="wikiPreformatted brush: java;">// auto creation of InitialContext based on running container, remote or local.
@ArquillianResource
private InitialContext context;

// auto creation of URL to a specific deployed Servlet, including http port/ip etc.
@ArquillianResource(MyServlet.class)
private URL myServletURL;

// the bundle context of a deployed osgi bundle
@ArquillianResource
private BundleContext context;
</pre>


<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> <i class="wikiEmphasis">Add support for more containers</i> -- We will plan to support more containers! Currently we have planned: GlassFish 3 (as a remote container), Jetty, Tomcat, Resin, Felix OSGI. (Hey Spring guys, you're welcome to join in too!)</li>
</ul>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> <i class="wikiEmphasis">Third party integrations</i> -- In the spirit of ease of development, we integrate with existing test frameworks as much as possible, but we are always keen to learn of new frameworks we can integrate with. We already plan to support Selenium for example.</li>
</ul>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> <i class="wikiEmphasis">Support for other build tools</i> -- Arquillian Alpha1 comes with Maven support. In upcoming releases, we will distribute builds targeted toward other build tools like Ant and Gradle (that shout out is for our resident Gradle expert, Jason Porter).</li>
</ul>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> <i class="wikiEmphasis">A project page, logo and artwork</i> -- All good things must look good. That's why the JBoss.org design team is hard at work putting together artwork for the Arquillian project page. Stay tuned!</li>
</ul>

<h2 class="wikiHeadline2" id="H-WhereCanISeeArquillianInUse"><a href="/2010/03/11/arquillian-100-alpha-1-released#H-WhereCanISeeArquillianInUse">Where can I see Arquillian in use?</a></h2>

<p class="wikiPara">
Arquillian is a new framework, but it's going to be put right to work as the workhorse to test all the Seam 3 modules. It will also be our recommended solution for testing your Seam application. (We'd love to see the community try it out for testing Seam 2 applications). We'll also replace the current core of the JSR-299 CDI TCK with Arquillian, likely for the 1.1 version of the TCK. (To provide a little history, Arquillian originated from the JBoss Test Harness that was developed by Pete Muir as the foundation of the CDI TCK).
</p>

<p class="wikiPara">
If you have any thoughts on these ideas, or would like to suggest some new avenues we should explore, please contact us on the <a href="http://community.jboss.org/en/arquillian/dev?view=discussions" target="" class="regularLink">Arquillian Dev forum</a>.
</p>

<h2 class="wikiHeadline2" id="H-AndWhatsOpenSourceWithOutTheCommunity"><a href="/2010/03/11/arquillian-100-alpha-1-released#H-AndWhatsOpenSourceWithOutTheCommunity">And, what's open source with out the community?!</a></h2>

<p class="wikiPara">
A big thanks to the <a href="http://community.jboss.org/en/arquillian" target="" class="regularLink">Arquillian</a> and <a href="http://jboss.org/shrinkwrap" target="" class="regularLink">ShrinkWrap</a> community for helping out on this release by being early adopters, joining in on <a href="http://community.jboss.org/wiki/ArquillianMeetingInformation" target="" class="regularLink">community meetings</a>, general discussions and writing blogs, articles and patches. In alphabetical order: <a href="http://twitter.com/mojavelinux" target="" class="regularLink">Dan Allen</a>, <a href="http://twitter.com/StevenBoscarine" target="" class="regularLink">Steven Boscarine</a>, <a href="http://twitter.com/germanescobar" target="" class="regularLink">German Escobar</a>, <a href="http://twitter.com/jganoff" target="" class="regularLink">Jordan Ganoff</a>, <a href="http://twitter.com/kenglxn" target="" class="regularLink">Ken Gullaksen</a>, <a href="http://in.relation.to/Bloggers/Pete" target="" class="regularLink">Pete Muir</a>, <a href="http://twitter.com/lightguardjp" target="" class="regularLink">Jason Porter</a>, <a href="http://twitter.com/ALRubinger" target="" class="regularLink">Andrew Lee Rubinger</a>. You guys rock!
</p>

<p class="wikiPara">
[ <a href="http://jira.jboss.com/jira/browse/ARQ" target="" class="regularLink">JIRA</a> ] | [ <a href="http://docs.jboss.org/arquillian/spi/1.0.0.Alpha1/" target="" class="regularLink">SPI Javadoc</a>, <a href="http://docs.jboss.org/arquillian/api/1.0.0.Alpha1/" target="" class="regularLink">API Javadoc</a> ] | [ <a href="http://docs.jboss.org/arquillian/reference/1.0.0.Alpha1/en-US/html_single/" target="" class="regularLink">Reference Guide</a> ] | [ <a href="https://jira.jboss.org/jira/secure/ReleaseNote.jspa?projectId=12310885&amp;styleName=Html&amp;version=12313950" target="" class="regularLink">Release Notes</a> ] | [ <a href="http://repository.jboss.org/maven2//org/jboss/arquillian/" target="" class="regularLink">Maven Artifacts</a> ]
</p>
</div>

