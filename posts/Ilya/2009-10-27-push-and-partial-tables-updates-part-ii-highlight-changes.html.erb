---
title: "Push and Partial Tables Updates Part II – Highlight Changes"
author: "Ilya Shaikovsky"
blogger_name: "Ilya"
creation_date: "27-10-2009"
original_tags: [RichFaces]
tags: [Rich Faces]

relative_url: /2009/10/27/push-and-partial-tables-updates-part-ii-highlight-changes
slug: push-and-partial-tables-updates-part-ii-highlight-changes
lace: http://in.relation.to/12638.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2009/10/27/push-and-partial-tables-updates-part-ii-highlight-changes
---
<div id="documentDisplay" class="documentDisplay">


<img src="http://jroller.com/a4j/resource/richfaces_logo_200px.gif" alt="">

<p class="wikiPara">
This short and I think simple solution is written to answer the main question which rose after <a href="http://in.relation.to/12032.lace" target="" class="regularLink">this entry</a> and addresses how to highlight updated table cells on the client side.
</p>

<img src="http://jroller.com/a4j/resource/voting.png" alt="">

<p class="wikiPara">
The main problem here that we are using reRender for the table cells' children elements and not the cells themselves. So we can’t simply define styleClass with some EL-binding on the column to highlight the changes easily. (By the way, the feature of whole cells and even rows updating is already under design for the future 4.x version.)
</p>

<p class="wikiPara">
We will use the <b>data</b> attribute of the push component to serialize a list of changes from the backing bean to the client, and the <b>rich:jQuery</b> component in order to highlight items which correspond to the list.
</p>

<p class="wikiPara">
Full page code (some page parts which are fully similar to the previous post's code are cut to make it shorter):
</p>


<pre class="wikiPreformatted">
&lt;ui:composition&gt; 
&lt;style&gt;
.highlight{
	background-color: yellow;
}
&lt;/style&gt;
&lt;h:form id="choicesForm"&gt;
	&lt;rich:jQuery selector=".votesClass"
		query="each(function(key){
		if (param[key].votesCount &gt; 0) jQuery(this).addClass('highlight'); 
		else jQuery(this).removeClass('highlight'); })"
		name="jqhighlight" /&gt;
	&lt;rich:dataTable value="#{choicesBean.choices}" var="choice"
		rowKeyVar="row" ajaxKeys="#{choicesBean.keysSet}" id="choices"&gt;
		// All the other columns
		&lt;rich:column id="votes" styleClass="votesClass"&gt;
			&lt;f:facet name="header"&gt;
				&lt;h:outputText value="Current Votes" /&gt;
			&lt;/f:facet&gt;
			&lt;h:outputText value="#{choice.votesCount}" id="choiceVotes" /&gt;
		&lt;/rich:column&gt;
	&lt;/rich:dataTable&gt;
		&lt;a4j:push enabled="#{choicesBean.enabled}" interval="3000"
			timeout="3000" eventProducer="#{choicesBean.addListener}" id="push"
			limitToList="true" action="#{choicesBean.processUpdates}"
			reRender="choiceVotes, push, tempResults" data="#{choicesBean.lastVotes}" oncomplete="jqhighlight(null,data)"/&gt;
	&lt;/h:form&gt;
&lt;/ui:composition&gt;
</pre>


<p class="wikiPara">
Let’s review the key changes in this code:
</p>


<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> We added <b>highlight</b> CSS class definition. This class will be applied to the vote's cells which were updated.</li>
</ul>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> <b><q>votesClass</q></b> was added to votes column. It is done in order to use it in jQuery selector. We will search for all the <b>td</b> elements with this class applied.</li>
</ul>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> <b>data</b> definition added to push component in order to serialize the changes list to the client after update occurs.</li>
</ul>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> <b>oncomplete</b> added to push in order to call the registered jQuery component which will handle the updates. <b>data</b> parameter contains the serialized changes list. The first parameter could be a DOM element which would later be added to the selector, but as we intended to use the selector by CSS class, we are passing null there.</li>
</ul>

<p class="wikiPara">
Let’s review the key addition more closely:
</p>


<pre class="wikiPreformatted">&lt;rich:jQuery selector=".votesClass"
	query="each(function(key){
	if (param[key].votesCount &gt; 0) jQuery(this).addClass('highlight'); 
	else jQuery(this).removeClass('highlight'); })"
	name="jqhighlight" /&gt;
</pre>


<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> <b>name<tt>="jqhighlight"</tt></b> - register the code generated by jQuery  component as a JavaScript function with the name specified.</li>
</ul>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> <b>selector<tt>=".votesClass"</tt></b> – creates the selector for the query and the result will be all the elements which have <b>votesClass</b> applied.</li>
</ul>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> The code defined in <b>query</b> - simply iterate through the elements returned by selector and if the corresponding data element returns a not-null change, this element is given the <q>highlight</q> css class. If there was no change for the element, the <q>highlight</q> class is removed if it exists.</li>
</ul>

<p class="wikiPara">
So now the result of push updates will look like this:
</p>

<img src="http://www.jroller.com/a4j/resource/voringresulthighlighted.png" alt="">

<p class="wikiPara">
Full demo code is available at <a href="http://anonsvn.jboss.org/repos/richfaces/branches/community/3.3.X/" target="" class="regularLink">3.3.x community branch</a> under <b>richfaces-demo</b> project and can be downloaded from <a href="http://anonsvn.jboss.org/repos/richfaces/branches/community/3.3.X/samples/richfaces-demo" target="" class="regularLink">anonymous svn</a>.</p>
</div>

