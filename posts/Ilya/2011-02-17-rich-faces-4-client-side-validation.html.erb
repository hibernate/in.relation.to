---
title: "RichFaces 4 - Client Side Validation"
author: "Ilya Shaikovsky"
blogger_name: "Ilya"
creation_date: "17-02-2011"
original_tags: []
tags: []

relative_url: /2011/02/17/rich-faces-4-client-side-validation
slug: rich-faces-4-client-side-validation
lace: http://in.relation.to/18340.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2011/02/17/rich-faces-4-client-side-validation
---
<div id="documentDisplay" class="documentDisplay">


<h2 class="wikiHeadline2" id="H-Introduction"><a href="/2011/02/17/rich-faces-4-client-side-validation#H-Introduction">Introduction</a></h2>
<div style="float: right; margin-left: 20px; margin-bottom: 20px;">
     <a href="http://labs.jboss.com/richfaces" target="blank"> 
         <img src="http://design.jboss.org/richfaces/logo/final_logo/richfaces_logo_200px.png">
     </a>
</div>
<p class="wikiPara">
One great feature in JSF 2 is that it provides built-in support for <a href="http://jcp.org/en/jsr/detail?id=303" target="" class="regularLink">JSR-303</a> bean validators. This means that now it is the containers responsibility to validate your model objects at multiple application tiers according to your annotation based constraints. Take a look at a simple JSF managed bean with JSR-303 annotations added:
</p>

<pre class="wikiPreformatted">import javax.validation.constraints.Max;
import javax.validation.constraints.Min;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;

@ManagedBean
@RequestScoped
public class UserBean {

    @Size(min=3, max=12)
    private String name = null;
    @Pattern(regexp = "^[\\w\\-]([\\.\\w])+[\\w]+@([\\w\\-]+\\.)+[a-zA-Z]{2,4}$" , message="Bad email")
    private String email = null;
    @Min(value = 18)
    @Max(value = 99)
    private Integer age;
///...
//Getters and Setters
}</pre>


<p class="wikiPara">
With JSF 2 all the validators added using bean validation annotations will be registered on components bound to the bean properties and triggered in the Process Validation phase. So you have no need to define additional validators using JSF standard validator tags such as <i>f:validateLength</i> or <i>f:validateDoubleRange</i> or use the required attribute. But all that stuff is applied only on the server side. In the past you needed to create some custom validators for client side which are not connected to server side rules directly but just copies that functionality. This of coarse leads to additional maintenance and complexity.
</p>

<p class="wikiPara">
Now with <b>RichFaces 4</b> we provide that final level of abstraction to the validation ecosystem. <b>RichFaces Client Side Validation</b> feature(<i><b>CSV</b> abbreviation used across wiki pages and jiras</i>) consist of:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> JavaScript validators implementations for nearly all JSF and JSR-303 validators.</li>
</ul>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> Mechanism which register corresponding client validators to the components which bound to annotated fields or uses <i>f:validate*</i> attached.</li>
</ul>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> <i>rich:message(s)</i> components were added with client side objects which allows to manipulate with them on client side. Used to add/remove messages which appeared at client side.</li>
</ul>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> Extension points which allows the user to provide JavaScript implementation for his custom server side validators (in the future).</li>
</ul>

<h2 class="wikiHeadline2" id="H-Usage"><a href="/2011/02/17/rich-faces-4-client-side-validation#H-Usage">Usage</a></h2>

<p class="wikiPara">
First need to mention a common requirement for both JSF and RichFaces using bean validation. In order to use it with JSF 2 - you should use JEE 6 application server which is bundled with a JSR-303 implementation. Or if using just Tomcat or another simple servlet container add validation-api jar and some validators provider (e.g. <a href="http://www.hibernate.org/subprojects/validator/download.html" target="" class="regularLink">hibernate-validator</a>) to your application libraries.
</p>

<p class="wikiPara">
Then all you need to add to the component in order it to start using client validators is new <b><i>rich:validator</i></b> behavior:
</p>

<pre class="wikiPreformatted">&lt;h:inputText value="#{userBean.name}"&gt;
	&lt;rich:validator/&gt;
&lt;/h:inputText&gt;</pre>


<b>@Size</b><p class="wikiPara">
 constraint rules defined in <b>UserBean</b> above will be applied there. Or you can use a  similar definition for old-style JSF validators:
</p>

<pre class="wikiPreformatted">&lt;h:inputText value="#{personBean.name}"&gt;
	&lt;f:validateLength minimum="3"/&gt;
	&lt;rich:validator/&gt;
&lt;/h:inputText&gt;</pre>


<p class="wikiPara">
Client implementation of <b>Length</b> validator will be registered to be called on the client.
</p>

<blockquote class="wikiBlockquote">
<b>Note:</b> You still could use JSF validators tags but it's really preferable to migrate to Bean Validation. As you can see from that sample you still duplicating the validation at view and model level using annotation based constraints for your entities and defining the same view validators with separate tags.
</blockquote>

<p class="wikiPara">
 <b><i>&lt;rich:validator&gt;</i></b> is a behavior which just triggers all the client validators methods according to the registered server side validators. As a behavior it could be defined for any event available on parent component. In previous examples default event change used. Let's modify examples to use <i>keyup</i> event:
</p>

<pre class="wikiPreformatted">&lt;h:inputText value="#{userBean.name}"&gt;
	&lt;rich:validator event="keyup"/&gt;
&lt;/h:inputText&gt;</pre>


<h2 class="wikiHeadline2" id="H-AjaxFallback"><a href="/2011/02/17/rich-faces-4-client-side-validation#H-AjaxFallback">Ajax Fall-back</a></h2>

<p class="wikiPara">
In case you registered some validators but they have no client implementation available — <b>Ajax fall-back</b> will be used. This means that 
 <b><i>&lt;rich:validator&gt;</i></b> will invoke all the available client validators. And if all of them returned valid, RichFaces will perform an Ajax request invoking any server side validators.
</p>

<blockquote class="wikiBlockquote">
<b>Note:</b> For now Ajax fall-back is always used if a client validator is not available. In future we planned to design some way to invoke only available client validators and not send Ajax request for the others <a href="https://issues.jboss.org/browse/RF-10142" target="" class="regularLink">RF-10142</a>. Could be useful in some cases where additional request to server are not expected because validators uses some complex services invocations or makes db calls for example.
</blockquote>

<h2 class="wikiHeadline2" id="H-MessagesFromClientValidators"><a href="/2011/02/17/rich-faces-4-client-side-validation#H-MessagesFromClientValidators">Messages from client validators</a></h2>

<p class="wikiPara">
And the last question is - how do users get notified with the client side validation results? It's rather simple actually. Messages for client validators will be displayed using the same <b><i>rich:message(s)</i></b> components which are used for common server side validation messages.
</p>

<p class="wikiPara">
So let's review complete sample for the Edit user info form:
</p>

<pre class="wikiPreformatted">&lt;h:form&gt;
&lt;rich:panel header="User information"&gt;
	&lt;h:panelGrid columns="3"&gt; 
		&lt;h:outputText value="Name:" /&gt;
		&lt;h:inputText value="#{validationBean.name}" id="name"&gt;
			&lt;rich:validator /&gt;
		&lt;/h:inputText&gt;
		&lt;rich:message for="name" /&gt;
		&lt;h:outputText value="Email" /&gt;
		&lt;h:inputText value="#{validationBean.email}" id="email"&gt;
			&lt;rich:validator /&gt;
		&lt;/h:inputText&gt;
		&lt;rich:message for="email" /&gt;
		&lt;h:outputText value="Age" /&gt;
		&lt;h:inputText value="#{validationBean.age}" id="age"&gt;
			&lt;rich:validator /&gt;
		&lt;/h:inputText&gt;
		&lt;rich:message for="age" /&gt;
		&lt;h:outputText value="I agree the terms" /&gt;
		&lt;h:selectBooleanCheckbox value="#{validationBean.agree}" id="agree"&gt;
			&lt;rich:validator/&gt;
		&lt;/h:selectBooleanCheckbox&gt;
		&lt;rich:message for="agree" /&gt;
	&lt;/h:panelGrid&gt;
&lt;/rich:panel&gt;
&lt;/h:form&gt;</pre>


<p class="wikiPara">
in case of failure of any validator registered to name <i>h:inputText</i> component - message below will be updated by CSV JavaScript showing the information label. Here is the screenshot from richfaces-showcase application:
</p>

<img src="/images/18339.png" alt="">

<p class="wikiPara">
All the messages for inputs appeared without any server side validation invocation. Script validation invoked after you changed the field and shifting focus out of the component.  In this case only one Ajax request was sent – after clicking the check-box (<i>AssertTrue validator client implementation is not available for M6 actually so you see Ajax fall-back in action</i>). Pretty easy isn't it?
</p>

<h2 class="wikiHeadline2" id="H-M6Functionality"><a href="/2011/02/17/rich-faces-4-client-side-validation#H-M6Functionality">M6 functionality</a></h2>

<p class="wikiPara">
In <b>RichFaces 4 Milestone 6</b> all the server side functionality related to registered validators look-up, validators script output, messages and behavior rendering were done. As for client side functionality – all messages, JSF validators and most of JSR-303 validators are complete. We have a few validators still missing (<i>e.g. AssertTrue/False, Past</i>) but they will be added in nearest time. See developer richfaces-showcase demo which was added with CSV samples prior to M6.
</p>

<blockquote class="wikiBlockquote">
<b>Note:</b> As it was mentioned before missed validators will be invoked using Ajax fall-back.
</blockquote>

<h2 class="wikiHeadline2" id="H-StartUsingNow"><a href="/2011/02/17/rich-faces-4-client-side-validation#H-StartUsingNow">Start Using Now</a></h2>

<p class="wikiPara">
Even considering some minor issues reported and a few validators still missed – it's worth to start using the CSV right now. You will need to do nothing in the future in order for new validators to start working once they are implemented. When you update to next version they will be automatically added by behavior script renderer and start working on the client side. Also, you can help let us know about any problems or concerns prior to final. 
</p>

<h2 class="wikiHeadline2" id="H-TheFuturePlansForValidation"><a href="/2011/02/17/rich-faces-4-client-side-validation#H-TheFuturePlansForValidation">The future plans for validation</a></h2>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> Add default levels of validation support. This means that we will provide an option that will enable <b><i>&lt;rich:validator&gt;</i></b> automatically at some level such as for a form or view.</li>
<li class="wikiUnorderedListItem"> Add support to Action components. This means that you will be able to add <b><i>&lt;rich:validator&gt;</i></b> to your "save" form button and it will call all the validators for inputs in the form prior to submit.</li>
<li class="wikiUnorderedListItem"> Complete instructions for creation <b>custom validators</b>. Basic mechanisms is ready so we just need to check how it will works and document.</li>
</ul>

<hr>

<p class="wikiPara">
[<a href="http://twitter.com/ilya_shaikovsky" target="" class="regularLink">Get updates of my blogs in twitter</a>]
</p>

<p class="wikiPara">
[<a href="http://www.jroller.com/a4j/" target="" class="regularLink">My jroller.com blog</a>]</p>
</div>

