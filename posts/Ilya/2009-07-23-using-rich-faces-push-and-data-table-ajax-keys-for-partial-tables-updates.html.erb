---
title: "Using RichFaces Push and DataTable Ajax Keys for Partial Tables Updates"
author: "Ilya Shaikovsky"
blogger_name: "Ilya"
creation_date: "23-07-2009"
original_tags: [JavaServer Faces,Push,RichFaces,dataTable]
tags: [JSF,Rich Faces]

relative_url: /2009/07/23/using-rich-faces-push-and-data-table-ajax-keys-for-partial-tables-updates
slug: using-rich-faces-push-and-data-table-ajax-keys-for-partial-tables-updates
lace: http://in.relation.to/12032.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2009/07/23/using-rich-faces-push-and-data-table-ajax-keys-for-partial-tables-updates
---
<div id="documentDisplay" class="documentDisplay">


<img src="http://jroller.com/a4j/resource/richfaces_logo_200px.gif" alt="">

<p class="wikiPara">
There have been several questions on the <a href="http://www.jboss.org/index.html?module=bb&amp;op=viewforum&amp;f=261" target="" class="regularLink">RichFaces User Forum</a> regarding using <b>push techniques</b> to update <b>data table</b> cells. The default <a href="http://livedemo.exadel.com/richfaces-demo/richfaces/repeat.jsf" target="" class="regularLink">a4j:repeat</a> sample isn't really enough for beginners to get the partial dataTable updates concepts because the default <i class="wikiEmphasis">ajaxKeys </i>feature is used (<i class="wikiEmphasis">keys generated automatically for the row from where the action event comes</i>). So I decided to create an additional sample which will be released with next richfaces-demo version and be more advanced.
</p>

<b>Use-case:</b><p class="wikiPara">
 While a user is viewing a voting results page, values on the table are updating as people are voting.  I will use the same base sample as the <a href="http://livedemo.exadel.com/richfaces-demo/richfaces/repeat.jsf" target="" class="regularLink">a4j:repeat demo</a> but with the <b>Runnable</b> interface implementation used in the <a href="http://livedemo.exadel.com/richfaces-demo/richfaces/push.jsf" target="" class="regularLink">a4j:push demo</a> in order to simulate periodic votes being placed. This will show how to use server side events to trigger the update on client side instead of just use polling which performs full form. In real life the use-case could be much more complex - user could watch for huge tables updates . Another goal of the sample is to show how to encode and update the changed cells on the client.
</p>

<p class="wikiPara">
Let's create a simple voting form. It will show us the table with choices of the day and votes for these choices:
</p>

<img alt="" src="http://jroller.com/a4j/resource/voting.png">


<pre class="wikiPreformatted">
&lt;h:form&gt;
&lt;rich:dataTable value="#{choicesBean.choices}" var="choice"
      rowKeyVar="row" ajaxKeys="#{choicesBean.keysSet}"&gt;
      &lt;f:facet name="header"&gt;
            &lt;h:outputText value="Voting for favourite fruit" /&gt;
      &lt;/f:facet&gt;
      &lt;rich:column&gt;
            &lt;h:outputText value="#{row}" /&gt;
      &lt;/rich:column&gt;
      &lt;rich:column&gt;
            &lt;f:facet name="header"&gt;
                  &lt;h:outputText value="choice name" /&gt;
            &lt;/f:facet&gt;
            &lt;h:outputText value="#{choice.label}" id="choiceLabel" /&gt;
      &lt;/rich:column&gt;
      &lt;rich:column&gt;
            &lt;f:facet name="header"&gt;
                  &lt;h:outputText value="Votes Number" /&gt;
            &lt;/f:facet&gt;
            &lt;h:outputText value="#{choice.votesCount}" id="choiceVotes" /&gt;
      &lt;/rich:column&gt;
&lt;/rich:dataTable&gt;
&lt;/h:form&gt;</pre>


<p class="wikiPara">
Now we need to create two simple objects. One is <b>Choice</b> object which holds <i class="wikiEmphasis">choice label</i> and the <i class="wikiEmphasis">votes count</i>:
</p>

<pre class="wikiPreformatted">public class Choice {
      private String label;
      private int votesCount;
      public Choice(String label) {
            this.label = label;
            this.votesCount = 0;
      }
      //Getters and setters should be there
</pre>

<p class="wikiPara">
The second is <b>ChoicesBean</b> which will holds <i class="wikiEmphasis">list of choices </i>and be responsible for <i class="wikiEmphasis">collecting changes </i>information.
</p>

<pre class="wikiPreformatted">public class ChoicesBean {
      private List&lt;Choice&gt; choices; //current state of voting
      private List&lt;Choice&gt; lastVotes; //collected votes to be added on update
      private Set&lt;Integer&gt; keysSet; // set of rows keys updated and needed to be updated at       //client side 
      public ChoicesBean() {
            //Choices and lastVotes lists instantiation
      }
      //Getters and setters should be there
}</pre>


<p class="wikiPara">
Then we specify that this <b>ChoisesBean</b> class will implement <b>Runnable</b> and add the same <b>start</b>, <b>stop</b> and <b>run</b> methods as in <a href="http://livedemo.exadel.com/richfaces-demo/richfaces/push.jsf" target="" class="regularLink">a4j:push demo</a> in order to <b>simulate voting process</b>. Also we will define push event producer method in similar way. The following code should be added:
</p>


<pre class="wikiPreformatted">...
private Thread thread;
private String updateInfo;
private boolean enabled = false;
PushEventListener listener;
...
public void addListener(EventListener listener) {
    if (this.listener != listener) {
        this.listener = (PushEventListener) listener;
    }
}
public synchronized void start() {
    if (thread == null) {
        thread = new Thread(this);
        thread.start();
        setEnabled(true);
    }
}
public synchronized void stop() {
    if (thread != null) {
        setEnabled(false);
        thread = null;
    }
}
public void run() {
    while (thread != null) {
        try {
            for (Choice choice : lastVotes) {
                choice.setVotesCount(DataTableScrollerBean.rand(0, 3));
            }
            listener.onEvent(new EventObject(this));
            Thread.sleep(10000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}</pre>

<p class="wikiPara">
I wanted to highlight the following points:
</p>

<ol class="wikiOrderedList">
<li class="wikiOrderedListItem"> After the new thread is started – it will generate new random additions to current votes every ten seconds and raise an event to push.</li>
<li class="wikiOrderedListItem"> <i class="wikiEmphasis">Enabled</i> and <i class="wikiEmphasis">updateInfo </i>used just in order to provide more info to sample UI (<i class="wikiEmphasis">in order to keep controls enabled disabled and show last updates which was returned from server</i>).</li>
</ol>

<p class="wikiPara">
Now we will add the buttons to the page which will start simulation of voting:
</p>


<pre class="wikiPreformatted">&lt;a4j:commandButton value="Start" action="#{choicesBean.start}"
      id="start" disabled="#{choicesBean.enabled}" ajaxSingle="true"
      reRender="push, stop, start" limitToList="true" /&gt; 

&lt;a4j:commandButton value="Stop" action="#{choicesBean.stop}" id="stop"
      disabled="#{!choicesBean.enabled}" ajaxSingle="true"
      reRender="push,start, stop" limitToList="true" /&gt;</pre>


<p class="wikiPara">
And finally <b>push</b> component:
</p>


<pre class="wikiPreformatted">&lt;a4j:push enabled="#{choicesBean.enabled}" interval="3000" timeout="3000"  
    eventProducer="#{choicesBean.addListener}" id="push" limitToList="true"  
    action="#{choicesBean.processUpdates}" reRender="choiceVotes, push, tempResults" /&gt;</pre>


<p class="wikiPara">
Now we just need to define <b>processUpdates</b> method which will be called by the <b>push component</b> after the event generated on server side and request for updates fired:
</p>


<pre class="wikiPreformatted">public void processUpdates() {
      Set&lt;Integer&gt; keysForUpdate = new HashSet&lt;Integer&gt;();
      for (Choice choice : lastVotes) {
            if (choice.getVotesCount() &gt; 0) {
                  int index = lastVotes.indexOf(choice);
                  keysForUpdate.add(index);
                  choices.get(index).increment(choice.getVotesCount());
            }
      }
      //updatedInfo generation.
      keysSet = keysForUpdate;
}</pre>


<p class="wikiPara">
While checking  if new votes have been generated we fill the <b>keysSet</b> with <u>keys of rows which are actually changed</u>. 
Now look through push page definition again:
</p>

<pre class="wikiPreformatted">reRender="choiceVotes... “</pre>


<p class="wikiPara">
The Id of the <b>h:outputText</b> inside column component is automatically added as the <b>reRender target</b>. The <b>keysSet</b> filled in the <b>ChoicesBean</b> and was defined as <b>ajaxKeys</b> on the table. The table only encodes and passes the needed cells content to the client for reRender!
</p>

<p class="wikiPara">
So finally after running this sample and pressing the start button you will see the periodic updates of updated cells: 
</p>

<img src="http://jroller.com/a4j/resource/votingresult.png" alt="">

<p class="wikiPara">
Full demo code is available at <a href="http://anonsvn.jboss.org/repos/richfaces/branches/community/3.3.X/" target="" class="regularLink">3.3.x community branch</a> under <b>richfaces-demo</b> project and can be downloaded from <a href="http://anonsvn.jboss.org/repos/richfaces/branches/community/3.3.X/samples/richfaces-demo" target="" class="regularLink">anonymous svn</a>.</p>
</div>

