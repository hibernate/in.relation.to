---
title: "Addon development with Forge 2 - A Basic Primer"
author: "Shane Bryzak"
blogger_name: "Shane"
creation_date: "21-02-2014"
original_tags: [Forge]
tags: [JBoss Forge]

relative_url: /2014/02/21/addon-development-with-forge-2-a-basic-primer
slug: addon-development-with-forge-2-a-basic-primer
lace: http://in.relation.to/24930.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2014/02/21/addon-development-with-forge-2-a-basic-primer
---
<div id="documentDisplay" class="documentDisplay">


<img src="/images/24897.png" align="right" style="margin-left:20px">

<p class="wikiPara">
I had the privilege today of receiving some expert tutelage on Forge Addon development in Eclipse from the Forge Team’s George Gastaldi, and I was so impressed by how easy it was that I’m going to describe the process step by step so that you too can experience the pleasure of writing a Forge addon!  This guide is written from the perspective of a complete Forge noob, so you can rest assured that it has made a very strong attempt to capture all the little important details.  Also, while the addon itself won’t actually do that much, we’ll try to cover all the basics which will hopefully provide the solid foundation you need to be able to implement more complex features.
</p>

<h1 class="wikiHeadline1" id="H-SettingUpYourEnvironment"><a href="/2014/02/21/addon-development-with-forge-2-a-basic-primer#H-SettingUpYourEnvironment">Setting up your environment</a></h1>

<p class="wikiPara">
I strongly recommend that you work with the latest trunk of Forge, so fire up your terminal window and start by cloning the following repositories from GitHub:
</p>

<p class="wikiPara">
<a href="https://github.com/forge/furnace" target="" class="regularLink">https://github.com/forge/furnace</a>
</p>

<p class="wikiPara">
<a href="https://github.com/forge/furnace-cdi" target="" class="regularLink">https://github.com/forge/furnace-cdi</a>
</p>

<p class="wikiPara">
<a href="https://github.com/forge/forge-core" target="" class="regularLink">https://github.com/forge/forge-core</a>
</p>

<p class="wikiPara">
<a href="https://github.com/jbosstools/jbosstools-forge" target="" class="regularLink">https://github.com/jbosstools/jbosstools-forge</a>
</p>

<img src="/images/24898.png">

<p class="wikiPara">
Once you have them all build each of them using <a href="http://maven.apache.org/" target="" class="regularLink">Maven</a>, making sure to skip the tests.  You’ll need Maven 3.1 or higher for this step:
</p>



<pre class="wikiPreformatted">cd furnace
mvn clean install -Dmaven.test.skip=true</pre>




<img src="/images/24899.png">

<p class="wikiPara">
If all goes well you’ll get a <tt>BUILD SUCCESS</tt> message at the end:
</p>

<img src="/images/24900.png">

<p class="wikiPara">
Continue by building the other three projects (<tt>furnace-cdi</tt>, <tt>forge-code</tt> and <tt>jbosstools-forge</tt>) in order using the same Maven command.
</p>

<h1 class="wikiHeadline1" id="H-InstallingForge"><a href="/2014/02/21/addon-development-with-forge-2-a-basic-primer#H-InstallingForge">Installing Forge</a></h1>

<p class="wikiPara">
Once everything has built successfully, it’s time to install Forge.  Open the <tt>forge-core/dist/target</tt> directory where you’ll find some zip files containing the Forge distribution:
</p>

<img src="/images/24901.png">

<p class="wikiPara">
You have a choice here, you can either use the (smaller) distribution zip which doesn’t come pre-packaged with all of the core addons, or you can use the larger offline distribution which has the addons packaged also.  For now, I recommend you use the offline distribution, so extract it to its own folder somewhere.  I generally like to install tools like this into a dedicated apps folder, and if you’re on a *nix based OS I recommend creating a symbolic link also:
</p>

<img src="/images/24902.png">

<p class="wikiPara">
Once that’s done, you need to create a <tt>FORGE_HOME</tt> environment variable pointing to this directory, and add the <tt>$FORGE_HOME/bin</tt> directory to your path (this will allow you to execute the forge shell from anywhere).  This is an OS-specific step so it’s up to you to complete this by yourself.  When that’s done, run the <tt>forge</tt> command from a command prompt.  
</p>

<p class="wikiPara">
(Note: If you didn’t install the offline distribution, you’ll be prompted to install the core addons.  When you start forge, it will attempt to install the latest released versions, however in our case we want to install the artifacts that we just built ourselves, so to do that we must first run <tt>forge -i core,2.0.1-SNAPSHOT</tt> - alternatively just use the offline distribution and save yourself a lot of trouble.)
</p>

<img src="/images/24903.png">

<p class="wikiPara">
Forge will download a bunch of stuff and then prompt you to confirm the installation, so select <tt>Y</tt> and press <tt>Enter</tt> again.
</p>

<img src="/images/24904.png">

<p class="wikiPara">
Eventually the installation will complete and you’ll be sitting at the Forge command prompt:
</p>

<img src="/images/24905.png">

<p class="wikiPara">
From here you can press the <tt>tab</tt> key to see the available commands:
</p>

<img src="/images/24906.png">

<p class="wikiPara">
We’ve successfully set up the Forge shell!  Let’s quit out for now by typing <tt>exit</tt> then pressing enter and we’ll go through the steps to install the JBoss Tools Forge plugin in Eclipse.
</p>

<h1 class="wikiHeadline1" id="H-InstallingTheForgeEclipsePlugin"><a href="/2014/02/21/addon-development-with-forge-2-a-basic-primer#H-InstallingTheForgeEclipsePlugin">Installing the Forge Eclipse Plugin</a></h1>

<p class="wikiPara">
At the time of writing I’m using the latest release version of Eclipse, Kepler SR1.  If you are using an older version of Eclipse then I recommend that you update to the latest, otherwise results might be unpredictable.  The first step in installing the Eclipse plugin is to start up Eclipse, then go to the <i class="wikiEmphasis">Help -&gt; Install New Software…</i> menu option:
</p>

<img src="/images/24907.png">

<p class="wikiPara">
Then click the <i class="wikiEmphasis">Add</i> button, then in the popup window click <i class="wikiEmphasis">Archive</i>:
</p>

<img src="/images/24908.png">

<p class="wikiPara">
Browse to the <tt>jbosstools-forge/site/target</tt> directory, select the <tt>forge.site.XXX</tt> zip file and click OK:
</p>

<img src="/images/24909.png">

<p class="wikiPara">
Click OK again in the <i class="wikiEmphasis">Add Repository</i> window, then select the checkbox next to <i class="wikiEmphasis">JBoss Tools Forge Nightly Build Update Site</i>, then click the <i class="wikiEmphasis">Next</i> button:
</p>

<img src="/images/24910.png">

<p class="wikiPara">
You’ll be prompted to review the install details, so click the <i class="wikiEmphasis">Next</i> button again.  You’ll be asked to review and accept the terms of the license agreement, so after accepting them click the <i class="wikiEmphasis">Finish</i> button and Eclipse will go ahead and install the plugin.  If you get a security warning about unsigned content don’t panic; it’s just a warning and it's fine to click OK here.  Once finished, Eclipse will inform you that it needs to be restarted so go ahead and click the Yes button.  After Eclipse has restarted you can confirm that the Forge plugin has been successfully installed by pressing Ctrl + 5, which will present you with the following popup window:
</p>

<img src="/images/24911.png">

<p class="wikiPara">
If you can see the Forge command window after pressing Ctrl + 5, then congratulations on making it this far!  Next we’ll go ahead and create our Forge Addon project.
</p>

<h1 class="wikiHeadline1" id="H-CreatingAForgeAddonProject"><a href="/2014/02/21/addon-development-with-forge-2-a-basic-primer#H-CreatingAForgeAddonProject">Creating a Forge Addon Project</a></h1>

<p class="wikiPara">
Forge does a great job of doing the heavy lifting when it comes to creating a new Addon.  Let’s create the initial project structure for our addon by opening the Forge command window in Eclipse with Ctrl + 5, then scrolling down until we find the <i class="wikiEmphasis">Project/Generation - Project: New</i> option:
</p>

<img src="/images/24912.png">

<p class="wikiPara">
Clicking on the <i class="wikiEmphasis">Project: New</i> option gives us a dialog window that lets us enter some basic details for our addon project.  Fill in the details for the project name, top level package, version, final name and project location.  Select <i class="wikiEmphasis">Forge Addon</i> for the project type and leave the Build system default of Maven, then click Next.  
</p>

<img src="/images/24913.png">

<p class="wikiPara">
On the next screen, click the checkbox next to <i class="wikiEmphasis">Create API, Impl, SPI, Tests and Addon modules</i> and select the following addons from the addon list:
</p>

<p class="wikiPara">
<tt>org.jboss.forge.addon:projects</tt>
</p>

<p class="wikiPara">
<tt>org.jboss.forge.addon:ui</tt>
</p>

<p class="wikiPara">
<tt>org.jboss.forge.furnace.container:cdi</tt>
</p>

<p class="wikiPara">
After you’ve selected these addons, click the <i class="wikiEmphasis">Finish</i> button to generate the new project.
</p>

<img src="/images/24914.png">

<p class="wikiPara">
After grinding away for a few seconds you should see the following new projects in the Eclipse project explorer:
</p>

<img src="/images/24915.png">

<p class="wikiPara">
Our new addon project is created!  Next we’ll start adding some basic functionality.
</p>

<h1 class="wikiHeadline1" id="H-MakingTheAddonDoSomething"><a href="/2014/02/21/addon-development-with-forge-2-a-basic-primer#H-MakingTheAddonDoSomething">Making the Addon do something</a></h1>

<p class="wikiPara">
This is where we get into the exciting stuff.  Let’s start off by creating a new class in the <tt>impl</tt> project, under the <tt>com.acme.helloworld.ui</tt> package called <tt>HelloWorldUICommand</tt>.  Once you’ve created this class, edit its code and make it extend <tt>AbstractUICommand</tt>:
</p>


<pre class="wikiPreformatted brush: java; gutter: true;">package com.acme.helloworld.ui;

import org.jboss.forge.addon.ui.command.AbstractUICommand;

public class HelloWorldUICommand extends AbstractUICommand {

}</pre>





<p class="wikiPara">
Once that’s done, tell Eclipse to add the unimplemented methods:
</p>



<pre class="wikiPreformatted brush: java; gutter: true;">package com.acme.helloworld.ui;

import org.jboss.forge.addon.ui.command.AbstractUICommand;
import org.jboss.forge.addon.ui.context.UIBuilder;
import org.jboss.forge.addon.ui.context.UIExecutionContext;
import org.jboss.forge.addon.ui.result.Result;

public class HelloWorldUICommand extends AbstractUICommand {

    @Override
    public void initializeUI(UIBuilder builder) throws Exception {
        // TODO Auto-generated method stub
        
    }

    @Override
    public Result execute(UIExecutionContext context) throws Exception {
        // TODO Auto-generated method stub

    }

}</pre>




<p class="wikiPara">
Let’s write a bare minimum amount of code so that we can install our plugin and try it out.  Implement the <tt>execute()</tt> method by adding the following code:
</p>



<pre class="wikiPreformatted brush: java; gutter: true;">package com.acme.helloworld.ui;

import org.jboss.forge.addon.ui.command.AbstractUICommand;
import org.jboss.forge.addon.ui.context.UIBuilder;
import org.jboss.forge.addon.ui.context.UIExecutionContext;
import org.jboss.forge.addon.ui.result.Result;
import org.jboss.forge.addon.ui.result.Results;

public class HelloWorldUICommand extends AbstractUICommand {

    @Override
    public void initializeUI(UIBuilder builder) throws Exception {
        // TODO Auto-generated method stub
        
    }

    @Override
    public Result execute(UIExecutionContext context) throws Exception {
        return Results.success("Hello World");
    }

}</pre>




<p class="wikiPara">
Once that’s done, save the class and build the project by running <tt>mvn clean install</tt> in the parent folder of your <tt>addon</tt> project:
</p>

<img src="/images/24919.png">

<p class="wikiPara">
Then in Eclipse, select the <tt>helloworld-addon</tt> project (or whatever you have called it), press Ctrl + 5 to display the Forge command window and select the <i class="wikiEmphasis">Addon/Manage - Install an Addon</i> command:
</p>

<img src="/images/24920.png">

<p class="wikiPara">
Leave the default values in the <i class="wikiEmphasis">Install an Addon</i> window unchanged and click the <i class="wikiEmphasis">Finish</i> button:
</p>

<img src="/images/24921.png">

<p class="wikiPara">
If everything has gone to plan, you should notice a little popup window in the bottom right corner of the screen confirming that the addon was successfully installed.  We can test our new addon immediately by pressing Ctrl + 5 and scrolling down until we find our new command:
</p>

<img src="/images/24922.png">


<p class="wikiPara">
Clicking on the command should give us another popup window that displays our hello world message:
</p>

<img src="/images/24923.png">

<h1 class="wikiHeadline1" id="H-CreatingUserInterfaceElements"><a href="/2014/02/21/addon-development-with-forge-2-a-basic-primer#H-CreatingUserInterfaceElements">Creating User Interface Elements</a></h1>

<p class="wikiPara">
The next step is to create some user interface elements that prompt the user for input.  We’ll start simple by injecting a simple text input control and adding it to the dialog screen for our addon - here’s a complete code listing:
</p>



<pre class="wikiPreformatted brush: java; gutter: true;">package com.acme.helloworld.ui;

import javax.inject.Inject;

import org.jboss.forge.addon.ui.command.AbstractUICommand;
import org.jboss.forge.addon.ui.context.UIBuilder;
import org.jboss.forge.addon.ui.context.UIExecutionContext;
import org.jboss.forge.addon.ui.input.UIInput;
import org.jboss.forge.addon.ui.result.Result;
import org.jboss.forge.addon.ui.result.Results;

public class HelloWorldUICommand extends AbstractUICommand {

    @Inject UIInput&lt;String&gt; input;
    
    @Override
    public void initializeUI(UIBuilder builder) throws Exception {
        builder.add(input);
    }

    @Override
    public Result execute(UIExecutionContext context) throws Exception {
        return Results.success("Hello World");
    }

}</pre>




<p class="wikiPara">
Rebuild the project the same way as before, and reinstall the addon from the Forge command screen (Ctrl + 5 and select <i class="wikiEmphasis">Addon/Manage : Install an Addon</i>).  Press Ctrl + 5 again and select <tt>HelloWorldUICommand</tt>, and you should now see the following dialog window:
</p>

<img src="/images/24924.png">

<p class="wikiPara">
We can customize our input control further by adding a <tt>@WithAttributes</tt> annotation - add the following import:
</p>



<pre class="wikiPreformatted brush: java; gutter: true;">import org.jboss.forge.addon.ui.metadata.WithAttributes;</pre>




<p class="wikiPara">
Then add the <tt>@WithAttributes</tt> annotation to the UIInput:
</p>



<pre class="wikiPreformatted brush: java; gutter: true;">@Inject @WithAttributes(label = "Name", required = true, description = "Enter your name")  
    UIInput&lt;String&gt; input;</pre>




<p class="wikiPara">
The control can be customized by setting the various member values:
</p>

<p class="wikiPara">
<tt>label</tt> - The label for the input
</p>

<p class="wikiPara">
<tt>required</tt> - Make the input a required field
</p>

<p class="wikiPara">
<tt>description</tt> - The description when you mouse over the field.
</p>

<p class="wikiPara">
Save your class, then build and reinstall the addon following the same steps as before.  Execute the addon command using Ctrl + 5 and you should now see this:
</p>

<img src="/images/24925.png">

<p class="wikiPara">
We can now begin to see how simple it is to build a user interface for our addon.  Let’s extend it further by adding a select control that allows you to select a Maven dependency.  In this example I’ll use the PicketLink project as our guinea pig.  We’ll need to <tt>@Inject</tt> a <tt>DependencyResolver</tt> to locate the dependencies that we’re interested in, and a <tt>UISelectOne</tt> control to allow the user to select one of the dependencies.  Add this code to your class:
</p>



<pre class="wikiPreformatted brush: java; gutter: true;">@Inject DependencyResolver dependencyResolver;    
    
@Inject @WithAttributes(label = "Version", required = true, description = "Select the version of PicketLink") 
private UISelectOne&lt;Coordinate&gt; version;    
    
@Override
public void initializeUI(UIBuilder builder) throws Exception {
    builder.add(input);
        
    DependencyQuery query = DependencyQueryBuilder
            .create("org.picketlink:picketlink-api")
            .setFilter(new NonSnapshotDependencyFilter());

    List&lt;Coordinate&gt; coordinates = dependencyResolver.resolveVersions(query);
    version.setValueChoices(coordinates);
    builder.add(version);        
}</pre>




<p class="wikiPara">
The <tt>DependencyQuery</tt> is used to to declare the criteria that we’ll use to locate the dependencies we want, and the <tt>NonSnapshotDependencyFilter</tt> parameter tells the query that we’re only interested in non SNAPSHOT releases.   The Coordinate class is used to represent a specific Maven dependency and contains property values for the dependency’s <tt>groupId</tt>, <tt>artifactId</tt> and so forth.  We populate the select control with our list of Coordinates and finally add the control to the form via the <tt>builder.add()</tt> method.  Once you’re done the complete code listing should look like this:
</p>



<pre class="wikiPreformatted brush: java; gutter: true;">package com.acme.helloworld.ui;

import java.util.List;

import javax.inject.Inject;

import org.jboss.forge.addon.dependencies.Coordinate;
import org.jboss.forge.addon.dependencies.DependencyQuery;
import org.jboss.forge.addon.dependencies.DependencyResolver;
import org.jboss.forge.addon.dependencies.builder.DependencyQueryBuilder;
import org.jboss.forge.addon.dependencies.util.NonSnapshotDependencyFilter;
import org.jboss.forge.addon.ui.command.AbstractUICommand;
import org.jboss.forge.addon.ui.context.UIBuilder;
import org.jboss.forge.addon.ui.context.UIExecutionContext;
import org.jboss.forge.addon.ui.input.UIInput;
import org.jboss.forge.addon.ui.input.UISelectOne;
import org.jboss.forge.addon.ui.metadata.WithAttributes;
import org.jboss.forge.addon.ui.result.Result;
import org.jboss.forge.addon.ui.result.Results;

public class HelloWorldUICommand extends AbstractUICommand {
    @Inject @WithAttributes(label = "Name", required = true, description = "Enter your name")  
    UIInput&lt;String&gt; input;

    @Inject DependencyResolver dependencyResolver;    
    
    @Inject @WithAttributes(label = "Version", required = true, description = "Select the version of PicketLink") 
    private UISelectOne&lt;Coordinate&gt; version;    
    
    @Override
    public void initializeUI(UIBuilder builder) throws Exception {
        builder.add(input);
        
        DependencyQuery query = DependencyQueryBuilder
                .create("org.picketlink:picketlink-api")
                .setFilter(new NonSnapshotDependencyFilter());

        List&lt;Coordinate&gt; coordinates = dependencyResolver.resolveVersions(query);
        version.setValueChoices(coordinates);
        builder.add(version);        
    }

    @Override
    public Result execute(UIExecutionContext context) throws Exception {
        return Results.success("Hello World");
    }
}</pre>




<p class="wikiPara">
Rebuild and reinstall the addon, then invoke it from the Forge command window - you should see something that looks like this:
</p>

<img src="/images/24926.png">

<p class="wikiPara">
We can use these newfound powers to make changes to an actual project.  Let’s start by modifying our addon class so that it extends <tt>AbstractProjectCommand</tt> instead of <tt>AbstractUICommand</tt>:
</p>




<pre class="wikiPreformatted brush: java; gutter: true;">public class HelloWorldUICommand extends AbstractProjectCommand {</pre>





<p class="wikiPara">
This will cause Eclipse to complain about unimplemented methods, so use Eclipse to generate them:
</p>



<pre class="wikiPreformatted brush: java; gutter: true;">    @Override
    protected boolean isProjectRequired() {
        // TODO Auto-generated method stub
        return false;
    }

    @Override
    protected ProjectFactory getProjectFactory() {
        // TODO Auto-generated method stub
        return null;
    }</pre>





<p class="wikiPara">
The <tt>isProjectRequired()</tt> method is used to determine whether this addon requires a project to execute.  Since this is what we actually want, we’re going to return a value of true here:
</p>



<pre class="wikiPreformatted brush: java; gutter: true;">    @Override
    protected boolean isProjectRequired() {
        return true;
    }</pre>





<p class="wikiPara">
The <tt>getProjectFactory()</tt> method provides a reference to the currently selected project.  To implement this method we first need to <tt>@Inject</tt> a <tt>ProjectFactory</tt> object into our addon class:
</p>



<pre class="wikiPreformatted brush: java; gutter: true;">@Inject ProjectFactory projectFactory;</pre>




<p class="wikiPara">
Then we simply return this value in the method body:
</p>



<pre class="wikiPreformatted brush: java; gutter: true;">    @Override
    protected ProjectFactory getProjectFactory() {
        return projectFactory;
    }</pre>





<p class="wikiPara">
So far so good!  Now, since our goal is to add some dependencies to our project we need to somehow take the selected Coordinate value from our <tt>UISelectOne</tt> control and use it to add a dependency to the current project.  Lucky for us Forge provides all of the tools to make this happen - first of all we’re going to inject a <tt>DependencyInstaller</tt> into our class:
</p>



<pre class="wikiPreformatted brush: java; gutter: true;">@Inject DependencyInstaller dependencyInstaller;</pre>




<p class="wikiPara">
Then, in the <tt>execute()</tt> method we’re going to use a <tt>DependencyBuilder</tt> to create a reference to the <tt>Dependency</tt> based on the <tt>Coordinate</tt> value contained in the <tt>UISelectOne</tt> control, after which we’ll tell the <tt>DependencyInstaller</tt> to install that <tt>Dependency</tt> into the selected project:
</p>



<pre class="wikiPreformatted brush: java; gutter: true;">DependencyBuilder builder = DependencyBuilder.create();
builder.setCoordinate(version.getValue());

dependencyInstaller.install(getSelectedProject(context), builder);</pre>




<p class="wikiPara">
The complete code listing should now look like this:
</p>



<pre class="wikiPreformatted brush: java; gutter: true;">package com.acme.helloworld.ui;

import java.util.List;

import javax.inject.Inject;

import org.jboss.forge.addon.dependencies.Coordinate;
import org.jboss.forge.addon.dependencies.DependencyQuery;
import org.jboss.forge.addon.dependencies.DependencyResolver;
import org.jboss.forge.addon.dependencies.builder.DependencyBuilder;
import org.jboss.forge.addon.dependencies.builder.DependencyQueryBuilder;
import org.jboss.forge.addon.dependencies.util.NonSnapshotDependencyFilter;
import org.jboss.forge.addon.projects.ProjectFactory;
import org.jboss.forge.addon.projects.dependencies.DependencyInstaller;
import org.jboss.forge.addon.projects.ui.AbstractProjectCommand;
import org.jboss.forge.addon.ui.context.UIBuilder;
import org.jboss.forge.addon.ui.context.UIExecutionContext;
import org.jboss.forge.addon.ui.input.UIInput;
import org.jboss.forge.addon.ui.input.UISelectOne;
import org.jboss.forge.addon.ui.metadata.WithAttributes;
import org.jboss.forge.addon.ui.result.Result;
import org.jboss.forge.addon.ui.result.Results;

public class HelloWorldUICommand extends AbstractProjectCommand {
    
    @Inject ProjectFactory projectFactory;

    @Inject @WithAttributes(label = "Name", required = true, description = "Enter your name")  
    UIInput&lt;String&gt; input;
    
    @Inject DependencyInstaller dependencyInstaller;

    @Inject DependencyResolver dependencyResolver;    
    
    @Inject @WithAttributes(label = "Version", required = true, description = "Select the version of PicketLink") 
    private UISelectOne&lt;Coordinate&gt; version;    
    
    @Override
    public void initializeUI(UIBuilder builder) throws Exception {
        builder.add(input);
        
        DependencyQuery query = DependencyQueryBuilder
                .create("org.picketlink:picketlink-api")
                .setFilter(new NonSnapshotDependencyFilter());

        List&lt;Coordinate&gt; coordinates = dependencyResolver.resolveVersions(query);
        version.setValueChoices(coordinates);
        builder.add(version);        
    }

    @Override
    public Result execute(UIExecutionContext context) throws Exception {
        DependencyBuilder builder = DependencyBuilder.create();
        builder.setCoordinate(version.getValue());

        dependencyInstaller.install(getSelectedProject(context), builder);
        
        return Results.success("Hello World");
    }

    @Override
    protected boolean isProjectRequired() {
        return true;
    }

    @Override
    protected ProjectFactory getProjectFactory() {
        return projectFactory;
    }
}</pre>






<p class="wikiPara">
Rebuild and reinstall your addon, then select a project in Eclipse and invoke our addon from the Forge command window.  Keep in mind that we’ll be adding some new dependencies to the project you select so make sure it’s not something too important!  I suggest you use the addon project itself as it is quite easy to remove the dependencies afterwards.  Enter any value for the Name field (since we’ve marked it as required we’re forced to at least enter something) and select one of the dependencies from the Version control:
</p>

<img src="/images/24927.png">


<p class="wikiPara">
Click the Finish button and you should see the Hello World popup window appear briefly confirming that our addon ran successfully.  To check it actually did something, open the project’s <tt>pom.xml</tt> in an editor and you should notice that Forge has added the selected dependency by declaring it in the <tt>&lt;dependencyManagement&gt;</tt> section:
</p>

<img src="/images/24928.png">

<p class="wikiPara">
And also adding the dependency itself to the <tt>&lt;dependencies&gt;</tt> section:
</p>

<img src="/images/24929.png">

<p class="wikiPara">
Congratulations, you’ve made it to the end!  You’ve now created your first useful Forge addon that can add dependencies to an existing project.  Hopefully this guide has helped by providing a high level overview of the Forge Addon architecture and a beginner’s primer on creating a new Forge Addon.
</p>

<h1 class="wikiHeadline1" id="H-Summary"><a href="/2014/02/21/addon-development-with-forge-2-a-basic-primer#H-Summary">Summary</a></h1>

<p class="wikiPara">
In this guide we went through the steps to build and install both the Forge Shell and Forge Eclipse Plugin, then learned how to create a new Forge Addon project.  We also learned how to build and install our Addon, create custom dialog windows and have our Addon make changes to an existing project.  If you’d like to learn more about Forge, then the following resources are available:
</p>

<p class="wikiPara">
Forge web site: <a href="http://forge.jboss.org/" target="" class="regularLink">http://forge.jboss.org/</a>
</p>

<p class="wikiPara">
Documentation: <a href="http://forge.jboss.org/docs/index.html" target="" class="regularLink">http://forge.jboss.org/docs/index.html</a>
</p>

<p class="wikiPara">
Source code: <a href="https://github.com/forge" target="" class="regularLink">https://github.com/forge</a>
</p>

<p class="wikiPara">
Thanks for reading!</p>
</div>

