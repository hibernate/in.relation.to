---
title: "Weld, JSF 2.0 and Google App Engine - Navigating the minefield (Part 1)"
author: "Shane Bryzak"
blogger_name: "Shane"
creation_date: "03-02-2010"
original_tags: []
tags: [Weld]

relative_url: /2010/02/03/weld-jsf-20-and-google-app-engine-navigating-the-minefield-part-1
slug: weld-jsf-20-and-google-app-engine-navigating-the-minefield-part-1
lace: http://in.relation.to/14203.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2010/02/03/weld-jsf-20-and-google-app-engine-navigating-the-minefield-part-1
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
Ok maybe it's not a minefield, but there's still quite a few gotchas when trying to build a Weld application to run in Google App Engine.  Since I'm currently renovating my house I decided that it would be fun to blog about the experience (a software guy doing physical labour? weird!!) and it only made sense to kick the GAE tyres to see what all the hype was about.  Google have done a great
job providing a richly featured cloud platform with plenty of good documentation and a helpful online community, and the free quotas they provide are more than enough for the average low traffic web site.
</p>

<p class="wikiPara">
If you are a typical Java EE developer like me though, you have to approach GAE development with a slightly different development mindset.  This article will guide you through the step by step process for getting a Weld-based application running on GAE, and help you to avoid some speed bumps along the way.  To get started, you'll need just 2 things - a JDK and Eclipse.  For the rest of 
the stuff that you'll need I'll explain as we go along.
</p>

<p class="wikiPara">
This article is rather large and as such will come in two parts; part 1 will cover project creation, configuration and deploying a minimal app to GAE, and part 2 will dive into some of the issues faced when developing an application.
</p>

<p class="wikiPara">
Oh, by the way if you want to see an example Weld app running on GAE (and see me getting my hands dirty) then you can check out my site at <a href="http://www.renovatorsblog.com" target="" class="regularLink">http://www.renovatorsblog.com</a>.
</p>

<h2 class="wikiHeadline2" id="H-DownloadingTheGoogleAppEngineSDKEclipsePlugin"><a href="/2010/02/03/weld-jsf-20-and-google-app-engine-navigating-the-minefield-part-1#H-DownloadingTheGoogleAppEngineSDKEclipsePlugin">Downloading the Google App Engine SDK Eclipse Plugin</a></h2>

<p class="wikiPara">
I consider the GAE SDK to be an essential ingredient for GAE app development.  It handles all the work of setting up your project, enhancing your entity classes, running your app in local development mode and even deploying your app straight to the production GAE environment.
</p>

<p class="wikiPara">
To install the SDK plugin for Eclipse, you can follow the instructions here:
</p>

<p class="wikiPara">
<a href="http://code.google.com/appengine/docs/java/tools/eclipse.html" target="" class="regularLink">http://code.google.com/appengine/docs/java/tools/eclipse.html</a>
</p>

<p class="wikiPara">
For the impatient though, here's a summary of the installation steps (for Eclipse 3.5):
</p>

<ol class="wikiOrderedList">
<li class="wikiOrderedListItem"> Click the Help menu -&gt; Install New Software</li>
<li class="wikiOrderedListItem"> In the <q>Work with</q> box, enter <tt>http://dl.google.com/eclipse/plugin/3.5</tt>, then click the Add button then click OK.</li>
<li class="wikiOrderedListItem"> Expand the Plugin entry and check the 'Google Plugin for Eclipse 3.5' item, then expand the SDKs entry and check the 'Google App Engine Java SDK 1.3.0' item.</li>
<li class="wikiOrderedListItem"> Click the Next button, and accept any terms of service.</li>
<li class="wikiOrderedListItem"> Click the Finish button, wait for installation to complete and then when asked if you want to restart Eclipse, select 'Yes'.  </li>
</ol>

<h2 class="wikiHeadline2" id="H-CreateAnAppEngineAccount"><a href="/2010/02/03/weld-jsf-20-and-google-app-engine-navigating-the-minefield-part-1#H-CreateAnAppEngineAccount">Create an App Engine account</a></h2>

<p class="wikiPara">
If you don't have one already, then you'll need a GAE account.  
They're free, all you need is a Google account.  So go to the following page and sign up:
</p>

<p class="wikiPara">
<a href="http://appengine.google.com" target="" class="regularLink">http://appengine.google.com</a>
</p>

<p class="wikiPara">
Once you've done that, you should be presented with the 'My Applications' screen, containing an empty list and a 'Create an Application' button:
</p>

<a href="http://in.relation.to/service/File/14198"><img src="/images/14198.png"></a>

<h2 class="wikiHeadline2" id="H-CreateAnApplication"><a href="/2010/02/03/weld-jsf-20-and-google-app-engine-navigating-the-minefield-part-1#H-CreateAnApplication">Create an Application</a></h2>

<p class="wikiPara">
To be able to deploy an application to GAE, you need to give it a unique
application identifier.  Clicking the 'Create an Application' button will
take you to the following screen, where you can enter your application
identifier and a title for your application.
</p>

<a href="http://in.relation.to/service/File/14199"><img src="/images/14199.png"></a>

<p class="wikiPara">
For the authentication options, you either have the choice of using Google Accounts which allows anyone with a Google account to sign in, or you can restrict your application just to the users of a Google Apps domain.  We're going to choose door number one, and allow any user with a Google account to sign in.  
</p>

<p class="wikiPara">
Of course, if you don't want to then you don't have to require your users to sign in to your application at all (by not specifying any security restrictions for your pages, which we'll get to a bit later).  If you do want some kind of security though, the advantage of using the Google accounts API is that you don't have to worry about building the screens, creating user/role entities, writing action code, etc for managing the users in your app - Google takes care of all that for you.
</p>

<h2 class="wikiHeadline2" id="H-CreatingTheProject"><a href="/2010/02/03/weld-jsf-20-and-google-app-engine-navigating-the-minefield-part-1#H-CreatingTheProject">Creating the project</a></h2>

<p class="wikiPara">
Once you've created a new application with a unique application identifier, you'll be presented with an 'Application Registered Successfully' message.  Click the 'View the dashboard...' link to view the dashboard for your new app:
</p>

<a href="http://in.relation.to/service/File/14200"><img src="/images/14200.png"></a>

<p class="wikiPara">
Now that we've created our new app, it's time to create the project.  In Eclipse, click File -&gt; New -&gt; Web Application Project to get the following dialog:
</p>

<a href="http://in.relation.to/service/File/14201"><img src="/images/14201.png"></a>

<p class="wikiPara">
Enter a project name and the default package for your classes.  Uncheck the 'Use Google Web Toolkit' option (we'll be using JSF 2.0 for our view) and then click Finish to create the new project.  Then, right click on the new project in the Package Explorer and select Google -&gt; App Engine Settings.
</p>

<p class="wikiPara">
In the 'Application ID' box, enter the unique application identifier that you registered for your application.  For the Version, just enter 1, then click OK to save your settings.  The values actually get saved in <tt>/war/WEB-INF/appengine-web.xml</tt>, so open this file up now and take a look at what it contains.  Actually, there's one more setting you need to add to this file, to be able to support user sessions in your app.  Add the following line to the file:
</p>

<pre class="wikiPreformatted">&lt;sessions-enabled&gt;true&lt;/sessions-enabled&gt;</pre>


<p class="wikiPara">
The complete file should look something like this:
</p>

<pre class="wikiPreformatted">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;appengine-web-app xmlns="http://appengine.google.com/ns/1.0"&gt;
	&lt;application&gt;myapplication&lt;/application&gt;
	&lt;version&gt;1&lt;/version&gt;
	&lt;sessions-enabled&gt;true&lt;/sessions-enabled&gt;
	
	&lt;!-- Configure java.util.logging --&gt;
	&lt;system-properties&gt;
		&lt;property name="java.util.logging.config.file" value="WEB-INF/logging.properties"/&gt;
	&lt;/system-properties&gt;
	
&lt;/appengine-web-app&gt;</pre>


<h2 class="wikiHeadline2" id="H-ConfiguringJSF"><a href="/2010/02/03/weld-jsf-20-and-google-app-engine-navigating-the-minefield-part-1#H-ConfiguringJSF">Configuring JSF</a></h2>

<p class="wikiPara">
Like any servlet-based application, the <tt>web.xml</tt> file is where most of the important stuff is configured.  JSF requires quite a lot of config, so let's look at the options one at a time.  By the way, Google actually have some documentation on configuring JSF 2.0 for GAE, so if you're interested you can check it out <a href="https://sites.google.com/a/wildstartech.com/adventures-in-java/Java-Platform-Enterprise-Edition/JavaServer-Faces/sun-javaserver-faces-reference-implementation/configuring-jsf-20-to-run-on-the-google-appengine" target="" class="regularLink">here</a>.
</p>

<p class="wikiPara">
The first thing we need to do is disable some of the multi-threaded stuff in JSF, as GAE doesn't
support multi-threaded applications.  Add the following two entries to <tt>/war/WEB-INF/web.xml</tt>:
</p>

<pre class="wikiPreformatted">  &lt;context-param&gt;
    &lt;param-name&gt;com.sun.faces.enableMultiThreadedStartup&lt;/param-name&gt;
    &lt;param-value&gt;false&lt;/param-value&gt;
  &lt;/context-param&gt;
  
  &lt;context-param&gt;
    &lt;param-name&gt;com.sun.faces.enableThreading&lt;/param-name&gt;
    &lt;param-value&gt;false&lt;/param-value&gt;
  &lt;/context-param&gt;  </pre>

<p class="wikiPara">
 
Next, we need to configure the Faces servlet.  This will alllow requests that end in the <tt>.jsf</tt> suffix to
be handled by JSF:
</p>

<pre class="wikiPreformatted">  &lt;servlet&gt;
    &lt;servlet-name&gt;Faces Servlet&lt;/servlet-name&gt;
    &lt;servlet-class&gt;javax.faces.webapp.FacesServlet&lt;/servlet-class&gt;
    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
  &lt;/servlet&gt;

  &lt;servlet-mapping&gt;
    &lt;servlet-name&gt;Faces Servlet&lt;/servlet-name&gt;
    &lt;url-pattern&gt;*.jsf&lt;/url-pattern&gt;
  &lt;/servlet-mapping&gt;</pre>


<p class="wikiPara">
Next, we need to configure EL:
</p>

<pre class="wikiPreformatted">  &lt;context-param&gt;
    &lt;param-name&gt;com.sun.faces.expressionFactory&lt;/param-name&gt;
    &lt;param-value&gt;com.sun.el.ExpressionFactoryImpl&lt;/param-value&gt;
  &lt;/context-param&gt;</pre>

<p class="wikiPara">
  
Finally, there's a couple more options recommended by Google.  From what I've read, version 1.3.0 onward
of the SDK now supports server-side state saving, however I haven't tried it yet so let's just leave it
as client-side for now - the reason for this is to avoid a <tt>DatastoreTimeoutException</tt> issue that can possibly
render a user's session broken until their session has expired (there's a Google Groups thread on this
subject <a href="http://groups.google.com/group/google-appengine-java/browse_thread/thread/9edd8ce030e336e9?pli=1" target="" class="regularLink">here</a> if you're interested).  
</p>

<pre class="wikiPreformatted">  &lt;context-param&gt;
    &lt;param-name&gt;javax.faces.STATE_SAVING_METHOD&lt;/param-name&gt;
    &lt;param-value&gt;client&lt;/param-value&gt;
  &lt;/context-param&gt;</pre>

<p class="wikiPara">
  
The following option is mentioned on the JSF 2.0 and 
<a href="https://sites.google.com/a/wildstartech.com/adventures-in-java/Java-Platform-Enterprise-Edition/JavaServer-Faces/sun-javaserver-faces-reference-implementation/configuring-jsf-20-to-run-on-the-google-appengine/javaserverfaces-20-and-google-app-engine-compatibility-issues" target="" class="regularLink">GAE compatibility issues</a> page, and is required to prevent a <tt>ConfigurationException</tt> from occurring because of a threading issue: 
</p>

<pre class="wikiPreformatted">  &lt;context-param&gt;
    &lt;param-name&gt;javax.faces.PROJECT_STAGE&lt;/param-name&gt;
    &lt;param-value&gt;Production&lt;/param-value&gt;
  &lt;/context-param&gt;</pre>

<p class="wikiPara">
  
Once you've added all these options to <tt>web.xml</tt>, you can also create a <tt>faces-config.xml</tt> file in the <tt>WEB-INF</tt> directory also.  Since JSF 2.0 this file isn't actually required, but since we'll be putting our navigation rules there later on it won't hurt to create it now.  Thankfully in JSF 2.0 there is minimal configuration required here, basically an empty file:
</p>

<pre class="wikiPreformatted">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;faces-config version="2.0"
   xmlns="http://java.sun.com/xml/ns/javaee"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="
      http://java.sun.com/xml/ns/javaee
      http://java.sun.com/xml/ns/javaee/web-facesconfig_2_0.xsd"&gt;
&lt;/faces-config&gt;</pre>


<h2 class="wikiHeadline2" id="H-AddingTheJSFLibsToYourProject"><a href="/2010/02/03/weld-jsf-20-and-google-app-engine-navigating-the-minefield-part-1#H-AddingTheJSFLibsToYourProject">Adding the JSF libs to your project</a></h2>

<p class="wikiPara">
Due to the way that JSF 2.0 checks if it can use <tt>InitialContext</tt> (see the <tt>processJndiEntries()</tt> method in
<a href="http://fisheye5.atlassian.com/browse/javaserverfaces-sources/jsf-ri/src/com/sun/faces/config/WebConfiguration.java" target="" class="regularLink">WebConfiguration.java</a> - there are certain Java classes that aren't supported in GAE, the ones that are can be found in the <a href="http://code.google.com/appengine/docs/java/jrewhitelist.html" target="" class="regularLink">JRE whitelist</a>), we need to use a hacked version of <tt>jsf-impl.jar</tt> that comments out the body of the <tt>processJndiEntries()</tt> method.  You can download a modified <tt>jsf-impl.jar</tt> from <a href="http://javadocs.wordpress.com/2009/10/17/mojarra-jsf-2-0-rc2-and-google-app-engine-sdk-1-2-6/" target="" class="regularLink">Josh Carrier's blog</a>, direct link here: 
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> <a href="http://go2.wordpress.com/?id=725X1342&amp;site=javadocs.wordpress.com&amp;url=http%3A%2F%2Fcode.google.com%2Fp%2Fjoshjcarrier%2Fsource%2Fbrowse%2Ftrunk%2FSun%2520JSF%2520GAE%2Fjsf-impl-gae.jar" target="" class="regularLink">http://go2.wordpress.com/?id=725X1342&amp;site=javadocs.wordpress.com&amp;url=http%3A%2F%2Fcode.google.com%2Fp%2Fjoshjcarrier%2Fsource%2Fbrowse%2Ftrunk%2FSun%2520JSF%2520GAE%2Fjsf-impl-gae.jar</a>.</li>
</ul>

<p class="wikiPara">
Once you download it, place it in the <tt>WEB-INF/lib</tt> directory in your project.  You'll also need <tt>jsf-api.jar</tt>, which you can get directly from the following link.  Once you get it stick it in the <tt>WEB-INF/lib</tt> directory also.
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> <a href="http://download.java.net/maven/2/javax/faces/jsf-api/2.0/jsf-api-2.0.jar" target="" class="regularLink">http://download.java.net/maven/2/javax/faces/jsf-api/2.0/jsf-api-2.0.jar</a>
</li>
</ul>

<p class="wikiPara">
We'll also need to download the EL libraries.  I couldn't really find an official download page just for EL, so just download them straight from the java.net Maven repository:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> <a href="http://download.java.net/maven/2/javax/el/el-api/2.2/el-api-2.2.jar" target="" class="regularLink">http://download.java.net/maven/2/javax/el/el-api/2.2/el-api-2.2.jar</a>
</li>
<li class="wikiUnorderedListItem"> <a href="http://download.java.net/maven/2/org/glassfish/web/el-impl/2.2/el-impl-2.2.jar" target="" class="regularLink">http://download.java.net/maven/2/org/glassfish/web/el-impl/2.2/el-impl-2.2.jar</a>
</li>
</ul>

<p class="wikiPara">
Once you download them both put them in the <tt>WEB-INF/lib</tt> directory.
</p>

<h2 class="wikiHeadline2" id="H-ConfiguringWeld"><a href="/2010/02/03/weld-jsf-20-and-google-app-engine-navigating-the-minefield-part-1#H-ConfiguringWeld">Configuring Weld</a></h2>

<p class="wikiPara">
The configuration for Weld is quite simple, all you need to do is add the following entry to <tt>web.xml</tt>:
</p>


<pre class="wikiPreformatted">  &lt;listener&gt;
    &lt;listener-class&gt;org.jboss.weld.environment.servlet.Listener&lt;/listener-class&gt;
  &lt;/listener&gt;</pre>

<p class="wikiPara">
 
Next, create an empty file (no contents whatsoever) called <tt>beans.xml</tt> in the <tt>/war/WEB-INF</tt> directory.  This is so Weld can find your beans.
  
Getting the Weld libs is a little more work, unfortunately.  We've made a few fixes to the Weld code to address some issues with running in GAE, so you can't use the 1.0 download.  The option here is to either a) build it yourself (which I'll go through the steps for in a moment, since you might be impatient ;) or b) wait for the 1.0.1.RC2 release, which should be out any day now.
</p>

<h2 class="wikiHeadline2" id="H-BuildingWeldFromSVN"><a href="/2010/02/03/weld-jsf-20-and-google-app-engine-navigating-the-minefield-part-1#H-BuildingWeldFromSVN">Building Weld from SVN</a></h2>

<p class="wikiPara">
Compiling the Weld libs from source is really not as scary as many people think, all you need is an SVN client and Maven 2.  We only need the weld-servlet module, so start by checking it out from SVN:
</p>

<p class="wikiPara">
<tt>svn checkout http://anonsvn.jboss.org/repos/weld/servlet/trunk/</tt>
</p>

<p class="wikiPara">
Once you have it checked out, you can build it by running <tt>mvn clean install</tt>.  Once it's built, copy the <tt>weld-servlet-xxx.jar</tt>
file from the <tt>build/target</tt> directory into the <tt>WEB-INF/lib</tt> directory of your project.  This is the only jar file you need to add
to your project for Weld support.
</p>

<p class="wikiPara">
With all the required libraries now in your project's <tt>WEB-INF/lib</tt> directory, do a refresh in Eclipse (either press F5 or right 
click on your project and select Refresh) then go into the Java Build Path page (right click on project -&gt; Properties -&gt; Java 
Build Path) and click on the Libraries tab.  Click the 'Add Jars' button and browse to your project's <tt>war/WEB-INF/lib</tt> directory
and select <tt>weld-servlet.jar</tt>, then click OK.  This will allow us to use the CDI annotations in our classes.
</p>

<h2 class="wikiHeadline2" id="H-HelloWorld"><a href="/2010/02/03/weld-jsf-20-and-google-app-engine-navigating-the-minefield-part-1#H-HelloWorld">Hello World</a></h2>

<p class="wikiPara">
Now that we've got our project set up and all the required libraries in place, it's time to write some code.  Just to ensure
that everything is working ok, we're going to start with a simple Hello World example.  First of all, create the following 
bean class in your new project:
</p>


<pre class="wikiPreformatted">import javax.inject.Named;

@Named
public class HelloWorld
{
   public String getMessage()
   {
      return "Hello, World";
   }
}</pre>


<p class="wikiPara">
Next, create the following JSF page in the <tt>/war</tt> directory (call it <tt>helloworld.xhtml</tt>):
</p>

<pre class="wikiPreformatted">&lt;?xml version="1.0" encoding="iso-8859-1" ?&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"&gt;
&lt;f:view xmlns="http://www.w3.org/1999/xhtml"
   xmlns:ui="http://java.sun.com/jsf/facelets"
   xmlns:f="http://java.sun.com/jsf/core"
   xmlns:h="http://java.sun.com/jsf/html"
   contentType="text/html"&gt;   
&lt;html&gt;
  &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/&gt;  
  &lt;/head&gt;
  &lt;body&gt;
    #{helloWorld.message}
  &lt;/body&gt;
&lt;/html&gt;
&lt;/f:view&gt;</pre>


<h2 class="wikiHeadline2" id="H-RunningYourAppLocally"><a href="/2010/02/03/weld-jsf-20-and-google-app-engine-navigating-the-minefield-part-1#H-RunningYourAppLocally">Running your app locally</a></h2>

<p class="wikiPara">
To take your new application for a test run it's best to try running it locally before you deploy it to production.  
Right-click on your project, then click Run As -&gt; Web Application.  You should see a few log messages as the servlet
container starts up, and then the following message:
</p>

<p class="wikiPara">
<tt>The server is running at http://localhost:8888/</tt>
</p>

<p class="wikiPara">
Once you see this, it means your app is up and running.  Open your web browser and go to
<a href="http://localhost:8888/helloworld.jsf" target="" class="regularLink">http://localhost:8888/helloworld.jsf</a>.  If everything is in order you should see the following page:
</p>

<a href="http://in.relation.to/service/File/14202"><img src="/images/14202.png"></a>

<p class="wikiPara">
If you see this page, then congratulations!  It's time to deploy your app to the GAE production environment.  If you don't see this page, then go through all the previous steps to make sure you haven't missed anything.  After that, if you still can't get this page to display then post a comment describing where you're stuck and we'll try to help you out.
</p>

<h2 class="wikiHeadline2" id="H-DeployingToGoogleAppEngine"><a href="/2010/02/03/weld-jsf-20-and-google-app-engine-navigating-the-minefield-part-1#H-DeployingToGoogleAppEngine">Deploying to Google App Engine</a></h2>

<p class="wikiPara">
Now it's time to deploy your application.  Right click on your project, and select Google -&gt; Deploy To App Engine.  You will be prompted for your Google accounts username and password, so enter them here.  After entering them the deployment process will take a little while complete, but eventually you'll get a 'Deployment completed successfully' message. 
</p>

<p class="wikiPara">
To see if your deployment was successful, go to your web browser and open your application page - Google apps are deployed to <tt>&lt;app-id&gt;.appspot.com</tt>, where the app-id is your unique application ID.  For example, if your application ID is <tt>joeblogshelloworld</tt>, then your application will be available at <tt>http://joeblogshelloworld.appspot.com</tt>.  So open your application page as follows:
</p>

<pre class="wikiPreformatted">http://&lt;app-id&gt;.appspot.com/helloworld.jsf</pre>

<p class="wikiPara">
  
If all has gone well, then you should see the same <i class="wikiEmphasis">Hello, World</i> message that you saw when running your application locally.
</p>

<h2 class="wikiHeadline2" id="H-Summary"><a href="/2010/02/03/weld-jsf-20-and-google-app-engine-navigating-the-minefield-part-1#H-Summary">Summary</a></h2>

<p class="wikiPara">
This concludes part 1 of this article, where we saw how to set up the GAE SDK, create a new GAE project, and configure JSF 2.0
and Weld.  We also tested that our JSF page was working by evaluating an EL expression, and confirmed that our Weld bean could be
found by using it as a backing bean for our page.  
</p>

<p class="wikiPara">
In the next part of this series, we'll spend some time looking at the 
application development process, and how to make use of the APIs that Google App Engine provides for security,
database access and data caching, among other things.</p>
</div>

