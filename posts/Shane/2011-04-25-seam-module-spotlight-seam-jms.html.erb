---
title: "Seam Module Spotlight - Seam JMS"
author: "Shane Bryzak"
blogger_name: "Shane"
creation_date: "25-04-2011"
original_tags: []
tags: [Seam]

relative_url: /2011/04/25/seam-module-spotlight-seam-jms
slug: seam-module-spotlight-seam-jms
lace: http://in.relation.to/19494.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2011/04/25/seam-module-spotlight-seam-jms
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
(<i class="wikiEmphasis">This week's module spotlight is written by John Ament, the Seam JMS module lead. - Shane</i>)
</p>

<p class="wikiPara">
<i class="wikiEmphasis">by John Ament</i>
</p>

<p class="wikiPara">
For the third entry in Seam Module spotlight, I present to you Seam JMS.
</p>

<p class="wikiPara">
Seam JMS is a set of components meant to simplify use cases around JMS. Seam JMS aims to fill the gap between the JMS APIs and a cleaner feel to working with message oriented middleware. We do this by:
</p>


<ol class="wikiOrderedList">
<li class="wikiOrderedListItem"> Providing basic injection capabilities for JMS Resources.</li>
<li class="wikiOrderedListItem"> Providing a clean API for sending &amp; receiving messages</li>
<li class="wikiOrderedListItem"> Providing an easy-to-use mechanism to map the sending and receiving of JMS messages to the firing and observing of CDI events.</li>
</ol>


<p class="wikiPara">
The main goal of this article is to go in depth with how to work with JMS Messages as CDI Events.  At the end, I’ll discuss a little future stuff. For details about how to get started with the project, please start with the reference guide.
</p>



<h2 class="wikiHeadline2" id="H-Requirements"><a href="/2011/04/25/seam-module-spotlight-seam-jms#H-Requirements">Requirements</a></h2>

<p class="wikiPara">
In order to use Seam JMS, you need to have a JMS <tt>ConnectionFactory</tt> bound at the JNDI location <tt>/ConnectionFactory</tt>.  In addition, you’ll need to include the <tt>seam-jms.jar</tt> libary in your project; as well as a required dependency on <tt>seam-solder.jar</tt>.  Optionally, if you are working in a servlet container, it is highly recommended to include the <tt>seam-servlet.jar</tt> library in your application, this will add in support container start-up events to the application.
</p>

<h2 class="wikiHeadline2" id="H-Mapping"><a href="/2011/04/25/seam-module-spotlight-seam-jms#H-Mapping">Mapping</a></h2>

<p class="wikiPara">
Mapping events is at the core of what Seam JMS does. This allows you to fire a CDI event and have a JMS message sent to a destination, and vice versa.. Seam JMS allows you to define both one-way and two-way events; supporting both ingress (in-bound to the application) as well as egress (out-bound from the application).  When a two-way route is used, your application will both create and process the event, handled as an asynchronous event.
</p>

<h2 class="wikiHeadline2" id="H-Routing"><a href="/2011/04/25/seam-module-spotlight-seam-jms#H-Routing">Routing</a></h2>

<p class="wikiPara">
CDI Event -&gt; JMS message mapping happens via POJIs (Plain Old Java Interfaces).   There are three supported ways to create the routes via interfaces.  Here is a quick example mapping interface:
</p>


<pre class="wikiPreformatted">public interface ApplicationObserverMappings {
    @Routing(RouteType.BOTH)
    public void mapStrings(@Observes String s, @MyTopic Topic topic);
    @Routing(RouteType.INGRESS)
    public void mapInboundLongs(@Observes Long l, @MyQueue Queue queue);
    @Routing(RouteType.EGRESS)
    public void mapOutboundShorts(@Observes Short s, @MyOtherTopic Topic topic);
}</pre>



<p class="wikiPara">
This creates three routes: one egress, one ingress and one bidirectional.  For each ingress and bi-drectional route you will need to define an observer method to listen for events fired on the appropriate destination. When dealing with ingress routes, a JMS Message Listener is created on application start up.  Note: if you are not using Seam Servlet in your application, you will need to inject a reference to <tt>org.jboss.seam.jms.bridge.RouteBuilder</tt> in your startup component in order to trigger the initialization of all listeners.
</p>

<p class="wikiPara">
At ths point, all Topics &amp; Queues are resolved against CDI bean lookup.  Each message coming in via the message listener that has the correct type will be fired to all observer methods of the correct type.  In the above, you would need appropriate producer methods for Queues/Topics matching the paired qualifiers, for example:
</p>


<pre class="wikiPreformatted">@Resource(“jms/MyTopic”) Topic topic;

@Produces @MyTopic
public Topic produceMyTopic() {
   return topic;
}</pre>




<p class="wikiPara">
For each of the egress events, you would define a CDI Event (injection point).  Firing an object through this event results in creating a JMS message.
</p>

<h2 class="wikiHeadline2" id="H-FiringEvents"><a href="/2011/04/25/seam-module-spotlight-seam-jms#H-FiringEvents">Firing Events</a></h2>

<p class="wikiPara">
One you have defined your routes, you need to have an <tt>Event</tt> or a <tt>BeanManager</tt> to fire events against.  For example, inject the following <tt>Event</tt> in your code
</p>

<pre class="wikiPreformatted">@Inject @Routing(RouteType.EGRESS) Event&lt;String&gt; xmlEvent;</pre>


<p class="wikiPara">
And in your business logic, fire the following:
</p>

<pre class="wikiPreformatted">public void sendData(String data) {
   xmlEvent.fire(“&lt;simple&gt;”+data+”&lt;/simple”);
}</pre>



<p class="wikiPara">
This event will be forwarded to the JMS Topic identified by the CDI component of type <tt>Topic</tt> that is qualified <tt>@MyTopic</tt>.  A <tt>TextMessage</tt> will be published to the <tt>Topic</tt>, with the text contained in the event.  If the event was another object, an <tt>ObjectMessage</tt> would be published.  Likewise, if we were using a <tt>Queue</tt> the appropriate Messages would be sent to the Queue.
</p>

<h2 class="wikiHeadline2" id="H-HandlingEvents"><a href="/2011/04/25/seam-module-spotlight-seam-jms#H-HandlingEvents">Handling Events</a></h2>

<p class="wikiPara">
For all ingress and bi-directional routes, Seam JMS will create events for all <tt>Message</tt>s received on the JMS Destinations defined within the route.  The object type will be the payload type of the message; <tt>TextMessage</tt>s become strings.  The event will include all qualifiers from the route, as well a necessary <tt>@Routing</tt> annotation, with ingress type.
</p>

<p class="wikiPara">
These Routes, as noted above, will generate messages that will be handled by these observer methods.
</p>

<pre class="wikiPreformatted">@Routing(RouteType.BOTH)
public void mapStrings(@Observes String s, @MyTopic Topic topic);

public void handleInBoundText(@Observes @Routing(RouteType.INGRESS) String xmlString) {
…
}

@Routing(RouteType.INGRESS)
public void mapInboundLongs(@Observes Long l, @MyQueue Queue queue);

public void handleInBoundLongs(@Observes @Routing(RouteType.INGRESS) Long someId) {
…
}
</pre>


<h2 class="wikiHeadline2" id="H-SupportAndCapabilities"><a href="/2011/04/25/seam-module-spotlight-seam-jms#H-SupportAndCapabilities">Support and Capabilities</a></h2>

<p class="wikiPara">
By default, all events are fired as <tt>ObjectMessage</tt>s.  The underlying object is the Serialized event object that was fired. If the fired object is a <tt>String</tt>, then we use a <tt>TextMessage</tt> instead of <tt>ObjectMessage</tt>.  This should help save on bandwidth, selectively (e.g. simple XML instead of a Serialized object).  Using the provided <tt>MessageManager</tt> API, you can easily send and receive messages as well, allowing for easy programmatic integration with the defined routes, without needing to fire events or handling events.
</p>

<h2 class="wikiHeadline2" id="H-ToTheFuture"><a href="/2011/04/25/seam-module-spotlight-seam-jms#H-ToTheFuture">To the Future</a></h2>

<p class="wikiPara">
The biggest near term add on coming is support in Seam Forge.  We will add tooling support for Routing interfaces, HornetQ descriptors, generating MDBs and creating observer methods.  In the next release of Seam JMS, there will be more testing in cross-container capabilities, as well as explicit distribution to remote systems.</p>
</div>

