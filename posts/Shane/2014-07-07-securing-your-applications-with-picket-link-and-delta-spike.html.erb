---
title: "Securing Your Applications with PicketLink and DeltaSpike"
author: "Shane Bryzak"
blogger_name: "Shane"
creation_date: "07-07-2014"
original_tags: [Contexts and Dependency Injection,DeltaSpike,News,PicketLink]
tags: [CDI,PicketLink]

relative_url: /2014/07/07/securing-your-applications-with-picket-link-and-delta-spike
slug: securing-your-applications-with-picket-link-and-delta-spike
lace: http://in.relation.to/27758.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2014/07/07/securing-your-applications-with-picket-link-and-delta-spike
---
<div id="documentDisplay" class="documentDisplay">


<img src="/images/27757.jpeg" align="right" style="margin-left:20px">

<p class="wikiPara">
If you’re looking for a simple way to secure your Java EE application’s classes and methods, then PicketLink in conjunction with DeltaSpike provides an elegant and flexible solution thanks to DeltaSpike’s support for typesafe security annotations.  This powerful combination means you can easily apply security to your application in three simple steps, which we’ll be examining in more detail in this article.
</p>

<p class="wikiPara">
Before we get started though, let’s take a closer look at each of these individual projects.
</p>

<h1 class="wikiHeadline1" id="H-PicketLink"><a href="/2014/07/07/securing-your-applications-with-picket-link-and-delta-spike#H-PicketLink">PicketLink</a></h1>

<p class="wikiPara">
PicketLink (<a href="http://www.picketlink.org" target="" class="regularLink">http://www.picketlink.org</a>) is an application security framework for Java EE.  It provides features such as Identity Management (IDM), credential management, authentication API, permissions and permission management, plus much more.  At the time of writing, the latest available version of PicketLink is 2.6.0.Final.
</p>

<h1 class="wikiHeadline1" id="H-ApacheDeltaSpike"><a href="/2014/07/07/securing-your-applications-with-picket-link-and-delta-spike#H-ApacheDeltaSpike">Apache DeltaSpike</a></h1>

<p class="wikiPara">
Apache DeltaSpike (<a href="http://deltaspike.apache.org" target="" class="regularLink">http://deltaspike.apache.org</a>) is a collection of portable extensions for Java EE, built on top of the CDI (Contexts and Dependency Injection) standard.  It enhances the Java EE platform by providing a set of useful features for application developers.  The latest release of Deltaspike is 1.0.
</p>

<h1 class="wikiHeadline1" id="H-SettingUpTheMavenDependencies"><a href="/2014/07/07/securing-your-applications-with-picket-link-and-delta-spike#H-SettingUpTheMavenDependencies">Setting up the Maven Dependencies</a></h1>

<p class="wikiPara">
This step is required to add the PicketLink libraries to your application.  Start by defining a property value for the version of PicketLink that you’ll be using - the latest version at time of writing is 2.6.0.Final.  Add the following property declaration to the <tt>&lt;properties&gt;</tt> section of your project’s pom.xml:
</p>



<pre class="wikiPreformatted brush: xml; gutter: true;">  &lt;properties&gt;
    &lt;!-- PicketLink dependency versions --&gt;
    &lt;version.picketlink.javaee.bom&gt;2.6.0.Final&lt;/version.picketlink.javaee.bom&gt;
  &lt;/properties&gt;</pre>




<p class="wikiPara">
Then add the PicketLink BOM to the <tt>&lt;dependencyManagement&gt;</tt> section:
</p>



<pre class="wikiPreformatted brush: xml; gutter: true;">  &lt;dependencyManagement&gt;
    &lt;dependencies&gt;
      &lt;!-- Dependency Management for PicketLink and Apache Deltaspike. --&gt;
      &lt;dependency&gt;
        &lt;groupId&gt;org.picketlink&lt;/groupId&gt;
        &lt;artifactId&gt;picketlink-javaee-6.0&lt;/artifactId&gt;
        &lt;version&gt;${version.picketlink.javaee.bom}&lt;/version&gt;
        &lt;scope&gt;import&lt;/scope&gt;
        &lt;type&gt;pom&lt;/type&gt;
      &lt;/dependency&gt;
    &lt;/dependencies&gt;
  &lt;/dependencyManagement&gt;</pre>




<p class="wikiPara">
Finally, add the PicketLink dependency to the <tt>&lt;dependencies&gt;</tt> section:
</p>



<pre class="wikiPreformatted brush: xml; gutter: true;">    &lt;dependency&gt;
      &lt;groupId&gt;org.picketlink&lt;/groupId&gt;
      &lt;artifactId&gt;picketlink&lt;/artifactId&gt;
      &lt;scope&gt;compile&lt;/scope&gt;
    &lt;/dependency&gt;</pre>




<p class="wikiPara">
We’re done!  The next step is to enable the DeltaSpike security interceptor.
</p>

<h1 class="wikiHeadline1" id="H-EnablingTheSecurityInterceptor"><a href="/2014/07/07/securing-your-applications-with-picket-link-and-delta-spike#H-EnablingTheSecurityInterceptor">Enabling the Security Interceptor</a></h1>

<p class="wikiPara">
For the security interceptor to perform authorization checks for the classes or methods that we wish to secure with our security binding annotations, we must first enable it in our application’s <tt>beans.xml</tt> file.  In a web application this file can be found in the <tt>WEB-INF</tt> directory.  Add the <tt>&lt;interceptors&gt;</tt> section as shown in the following example:
</p>



<pre class="wikiPreformatted brush: xml; gutter: true;">&lt;beans xmlns="http://java.sun.com/xml/ns/javaee"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="
      http://java.sun.com/xml/ns/javaee 
      http://java.sun.com/xml/ns/javaee/beans_1_0.xsd"&gt;
    &lt;interceptors&gt;
        &lt;class&gt;org.apache.deltaspike.security.impl.extension.SecurityInterceptor&lt;/class&gt;
    &lt;/interceptors&gt;
&lt;/beans&gt;</pre>




<h1 class="wikiHeadline1" id="H-Step1CreateTheSecurityAnnotation"><a href="/2014/07/07/securing-your-applications-with-picket-link-and-delta-spike#H-Step1CreateTheSecurityAnnotation">Step 1: Create the Security Annotation</a></h1>

<p class="wikiPara">
This first step is extremely simple - all we need to do is create an annotation and meta-annotate it with <tt>@SecurityBindingType</tt>.  As an example let’s create a security annotation that we can use to restrict access only to users that are currently logged in:
</p>



<pre class="wikiPreformatted brush: java; gutter: true;">@Retention(value = RetentionPolicy.RUNTIME)
@Target({ ElementType.TYPE, ElementType.METHOD })
@Documented
@SecurityBindingType
public @interface LoggedIn { }</pre>




<p class="wikiPara">
Make sure that the <tt>@Target</tt> is set to both <tt>TYPE</tt> and <tt>METHOD</tt> - this will ensure that the annotation can be used to secure either <i class="wikiEmphasis">all</i> the methods of a class (when applied to the class itself) or to secure individual methods.  The <tt>@SecurityBindingType</tt> annotation can be found in the <tt>org.apache.deltaspike.security.api.authorization</tt> package.
</p>

<h1 class="wikiHeadline1" id="H-Step2CreateTheAuthorizerMethod"><a href="/2014/07/07/securing-your-applications-with-picket-link-and-delta-spike#H-Step2CreateTheAuthorizerMethod">Step 2: Create the Authorizer method</a></h1>

<p class="wikiPara">
This step is where we’ll be implementing the business logic for our security annotation.  Each security binding annotation requires a corresponding authorizer method.  This method must match the security binding annotation and any of its member values (excluding those annotated with <tt>@NonBinding</tt>, mirroring the behaviour of CDI itself).  There must be exactly one authorizer method per unique security binding annotation usage.
</p>

<p class="wikiPara">
The authorizer method can be placed in a bean class of your choosing, and there are no restrictions on the scope of the bean (in the following example we’ll use an <tt>@ApplicationScoped</tt> bean).  Besides the security binding annotations, the authorizer method must also be annotated with <tt>@Secures</tt>, to denote that the method is being used to secure that security binding type:
</p>



<pre class="wikiPreformatted brush: java; gutter: true;">@ApplicationScoped
public class Authorizer {
    @Secures
    @LoggedIn
    public boolean isLoggedIn(InvocationContext invocationContext, Identity identity) {
        return identity.isLoggedIn();
    }
}</pre>




<p class="wikiPara">
The parameters of the authorizer method are treated as injection points (except for parameters of type InvocationContext which may be used to inspect metadata pertaining to the method from which the security check is being invoked).  In the above example, we inject the Identity bean which represents the currently authenticated user - the Identity bean provides a method called isLoggedIn() that allows us to check if the current user is logged in.
</p>

<h1 class="wikiHeadline1" id="H-Step3ApplyTheAnnotationToYourMethods"><a href="/2014/07/07/securing-your-applications-with-picket-link-and-delta-spike#H-Step3ApplyTheAnnotationToYourMethods">Step 3: Apply the annotation to your methods</a></h1>

<p class="wikiPara">
By the time we reach this step all of the hard work has been already done.  The only remaining task is to apply the new security binding annotation to the methods and/or classes that you wish to secure.  Let’s start off with a really simple example:
</p>



<pre class="wikiPreformatted brush: java; gutter: true;">@RequestScoped
public class PostController {
    @LoggedIn
    public void getNewPosts() {
        // business logic here
    }
}</pre>




<p class="wikiPara">
In this code we’ve applied our <tt>@LoggedIn</tt> security binding annotation to the <tt>getNewPosts()</tt> method of a request-scoped bean called <tt>PostController</tt>.  When the user invokes this method, the security interceptor will intercept the method call and invoke the authorizer method to determine if the currently authenticated user is logged in.  If the authorizer method returns true then the method invocation will then proceed as normal, otherwise an <tt>AuthorizationException</tt> will be thrown.  If we would like to apply the same security restriction to all of the methods of a bean, we can put the annotation on the bean class instead:
</p>



<pre class="wikiPreformatted brush: java; gutter: true;">@LoggedIn
@RequestScoped
public class PostController {
    public void getNewPosts() {
        // business logic here
    }
}</pre>




<h1 class="wikiHeadline1" id="H-ACompleteExample"><a href="/2014/07/07/securing-your-applications-with-picket-link-and-delta-spike#H-ACompleteExample">A Complete Example</a></h1>

<p class="wikiPara">
You can find a complete example of using PicketLink with DeltaSpike in the following quickstart project:
</p>

<p class="wikiPara">
<a href="https://github.com/jboss-developer/jboss-picketlink-quickstarts/tree/master/picketlink-deltaspike-authorization" target="" class="regularLink">https://github.com/jboss-developer/jboss-picketlink-quickstarts/tree/master/picketlink-deltaspike-authorization</a>
</p>

<h1 class="wikiHeadline1" id="H-Summary"><a href="/2014/07/07/securing-your-applications-with-picket-link-and-delta-spike#H-Summary">Summary</a></h1>

<p class="wikiPara">
In this article we examined how we can get the most out of DeltaSpike’s security annotation feature by combining it with a powerful security framework such as PicketLink.  By following three simple steps we learned how to define a new security annotation, implement its business logic and then apply it to the methods and classes which we wish to protect.</p>
</div>

