---
title: "PicketLink 3.0 Alpha1 Released"
author: "Shane Bryzak"
blogger_name: "Shane"
creation_date: "03-03-2013"
original_tags: [Contexts and Dependency Injection,News,PicketLink,Seam]
tags: [CDI,PicketLink,Seam]

relative_url: /2013/03/03/picket-link-30-alpha-1-released
slug: picket-link-30-alpha-1-released
lace: http://in.relation.to/23969.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2013/03/03/picket-link-30-alpha-1-released
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
I'm very pleased to announce the first alpha release of PicketLink 3.0.  This release is the culmination of many months of effort by the JBoss Security team, with many contributions made from other project teams at JBoss and members of the community.  I'd like to thank everyone involved with this release, from those who participated in the many design discussions on the security mailing list over the last few months, to those who contributed code and have started integrating PicketLink into their own projects. 
</p>

<p class="wikiPara">
For those who don't know, PicketLink is a CDI-based application security framework for Java EE, much in the same spirit of Seam Security.  In fact, PicketLink 3.0 can be considered to be the spiritual successor to Seam Security, as it is more or less based on a similar core design albeit with a much more powerful and flexible identity model and feature set.
</p>

<p class="wikiPara">
Before I go any further, here's the links to the goodies:
</p>

<p class="wikiPara">
<a href="https://sourceforge.net/projects/jboss/files/PicketLink/3.0.0.Alpha1/" target="" class="regularLink">PicketLink 3.0.0.Alpha1 Distribution Zip</a>
</p>

<p class="wikiPara">
<a href="http://docs.jboss.org/picketlink/3/3.0.0.Alpha1/reference/html/" target="" class="regularLink">Reference Documentation</a> <i class="wikiEmphasis">* PLEASE NOTE that the reference documentation is still being written, so please be patient with us!</i>
</p>

<p class="wikiPara">
<a href="http://docs.jboss.org/picketlink/3/3.0.0.Alpha1/api/" target="" class="regularLink">API Documentation</a>
</p>

<p class="wikiPara">
<a href="https://github.com/picketlink/picketlink" target="" class="regularLink">Source Code on GitHub</a>
</p>

<p class="wikiPara">
<a href="http://issues.jboss.org/browse/PLINK" target="" class="regularLink">Report Issues</a>
</p>

<p class="wikiPara">
<a href="https://community.jboss.org/en/picketlink?view=discussions" target="" class="regularLink">PicketLink forums</a>
</p>

<p class="wikiPara">
<a href="https://lists.jboss.org/mailman/listinfo/security-dev" target="" class="regularLink">Mailing List</a>
</p>

<p class="wikiPara">
<a href="http://lists.jboss.org/pipermail/security-dev/" target="" class="regularLink">Mailing List Archives</a>
</p>

<p class="wikiPara">
For those of you that use Maven, here's the artifact id's to add to your <tt>pom.xml</tt>:
</p>


<pre class="wikiPreformatted">&lt;dependency&gt;
  &lt;groupId&gt;org.picketlink&lt;/groupId&gt;
  &lt;artifactId&gt;picketlink-core-api&lt;/artifactId&gt;
  &lt;version&gt;3.0.0.Alpha1&lt;/version&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
  &lt;groupId&gt;org.picketlink&lt;/groupId&gt;
  &lt;artifactId&gt;picketlink-core-impl&lt;/artifactId&gt;
  &lt;version&gt;3.0.0.Alpha1&lt;/version&gt;
  &lt;scope&gt;runtime&lt;/scope&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
  &lt;groupId&gt;org.picketlink&lt;/groupId&gt;
  &lt;artifactId&gt;picketlink-idm-api&lt;/artifactId&gt;
  &lt;version&gt;3.0.0.Alpha1&lt;/version&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
  &lt;groupId&gt;org.picketlink&lt;/groupId&gt;
  &lt;artifactId&gt;picketlink-idm-impl&lt;/artifactId&gt;
  &lt;version&gt;3.0.0.Alpha1&lt;/version&gt;
  &lt;scope&gt;runtime&lt;/scope&gt;
&lt;/dependency&gt;

&lt;!-- Optional database schema when using Identity Management with JPA based Identity Store --&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.picketlink&lt;/groupId&gt;
  &lt;artifactId&gt;picketlink-idm-schema&lt;/artifactId&gt;
  &lt;version&gt;3.0.0.Alpha1&lt;/version&gt;
  &lt;scope&gt;runtime&lt;/scope&gt;
&lt;/dependency&gt;</pre>




<p class="wikiPara">
Currently the Maven artifacts are located in the <a href="https://community.jboss.org/wiki/MavenRepository" target="" class="regularLink">JBoss Maven Repository</a>, however they are planned to be synchronized to Maven Central shortly.
</p>

<p class="wikiPara">
This initial Alpha release primarily concentrates on authentication, authorization and identity management features.  Let's take a look at a couple of these features in a little more detail, starting with simple programmatic authentication.
</p>

<h2 class="wikiHeadline2" id="H-ProgrammaticAuthentication"><a href="/2013/03/03/picket-link-30-alpha-1-released#H-ProgrammaticAuthentication">Programmatic authentication</a></h2>

<p class="wikiPara">
This simple form of authentication should be familiar to many Seam users.  To control the authentication process yourself, simply provide a bean in your application that implements the following <tt>Authenticator</tt> interface:
</p>



<pre class="wikiPreformatted">package org.picketlink.authentication;

import org.picketlink.idm.model.User;

public interface Authenticator {
    public enum AuthenticationStatus {
        SUCCESS, 
        FAILURE, 
        DEFERRED
    }

    void authenticate();

    void postAuthenticate();

    AuthenticationStatus getStatus();

    User getUser();
}</pre>




<p class="wikiPara">
To make things easier, we've provided an abstract base class that's already implemented everything for you except for the <tt>authenticate()</tt> method.  There's only two things you need to do yourself in the <tt>authenticate()</tt> method; 1) set the authentication status to reflect whether authentication was successful, and 2) set the <tt>User</tt> object if authentication was successful.  In this example, we're going to inject <tt>DefaultLoginCredentials</tt> (a simple holder bean provided by PicketLink which can be used for traditional username/password authentication) and allow authentication if the provided username is 'jsmith' and the password is '1234':
</p>



<pre class="wikiPreformatted">public class MyAuthenticator extends BaseAuthenticator {
    @Inject DefaultLoginCredentials credentials;

    public void authenticate() {
        if ("jsmith".equals(credentials.getUserId()) &amp;&amp; "1234".equals(credentials.getPassword())) {
          setUser(new SimpleUser(credentials.getUserId()));
          setStatus(AuthenticationStatus.SUCCESS);
        } else {
          setStatus(AuthenticationStatus.FAILURE);
        }
    }
}</pre>




<p class="wikiPara">
To actually perform the authentication, simply have your application set the username and password credentials on the <tt>DefaultLoginCredentials</tt> bean, then invoke the <tt>Identity.login()</tt> method - you can either do this directly from your view layer, or define a business method in your project that injects the Identity bean and then invokes its <tt>login()</tt> method.  Your <tt>Authenticator</tt> bean will be found automatically by the authentication process and its <tt>authenticate()</tt> method invoked to determine whether authentication was successful.  An example might look something like this:
</p>



<pre class="wikiPreformatted">public @RequestScoped class LoginAction {

  @Inject DefaultLoginCredentials credentials;
  @Inject Identity identity;
  
  public void login(String username, String password) {
    credentials.setUserId(username);
    credentials.setPassword(password);
    identity.login();
  }
}</pre>




<p class="wikiPara">
Once authenticated, the <a href="http://docs.jboss.org/picketlink/3/3.0.0.Alpha1/api/org/picketlink/Identity.html" target="" class="regularLink">Identity bean</a> (which by default is session-scoped) can be injected into your application's beans so that you can access the currently authenticated <tt>User</tt>.
</p>

<h2 class="wikiHeadline2" id="H-IdentityManagement"><a href="/2013/03/03/picket-link-30-alpha-1-released#H-IdentityManagement">Identity Management</a></h2>

<p class="wikiPara">
PicketLink's Identity Management (IDM) module provides a formal API for managing the Users, Roles and Groups of your application.  Support is provided out of the box for LDAP, Database (via JPA) or File-based identity stores, and an extensible SPI allows for the implementation of additional identity storage backends.  The IDM features provided by PicketLink are far too extensive to cover in a single blog post, so let's take a look at a simple example using the JPA identity store.  To make things easier we provide a default database schema, included in the <tt>picketlink-idm-schema</tt> jar file.  To make use of this schema, simply add the schema jar file to your project and then add a <tt>persistence-unit</tt> entry to your project's <tt>persistence.xml</tt> file, like so:
</p>



<pre class="wikiPreformatted">&lt;persistence-unit name="picketlink-default"
                      transaction-type="JTA"&gt;
    &lt;description&gt;PicketLink Persistence Unit&lt;/description&gt;
    &lt;provider&gt;org.hibernate.ejb.HibernatePersistence&lt;/provider&gt;
    &lt;jta-data-source&gt;java:jboss/datasources/ExampleDS&lt;/jta-data-source&gt;

    &lt;class&gt;org.picketlink.idm.jpa.schema.IdentityObject&lt;/class&gt;
    &lt;class&gt;org.picketlink.idm.jpa.schema.PartitionObject&lt;/class&gt;
    &lt;class&gt;org.picketlink.idm.jpa.schema.RelationshipObject&lt;/class&gt;
    &lt;class&gt;org.picketlink.idm.jpa.schema.RelationshipIdentityObject&lt;/class&gt;
    &lt;class&gt;org.picketlink.idm.jpa.schema.RelationshipObjectAttribute&lt;/class&gt;
    &lt;class&gt;org.picketlink.idm.jpa.schema.IdentityObjectAttribute&lt;/class&gt;
    &lt;class&gt;org.picketlink.idm.jpa.schema.CredentialObject&lt;/class&gt;
    &lt;class&gt;org.picketlink.idm.jpa.schema.CredentialObjectAttribute&lt;/class&gt;

    &lt;exclude-unlisted-classes&gt;false&lt;/exclude-unlisted-classes&gt;
    &lt;properties&gt;
        &lt;property name="hibernate.hbm2ddl.auto" value="create-drop" /&gt;
        &lt;property name="hibernate.show_sql" value="true" /&gt;
        &lt;property name="hibernate.format_sql" value="true" /&gt;
        &lt;property name="hibernate.transaction.flush_before_completion"
                  value="true" /&gt;
    &lt;/properties&gt;
&lt;/persistence-unit&gt;</pre>



<p class="wikiPara">
        
The one other thing you must provide is an <tt>EntityManager</tt> for PicketLink to use, we can do this by writing a CDI producer field - here's an example (make sure the <tt>unitName</tt> matches the one you've configured in <tt>persistence.xml</tt>):
</p>



<pre class="wikiPreformatted">public class Resources {
    @SuppressWarnings("unused")
    @Produces
    @PicketLink
    @PersistenceContext(unitName = "picketlink-default")
    private EntityManager picketLinkEntityManager;
}</pre>




<p class="wikiPara">
Once we've done that, we're ready to go!  No further configuration is necessary, PicketLink provides an IDM-based <tt>Authenticator</tt> implementation that is automatically configured if the appropriate entity classes are provided. 
</p>

<p class="wikiPara">
The first thing we might want to do is to create some default users for our application.  We can do this by providing a <tt>@Startup</tt> bean - here's an example in which we create a user called 'admin', to which we grant the 'administrator' application role:
</p>



<pre class="wikiPreformatted">@Singleton
@Startup
public class CreateDefaultUser {
    @Inject IdentityManager identityManager;

    @PostConstruct
    public void create() {
        User admin = new SimpleUser("admin");
        admin.setEmail("admin@acme.com");

        this.identityManager.add(admin);
        this.identityManager.updateCredential(admin, new Password("secret"));

        Role roleAdmin = new SimpleRole("administrator");
        this.identityManager.add(roleAdmin);

        identityManager.grantRole(admin, roleAdmin);
    }
}</pre>




<p class="wikiPara">
The <a href="http://docs.jboss.org/picketlink/3/3.0.0.Alpha1/api/org/picketlink/idm/IdentityManager.html" target="" class="regularLink">IdentityManager</a> bean is the gateway to all of PicketLink's IDM features.  It allows you to create, update and delete Users, Groups, Roles and their relationships, plus manage and validate user credentials and attributes.  It can be injected into any of your project's beans any time you wish to perform Identity Management related operations.
</p>



<pre class="wikiPreformatted">public class MyApplicationBean {

    @Inject IdentityManager identityManager;   

}</pre>




<p class="wikiPara">
To create a new User, Group or Role, you simply create a new instance of the object (PicketLink provides default implementations called <tt>SimpleUser</tt>, <tt>SimpleGroup</tt> and <tt>SimpleRole</tt>) and pass it to <tt>IdentityManager.add()</tt>:
</p>



<pre class="wikiPreformatted">  User bob = new SimpleUser("bob");
  identityManager.add(bob);
  
  Group managers = new SimpleGroup("managers");
  identityManager.add(managers);
  
  Role admin = new SimpleRole("admin");
  identityManager.add(admin);</pre>



<p class="wikiPara">
  
To update something, you can first look it up using the appropriate method (such as <tt>getUser()</tt>, <tt>getGroup()</tt>, etc), make your changes and then pass the object to the <tt>update()</tt> method:
</p>



<pre class="wikiPreformatted">  User bob = identityManager.getUser("bob");
  bob.setEmail("bob@acme.com");
  identityManager.update(bob);</pre>



<p class="wikiPara">
  
To remove something, you pass it to the <tt>remove()</tt> method:
</p>



<pre class="wikiPreformatted">  User bob = identityManager.getUser("bob");
  identityManager.remove(bob);</pre>



<p class="wikiPara">
  
Relationships are used to model typed groupings of two or more identities.  PicketLink provides a few built-in relationships, and provides support for custom user-defined relationships also.  The built-in relationship types are provided to address the most common identity use cases, and the <tt>IdentityManager</tt> interface declares a number of convenience methods for working with these built-in relationships.  Let's take a brief look at a few examples.
</p>

<p class="wikiPara">
Firstly, the <tt>Grant</tt> relationship is used to represent an application role.  This is a role that is typically granted to a user to give them some kind of application-wide privilege.  The <tt>IdentityManager.grantRole()</tt> method is used to grant an application role:
</p>



<pre class="wikiPreformatted">  // Grant user "bob" the "admin" role
  User bob = identityManager.getUser("bob");
  Role admin = identityManager.getRole("admin");
  identityManager.grantRole(bob, admin);</pre>



<p class="wikiPara">
  
To test whether a user has an application role we use the <tt>hasRole()</tt> method:
</p>



<pre class="wikiPreformatted">  User bob = identityManager.getUser("bob");
  Role admin = identityManager.getRole("admin");
  boolean bobIsAdmin = identityManager.hasRole(bob, admin);</pre>



<p class="wikiPara">
  
To revoke an application role, we use <tt>revokeRole()</tt>:
</p>



<pre class="wikiPreformatted">  User bob = identityManager.getUser("bob");
  Role admin = identityManager.getRole("admin");
  identityManager.revokeRole(bob, admin);</pre>



<p class="wikiPara">
  
Next, the <tt>GroupMembership</tt> relationship is used to represent a user's membership within a group.  The <tt>addToGroup()</tt> method is used to add a user to a particular group:
</p>



<pre class="wikiPreformatted">  // Add user "bob" to the "managers" group
  User bob = identityManager.getUser("bob");
  Group managers = identityManager.getGroup("managers");
  identityManager.addToGroup(bob, managers);</pre>



<p class="wikiPara">
  
To test whether a user is a member of a group, we use the <tt>isMember()</tt> method:
</p>



<pre class="wikiPreformatted">  User bob = identityManager.getUser("bob");
  Group managers = identityManager.getGroup("managers");
  boolean isBobAManager = identityManager.isMember(bob, managers);</pre>



<p class="wikiPara">
  
Lastly, to remove a member of a group we can use the <tt>removeFromGroup()</tt> method:
</p>



<pre class="wikiPreformatted">  User bob = identityManager.getUser("bob");
  Group managers = identityManager.getGroup("managers");
  identityManager.removeFromGroup(bob, managers);</pre>



<p class="wikiPara">
  
The last built-in relationship type is the group role.  This is used when we wish to grant a user a particular role for a group, but not make them a member of the group themselves.  To grant a group role, we use the <tt>grantGroupRole()</tt> method:
</p>



<pre class="wikiPreformatted">  // Make user "bob" an admin of the "managers" group
  User bob = identityManager.getUser("bob");
  Role admin = identityManager.getRole("admin");
  Group managers = identityManager.getGroup("managers");
  identityManager.grantGroupRole(bob, admin, managers);</pre>



<p class="wikiPara">
  
To test whether a user has a particular group role, we use the <tt>hasGroupRole()</tt> method:
</p>



<pre class="wikiPreformatted">  User bob = identityManager.getUser("bob");
  Role admin = identityManager.getRole("admin");
  Group managers = identityManager.getGroup("managers");
  boolean isBobManagersAdmin = identityManager.hasGroupRole(bob, admin, managers);</pre>



<p class="wikiPara">
  
Finally, to remove a group role we use the <tt>revokeGroupRole()</tt> method:
</p>



<pre class="wikiPreformatted">  User bob = identityManager.getUser("bob");
  Role admin = identityManager.getRole("admin");
  Group managers = identityManager.getGroup("managers");
  identityManager.revokeGroupRole(bob, admin, managers);</pre>




<h2 class="wikiHeadline2" id="H-WhatsNext"><a href="/2013/03/03/picket-link-30-alpha-1-released#H-WhatsNext">What's Next</a></h2>

<p class="wikiPara">
We're aiming to have a beta release ready by mid-March, for which we're planning to have more polished code, more unit tests, better documentation and hopefully an actual example and/or quickstart that you can play around with yourself.  For those adventurous enough to take the alpha release for a spin, we would love to hear some feedback from you about what you found easy, what you found hard and what we can do to make things better.  For future releases of PicketLink we'll be focusing on adding some really cool features, such as support for OAuth, OpenID, SAML, Rule-based permissions with Drools, a RESTFul API and much more.  You can also look forward to some more blog posts that delve further into some of the more complex PicketLink features such as ACL style permissions, identity and relationship queries, plus multi-domain support.  If you'd like to leave us some feedback or have questions, please comment below or on the PicketLink forums, or if you'd like to contribute to the development discussion please join the security-dev mailing list, or alternatively catch us on the #picketlink irc channel on <a href="http://freenode.net/" target="" class="regularLink">FreeNode</a>.  
</p>

<p class="wikiPara">
Thanks and enjoy!</p>
</div>

