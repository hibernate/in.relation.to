---
title: "From component model failure to layer fetishism"
author: "Emmanuel Bernard"
blogger_name: "Emmanuel"
creation_date: "28-11-2007"
original_tags: []
tags: []

relative_url: /2007/11/28/from-component-model-failure-to-layer-fetishism
slug: from-component-model-failure-to-layer-fetishism
lace: http://in.relation.to/3135.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2007/11/28/from-component-model-failure-to-layer-fetishism
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
Gavin <a href="http://in.relation.to/Bloggers/BusinessLogicInTemplates" target="" class="regularLink">pointed out</a> that he did not <q>get</q> the separation between business logic and UI.
Which leads to the question of why are we layering in the first place?
I have heard many many bad reasons to justify layering. Actually, this is one of my favorite questions when I give a training. It's always fun to see the people sweating over a justification.
</p>

<p class="wikiPara">
What are the problems layering is trying to solve:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> separation of concerns</li>
<li class="wikiUnorderedListItem"> easier maintainability</li>
<li class="wikiUnorderedListItem"> loose coupling</li>
<li class="wikiUnorderedListItem"> reusability</li>
<li class="wikiUnorderedListItem"> justifying yet another additional level of management in the organization</li>
</ul>

<p class="wikiPara">
So what could be the problems of such static horizontal layers:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> the distinction between them could be fuzzy and lead to endless hair splitting discussions at the cafeteria</li>
<li class="wikiUnorderedListItem"> they naturally force state conversion and state transfer across layers for the sake of isolation. State conversion and state transfer are hard to solve, slow and lead to duplication and maintainability nightmares: where did my loose coupling go?</li>
<li class="wikiUnorderedListItem"> they have no real purpose half the time but to please the God of Architecture, tens of thousands of empty and meaningless classes are written to fill up  layers implementing delegation patterns over delegation patterns.</li>
</ul>

<p class="wikiPara">
Horizontal (hence static) layering in the standard sense of it (presentation, service, component, dao) is a notion inherited of the dark days where:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> the component model was bloated and unusable</li>
<li class="wikiUnorderedListItem"> stateless applications were the golden goal because <q>it scales better</q>
</li>
</ul>

<p class="wikiPara">
We need a way to define dynamic reusable concerns, interactions between them, avoid unnecessary state copy and duplication, and find more natural boundaries between concerns. A component model could achieve that if it were shared by the presentation, the business and the data access layer technology with no blind butcher axed boundaries.
</p>

<p class="wikiPara">
Now, bare with me a second and imagine that you had at your disposal a <a href="http://in.relation.to/Bloggers/WebBeansSneakPeekPartIIntroducingWebBeans" target="" class="regularLink">lightweight component model</a>, <a href="/Bloggers/WebBeansSneakPeekPartIIInjectionBindingAnnotationsAndComponentTypes" target="" class="regularLink"> where components could depend on each other in a strongly and decoupled way</a>, <a href="http://in.relation.to/Bloggers/WebBeansSneakPeekPartVInterceptorsAndEvents" target="" class="regularLink">where components could interact with each other by sending events</a>, where components could hold state and <a href="http://in.relation.to/Bloggers/WebBeansSneakPeekPartIVScopesContextsAndResolverMethods" target="" class="regularLink">whose lifecycle would be handled automatically</a>.
</p>

<p class="wikiPara">
A component would describe and implement a business need 
</p>

<pre class="wikiPreformatted">@Component
public class Checkout {</pre>


<p class="wikiPara">
It would depend on other business components 
</p>

<pre class="wikiPreformatted">@Component @Asynchronous @PayByCheque 
public class ChequePaymentProcessor implements PaymentProcessor {</pre>


<p class="wikiPara">
describing the dependency and its requirements with natural adjectives in a loosed coupled and type safe way
</p>

<pre class="wikiPreformatted">    @In @Asynchronous @PayByCheque PaymentProcessor</pre>


<p class="wikiPara">
It could have declarative behavior
</p>

<pre class="wikiPreformatted">@Transactional @Component
public class Checkout { ... }</pre>


<p class="wikiPara">
It could notify other business components 
</p>

<pre class="wikiPreformatted">    @In @Notifier @New Event&lt;Order&gt; order;</pre>


<p class="wikiPara">
And other components could listen to those events in a decoupled way
</p>

<pre class="wikiPreformatted">@Component 
public class AuditAgent {
    public void onOrder(@Observes @New Order order) { ... }
}</pre>


<p class="wikiPara">
Oh, and finally it would be concise (check the previous examples :) )
</p>

<p class="wikiPara">
Of course some components could be more technical than business oriented, some could be more DAO-ish others more Service-ish. But the point is that this component model and the declarative loose coupled type safe way to describe interactions with other components is very flexible and adjusts to your needs. It fits your needs, you have to fit in it.
</p>

<p class="wikiPara">
So what do we have?
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> separation of concern: loose coopling and declarative interations and behaviors</li>
<li class="wikiUnorderedListItem"> easier maintainability: type safety and no state transfer</li>
<li class="wikiUnorderedListItem"> loose coupling: interface / implementation runtime and type safe binding</li>
<li class="wikiUnorderedListItem"> reusability: a component represents a use case, a story of your application</li>
<li class="wikiUnorderedListItem"> justifying yet another additional level of management in the organization: if you really insist, we can find a way</li>
</ul>

<p class="wikiPara">
<a href="http://jboss.org/products/seam" target="" class="regularLink">Seam</a> has paved the way of components describing a story shared across all the technologies in my system and Web Beans  will bring it the elegant type safe declarative touch of <a href="http://code.google.com/p/google-guice/" target="" class="regularLink">Guice</a>.</p>
</div>

