---
title: "Hibernate OGM 4.1.0.CR1 - stable mapping"
author: "Emmanuel Bernard"
blogger_name: "Emmanuel"
creation_date: "10-12-2014"
original_tags: [Hibernate,Hibernate OGM,News,Release]
tags: [Hibernate OGM,Release]

relative_url: /2014/12/10/hibernate-ogm-410-cr-1-stable-mapping
slug: hibernate-ogm-410-cr-1-stable-mapping
lace: http://in.relation.to/41065.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2014/12/10/hibernate-ogm-410-cr-1-stable-mapping
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
After a huge push, we are now one release away from our Final version.
So without further due, I present you Hibernate OGM 4.1.0.CR1.
To sum it up:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> stable mapping for each of the supported datastores (Infinispan, Ehcache, MongoDB, Neo4J)</li>
<li class="wikiUnorderedListItem"> new and better one cache per entity structure for key/value stores</li>
<li class="wikiUnorderedListItem"> improvement in Neo4J and MongoDB around embedded objects and composite ids</li>
<li class="wikiUnorderedListItem"> better documentation</li>
</ul>

<p class="wikiPara">
Our goal for Hibernate OGM 4.1 is to offer a good Object Mapper for each of the primary datastores we target.
Go test it before the final and give us feedback!
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> <a href="http://sourceforge.net/projects/hibernate/files/hibernate-ogm/4.1.0.CR1/" target="" class="regularLink">zip release bundle</a>
</li>
<li class="wikiUnorderedListItem"> <a href="https://repository.jboss.org/nexus/content/groups/public/org/hibernate/ogm/" target="" class="regularLink">Maven repository server</a>
</li>
<li class="wikiUnorderedListItem"> <a href="http://docs.jboss.org/hibernate/ogm/4.1/reference/en-US/html_single/#ogm-gettingstarted" target="" class="regularLink">getting started guide</a> and <a href="http://docs.jboss.org/hibernate/ogm/4.1/reference/en-US/html_single/" target="" class="regularLink">reference documentation</a>
</li>
<li class="wikiUnorderedListItem"> <a href="https://forum.hibernate.org/viewforum.php?f=31" target="" class="regularLink">user forum</a>
</li>
</ul>

<h2 class="wikiHeadline2" id="H-MappingStabilityAndDocumentation"><a href="/2014/12/10/hibernate-ogm-410-cr-1-stable-mapping#H-MappingStabilityAndDocumentation">Mapping stability and documentation</a></h2>

<p class="wikiPara">
This CR release signals the stable version of how we persist each data structure on the various datastores.
We strive to offer a mapping that is natural to each individual datastore.
We made some final improvements and are confident we can support this version.
</p>

<p class="wikiPara">
For each datastore, we documented how each JPA mapping is persisted
(entities, star-to-one, star-to-many, embedded id, etc.).
It makes for a tree-killer documentation but shows what is the truth for each mapping.
</p>

<p class="wikiPara">
We took the opportunity to improve the documentation even further and plan to finish that work for the final version.
</p>

<h2 class="wikiHeadline2" id="H-AdditionalKeyvalueCacheStructure"><a href="/2014/12/10/hibernate-ogm-410-cr-1-stable-mapping#H-AdditionalKeyvalueCacheStructure">Additional key/value cache structure</a></h2>

<p class="wikiPara">
Our tests have showed that storing each entity type and association in a dedicated cache
is actually more efficient than sharing the same cache for all entities.
Since we also think it is a more natural mapping, we now offer this option and make it the default.
</p>

<p class="wikiPara">
A <tt>User</tt> and an <tt>Address</tt> entities would lead to the following caches:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> <tt>User</tt>: contains the users</li>
<li class="wikiUnorderedListItem"> <tt>Address</tt>: contains the address</li>
<li class="wikiUnorderedListItem"> <tt>associations_User_Address</tt>: contains the navigation from a user to its list of addresses</li>
</ul>

<p class="wikiPara">
An interesting side effect is that it makes the keys smaller in size and faster to compare.
Both Infinispan and Ehcache are benefiting from this.
</p>

<h2 class="wikiHeadline2" id="H-ImprovementsAroundEmbeddedObjectsEmbeddedIdsAndProperties"><a href="/2014/12/10/hibernate-ogm-410-cr-1-stable-mapping#H-ImprovementsAroundEmbeddedObjectsEmbeddedIdsAndProperties">Improvements around embedded objects, embedded ids and properties</a></h2>

<p class="wikiPara">
In Neo4J, (non id) embedded objects are now represented as individual nodes.
It is more in line with the connection behavior of graph databases.
</p>

<p class="wikiPara">
In MongoDB, embedded id foreign keys have been improved and are now represented as nested documents
like embedded ids were already.
We did not hear complains about this one, so we think you guys don't use composite ids with MongoDB.
That's good, keep doing that :)
</p>

<p class="wikiPara">
The <tt>null</tt> properties are no longer stored in any of the data stores.
While it might make some queries involving null values a bit harder,
it is the more natural mapping for the datastores.
</p>

<h2 class="wikiHeadline2" id="H-GoGoGo"><a href="/2014/12/10/hibernate-ogm-410-cr-1-stable-mapping#H-GoGoGo">Go, go, go</a></h2>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> <a href="http://sourceforge.net/projects/hibernate/files/hibernate-ogm/4.1.0.CR1/" target="" class="regularLink">zip release bundle</a>
</li>
<li class="wikiUnorderedListItem"> <a href="https://repository.jboss.org/nexus/content/groups/public/org/hibernate/ogm/" target="" class="regularLink">Maven repository server</a>
</li>
<li class="wikiUnorderedListItem"> <a href="http://docs.jboss.org/hibernate/ogm/4.1/reference/en-US/html_single/#ogm-gettingstarted" target="" class="regularLink">getting started guide</a> and <a href="http://docs.jboss.org/hibernate/ogm/4.1/reference/en-US/html_single/" target="" class="regularLink">reference documentation</a>
</li>
<li class="wikiUnorderedListItem"> <a href="https://forum.hibernate.org/viewforum.php?f=31" target="" class="regularLink">user forum</a>
</li>
</ul>
</div>

