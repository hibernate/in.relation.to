---
title: "Full Text search for Hibernate goes final"
author: "Emmanuel Bernard"
blogger_name: "Emmanuel"
creation_date: "25-09-2007"
original_tags: []
tags: [Hibernate Search]

relative_url: /2007/09/25/full-text-search-for-hibernate-goes-final
slug: full-text-search-for-hibernate-goes-final
lace: http://in.relation.to/2471.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2007/09/25/full-text-search-for-hibernate-goes-final
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
The Hibernate Search team is pleased to announce version 3.0 final. <a href="http://search.hibernate.org" target="" class="regularLink">Hibernate Search</a> provides full text search (google-like) capabilities to Hibernate domain model objects. Based on Apache Lucene, Hibernate Search focuses on ease of use and ease of configuration, lowering the barrier to entry of Lucene and its integration with a domain model.
</p>

<p class="wikiPara">
Key features include:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem">Transparent index synchronization: This feature eliminates the need to manually update the index on data change. Events generated by Hibernate Core will trigger the update transparently for the application. Index updates are scoped per transaction to match the application transactional behavior.</li>
<li class="wikiUnorderedListItem">Seamless integration with the Hibernate and Java Persistence query model: Hibernate Search embraces both the Hibernate and Java Persistence semantic and APIs. As a result, switching from a Hibernate Query Language (HQL) query to a full text query requires only minimal changes to the application. </li>
<li class="wikiUnorderedListItem">Out-of-the-box asynchronous clustering mode: Handles clustered applications, this out of the box mode also handles gracefully indexing load peaks, avoiding potential contentions on online systems.</li>
</ul>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem">Product extensibility: Developers can extend Hibernate Search with a series of extension points for deep index interaction customization that helps edge case applications meet their performance and architectural requirements and constraints.</li>
</ul>

<p class="wikiPara">
Some additional noticeable features:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem">query filter (similar to the Hibernate Filter feature): useful for security, temporal data, category filtering etc transparently cached for the user</li>
<li class="wikiUnorderedListItem">join-style query: ability to query based on associated entities</li>
<li class="wikiUnorderedListItem">query projection: avoid database roundtrips if the relevant data is also stored in the index</li>
<li class="wikiUnorderedListItem">access to the result score, boost, total number of results and other Lucene metadata</li>
<li class="wikiUnorderedListItem">ability to manually (re)index and purge data form the index</li>
<li class="wikiUnorderedListItem">index sharding: sharing the same index for several classes or splitting (sharding) a given class into several indexes. It is useful for performance when the index becomes /very/ big.</li>
<li class="wikiUnorderedListItem">transparently optimized access to Lucene both for index update and queries</li>
<li class="wikiUnorderedListItem">native access to the Lucene resources</li>
</ul>

<p class="wikiPara">
Many thanks to the community for having over the past year shown support, enthusiasm and helped the product maturation both from a feature set and stability point of view. You can <a href="http://hibernate.org/6.html" target="" class="regularLink">download</a> Hibernate Search or walk through the <a href="http://www.hibernate.org/hib_docs/search/reference/en/html_single" target="" class="regularLink">documentation and the getting started section</a>. Happy searching :)</p>
</div>

