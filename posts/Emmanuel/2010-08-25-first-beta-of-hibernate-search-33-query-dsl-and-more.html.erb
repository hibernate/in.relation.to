---
title: "First Beta of Hibernate Search 3.3: query DSL and more"
author: "Emmanuel Bernard"
blogger_name: "Emmanuel"
creation_date: "25-08-2010"
original_tags: [Hibernate,Hibernate Search,Lucene]
tags: [Hibernate Search]

relative_url: /2010/08/25/first-beta-of-hibernate-search-33-query-dsl-and-more
slug: first-beta-of-hibernate-search-33-query-dsl-and-more
lace: http://in.relation.to/16718.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2010/08/25/first-beta-of-hibernate-search-33-query-dsl-and-more
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
The first beta of Hibernate Search 3.3 is out. We had several goals in mind. 
</p>

<p class="wikiPara">
One of them is to morph the project into a more independent piece of software for Infinispan. We have a lot of exciting developments around Infinispan, search and persistence. But that's the subject of another post. On to the meat now.
</p>

<h2 class="wikiHeadline2" id="H-HibernateSearchQueryDSL"><a href="/2010/08/25/first-beta-of-hibernate-search-33-query-dsl-and-more#H-HibernateSearchQueryDSL">Hibernate Search query DSL</a></h2>

<p class="wikiPara">
Probably the most visible feature is the new Hibernate Search query DSL.
</p>

<p class="wikiPara">
Writing Lucene queries is not easy, either you use the query parser limiting yourself to fairly simple queries and manipulating strings or you use the Lucene programmatic query API which is quite verbose and contains a myriad of settings and alternatives.
</p>

<p class="wikiPara">
On top of that, you need to make sure you apply the same magic at query and indexing time: if you don't the index key you look for will not match and you will return no result. This is particularly true in an object world where two transformations occur:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> the object is transformed in a string via the Hibernate Search <tt>FieldBridge</tt>
</li>
<li class="wikiUnorderedListItem"> the string is transformed into terms via the analyzer</li>
</ul>

<p class="wikiPara">
Each property can have different combinations of field bridge and analyzer.
</p>

<p class="wikiPara">
Hibernate Search solves these problems by transparently applying the appropriate <tt>FieldBridge</tt> and analyzer of a given researched property. It's also built around a fluent API to make queries very easy to write and more importantly easier to read.
</p>

<pre class="wikiPreformatted">QueryBuilder mythQB = searchFactory.buildQueryBuilder().forEntity( Myth.class ).get();

//look for popular modern myths that are not urban
Date twentiethCentury = ...;
Query luceneQuery = mythQB
    .bool()
      .must( mythQB.keyword().onField("description_stem").matching("urban").createQuery() )
        .not()
      .must( mythQB
        .range()
        .onField("starred")
        .from(3).excludeLimit()
        .to(5)
        .createQuery() )
      .must( mythQB
        .range()
        .onField("creationDate")
        .above(twentiethCentury)
        .createQuery() )
    .createQuery();
</pre>

<p class="wikiPara">
This example shows many things:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> the fluent API in action (you've got to admit that it's more readable than a raw Lucene query)</li>
<li class="wikiUnorderedListItem"> you pass objects and not string representations (<tt>Date</tt> and number in this case)</li>
<li class="wikiUnorderedListItem"> <tt>description_stem</tt> uses a stemming analyzer (eg. transforming loving in its root word love): no need to apply it yourself before passing the matching string, the query DSL does that for you. </li>
</ul>

<p class="wikiPara">
I will blog in more details about Hibernate Seach query DSL shortly.
</p>

<h2 class="wikiHeadline2" id="H-HibernateCore36"><a href="/2010/08/25/first-beta-of-hibernate-search-33-query-dsl-and-more#H-HibernateCore36">Hibernate Core 3.6</a></h2>

<p class="wikiPara">
This release is compatible with Hibernate Core 3.6 (in Beta3 at the time of writing). A side effect is that manual configuration of the event listeners is no longer necessary even when only using hbm.xml files.
</p>

<h2 class="wikiHeadline2" id="H-Statistics"><a href="/2010/08/25/first-beta-of-hibernate-search-33-query-dsl-and-more#H-Statistics">Statistics</a></h2>

<p class="wikiPara">
Hardy has been busy designing a statistics API (available from the SearchFactory). It gives you a lot of information about Hibernate Search:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> average and max time for a Lucene query execution</li>
<li class="wikiUnorderedListItem"> average and max time for the object loading process following a Lucene query execution</li>
<li class="wikiUnorderedListItem"> slowest query</li>
<li class="wikiUnorderedListItem"> number of entities indexed of a given type</li>
<li class="wikiUnorderedListItem"> and many more</li>
</ul>

<p class="wikiPara">
Again, a more detailed blog post should come soon.
</p>

<h2 class="wikiHeadline2" id="H-IntegrationTestsForJTAAndSpring"><a href="/2010/08/25/first-beta-of-hibernate-search-33-query-dsl-and-more#H-IntegrationTestsForJTAAndSpring">Integration tests for JTA and Spring</a></h2>

<p class="wikiPara">
We have added integration tests for both Spring Framework and JTA. On the JTA side, we are testing against Bitronix and JBoss Transactions standalone.
</p>

<h2 class="wikiHeadline2" id="H-MutableSearchFactory"><a href="/2010/08/25/first-beta-of-hibernate-search-33-query-dsl-and-more#H-MutableSearchFactory">Mutable SearchFactory</a></h2>

<p class="wikiPara">
While not a public feature yet, Hibernate Search now has the ability to add new entity types on the fly. 
</p>

<p class="wikiPara">
From the ground up, we have made sure that Hibernate Search is extremely fast and efficient at runtime. To achieve that we have been using an immutable design for the SearchFactory: we pre-compute and store metadata to make indexing and querying efficient. and that forced us to know the list of indexed entity types ahead of time.
</p>

<p class="wikiPara">
Infinispan, however, does not know necessarily knows the list of entities ahead of time. The new design uses a copy-on-change approach to keep the benefits of the immutable model while offering the ability to add new entities.
As a user, you won't notice it but as a framework using Hibernate Search, you will :)
</p>

<h2 class="wikiHeadline2" id="H-BugFixes"><a href="/2010/08/25/first-beta-of-hibernate-search-33-query-dsl-and-more#H-BugFixes">Bug fixes</a></h2>
<p class="wikiPara">
Of course we also fix bugs :)
</p>

<p class="wikiPara">
Check out the new release on JBoss.org's Maven <a href="http://repository.jboss.org/nexus/content/groups/public-jboss/" target="" class="regularLink">repository</a> or <a href="http://www.hibernate.org/subprojects/search/download" target="" class="regularLink">download the distribution</a>. You can also read the documentation <a href="http://docs.jboss.org/hibernate/search/3.3/reference/en-US/" target="" class="regularLink">here</a>.
Be aware that this version breaks a couple of SPIs, make sure to check the <a href="http://community.jboss.org/wiki/HibernateSearchMigrationGuide" target="" class="regularLink">migration guide</a>.</p>
</div>

