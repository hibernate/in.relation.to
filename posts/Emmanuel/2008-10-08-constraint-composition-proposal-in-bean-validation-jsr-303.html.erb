---
title: "Constraint composition proposal in Bean Validation (JSR 303)"
author: "Emmanuel Bernard"
blogger_name: "Emmanuel"
creation_date: "08-10-2008"
original_tags: [Bean Validation]
tags: [Bean Validation]

relative_url: /2008/10/08/constraint-composition-proposal-in-bean-validation-jsr-303
slug: constraint-composition-proposal-in-bean-validation-jsr-303
lace: http://in.relation.to/9544.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2008/10/08/constraint-composition-proposal-in-bean-validation-jsr-303
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
Until now, it was not possible or easy to reuse constraints to make more complex constraints.
</p>

<p class="wikiPara">
The new specification draft introduces the notion of constraint composition. Composition is useful for three main things:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> reuse more primitive constraints to build new constraints and avoid duplication</li>
<li class="wikiUnorderedListItem"> define fine grained error reports for a given constraint</li>
<li class="wikiUnorderedListItem"> expose how a constraint is composed and describe its primitive blocks</li>
</ul>


<p class="wikiPara">
The last point is particularly interesting. Constraints implementations are black boxes answering yes or no to the question: <q>Is this value valid or not?</q>. 
When constraints need to be applied outside the Java world or applied on a different metadata model, black boxes do no good. There is no way to know that <tt>@OrderNumber</tt> actually apply some restriction on the length of the number as well as apply some CRC verification.
</p>

<p class="wikiPara">
Composition helps to solve the problem by giving access to the primitive constituencies of a constraint. Let's first see how to define a composed constraint.
</p>

<h2 class="wikiHeadline2" id="H-DefiningAComposedConstraint"><a href="/2008/10/08/constraint-composition-proposal-in-bean-validation-jsr-303#H-DefiningAComposedConstraint">Defining a composed constraint</a></h2>

<p class="wikiPara">
To define the list of constraints composing a main constraint, simply annotate the main constraint annotation with the composing constraint annotations.
</p>

<pre class="wikiPreformatted">@Numerical
@Size(min=5, max=5)
@ConstraintValidator(FrenchZipcodeValidator.class)
@Documented
@Target({ANNOTATION_TYPE, METHOD, FIELD})
@Retention(RUNTIME)
public @interface FrenchZipCode {
    String message() default "Wrong zipcode";
    String[] groups() default {};
}
</pre>


<p class="wikiPara">
When <tt>@FrenchZipCode</tt> is placed on a property, its value is validated against <tt>@Numerical</tt>, <tt>@Size(min=5, max=5)</tt> and the constraint implementation <tt>FrenchZipcodeValidator</tt>: all the composing constraints are validated as well as the logic of the main constraint. Note that a composing constraint can itself be composed of constraints. 
</p>

<p class="wikiPara">
Each failing constraint will generate an individual error report which is useful when you want do display fine grained reports to your user. But this might be quite confusing and a single error report is more appropriate in some situations. You can force Bean Validation to raise a single error report (the composed constraint error report) if any of its composing constraint fails by using the <tt>@ReportAsSingleInvalidConstraint</tt> annotation.
</p>

<pre class="wikiPreformatted">@Numerical
@Size(min=5, max=5)
@ReportAsSingleInvalidConstraint
@ConstraintValidator(FrenchZipcodeValidator.class)
@Documented
@Target({ANNOTATION_TYPE, METHOD, FIELD})
@Retention(RUNTIME)
public @interface FrenchZipCode {
    String message() default "Wrong zipcode";
    String[] groups() default {};
}
</pre>

<p class="wikiPara">
In the past two examples, none of the composing annotation parameters can be adjusted at declaration time. This is fine if the zip code is always of size 5. But what happens if the size can be adjusted depending on the property? The spec offers a way is a way to <q>override</q> a parameter from the composing annotation based on a parameter from the composied annotation using the <tt>@OverridesParameter</tt> annotation.
</p>

<pre class="wikiPreformatted">@Numerical
@Size //arbitrary parameter values
@ConstraintValidator(FrenchZipcodeValidator.class)
@Documented
@Target({ANNOTATION_TYPE, METHOD, FIELD})
@Retention(RUNTIME)
public @interface FrenchZipCode {
    String message() default "Wrong zipcode";
    String[] groups() default {};
    
    @OverridesParameters( {
        @OverridesParameter(constraint=Size.class, parameter="min")
        @OverridesParameter(constraint=Size.class, parameter="max") } )
    int size() default 5;

    @OverridesParameter(constraint=Size.class, parameter="message")
    String sizeMessage() default "{error.zipcode.size}";

    @OverridesParameter(constraint=Numerical.class, parameter="message")
    String numericalMessage() default "{error.zipcode.numerical}";
}
</pre>

<p class="wikiPara">
The following declaration
</p>

<pre class="wikiPreformatted">@FrenchZipcode(size=9, sizeMessage="Zipcode should be of size {value}")</pre>


<p class="wikiPara">
is equivalent to the following definition / declaration combination
</p>

<pre class="wikiPreformatted">@Numerical
@Size(min=9, max=9, message="Zipcode should be of size {value}")
@ConstraintValidator(FrenchZipcodeValidator.class)
@Documented
@Target({ANNOTATION_TYPE, METHOD, FIELD})
@Retention(RUNTIME)
public @interface FrenchZipCode {
    String message() default "Wrong zipcode";
    String[] groups() default {};
}
</pre>


<p class="wikiPara">
Let's now see how a tool would use this extra information.
</p>

<h2 class="wikiHeadline2" id="H-ExploringComposedConstraintsWithTheMetadataAPI"><a href="/2008/10/08/constraint-composition-proposal-in-bean-validation-jsr-303#H-ExploringComposedConstraintsWithTheMetadataAPI">Exploring composed constraints with the metadata API</a></h2>

<p class="wikiPara">
Using the metadata API, you can explore the list of constraints on a given object or property. Each constraint is described by a <tt>ConstraintDescriptor</tt>. It lists all the composing constraints and provides a <tt>ConstraintDescriptor</tt> object for each. The <tt>ConstraintDescriptor</tt> honors overridden parameters (ie using <tt>@OverridesParameter</tt>): the annotation and the parameter values returned contain the overridden value. 
</p>

<pre class="wikiPreformatted">ElementDescriptor ed = addressValidator.getConstraintsForProperty("zipcode");
for ( processConstraintDescriptor cd : ed.getConstraintDescriptors() ) {
	processConstraintDescriptor(cd); //check all constraints on zip code
}

public void processConstraintDescriptor(processConstraintDescriptor cd) {
	//Size.class is understood by the tool
	if ( cd.getAnnotation().getAnnotationType().equals( Size.class ) ) {
		Size m = (Size) cd.getAnnotation();
		column.setLength( m.max() );  //read and use the metadata
	}
	for (ConstraintDescriptor composingCd : cd.getComposingConstraints() ) {
		processConstraintDescriptor(cd); //check composing constraints recursively
	}
}
</pre>


<p class="wikiPara">
When using the following declaration
</p>

<pre class="wikiPreformatted">@FrenchZipCode(size=10) public String zipCode;</pre>


<p class="wikiPara">
the tool will set the zipCode column length to 10.
</p>

<p class="wikiPara">
While the tool does not know what <tt>@FrenchZipCode</tt> and <tt>@Numerical</tt> means, it knows how to make use of <tt>@Max</tt>. Javascript generation libraries or persistence tools typically understand a core subset of constraints. If a complex constraint is composed of one or several of these core subset constraints, it can be partially understood and processed by Java Persistence for example.
</p>

<p class="wikiPara">
This is one of the reasons why it is strongly recommended to build complex constraints on top of more primitive ones. The Bean Validation specification will come with a core of constraints tools will be able to rely upon.
</p>

<p class="wikiPara">
Let us know what you think in our <a href="http://forum.hibernate.org/viewforum.php?f=26" target="" class="regularLink">forum</a>.</p>
</div>

