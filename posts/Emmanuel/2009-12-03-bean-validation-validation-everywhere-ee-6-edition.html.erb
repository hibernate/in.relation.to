---
title: "Bean Validation: validation everywhere EE 6 edition"
author: "Emmanuel Bernard"
blogger_name: "Emmanuel"
creation_date: "03-12-2009"
original_tags: [Bean Validation,Hibernate Validator,JBoss AS 6,JPA 2,JSF 2,Java EE 6]
tags: [Bean Validation,Hibernate Validator,Java EE,JBoss AS,JPA,JSF]

relative_url: /2009/12/03/bean-validation-validation-everywhere-ee-6-edition
slug: bean-validation-validation-everywhere-ee-6-edition
lace: http://in.relation.to/13317.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2009/12/03/bean-validation-validation-everywhere-ee-6-edition
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
Now that Bean Validation is officially part of Java EE 6 and that Java EE6 is officially voted <a href="http://jcp.org/en/jsr/results?id=5006" target="" class="regularLink">YES</a>, let's see how Bean Validation integrates with the rest of the eco system.
</p>

<h1 class="wikiHeadline1" id="H-WhatIsBeanValidation"><a href="/2009/12/03/bean-validation-validation-everywhere-ee-6-edition#H-WhatIsBeanValidation">What is Bean Validation</a></h1>

<p class="wikiPara">
It's goal is to let application developers declare their data constraints once by annotating their model and make sure these constraints are validated by the different layers of the application in a consistent manner. Without Bean Validation, people have to write their validation rules in their favorite presentation framework, then in their business layer, then in their persistent layer, to some degree in the database schema and keep all of them synchronized. 
</p>

<p class="wikiPara">
Here is how this centralized constraint declaration looks like:
</p>

<pre class="wikiPreformatted brush: java; gutter: true;">class User {
  @NotEmpty @Size(max=100)
  String getLogin() { ... }

  @NotEmpty @Size(max=100)
  String getFirstname() { ... }
  
  @Email @Size(max=250)
  String getEmail() { ... }
  ...
}</pre>


<p class="wikiPara">
There are many more features like constraint composition, grouping but let's focus on how Bean Validation integrates with the EE 6 stack.
</p>

<h1 class="wikiHeadline1" id="H-SoWhatDoIHaveToDoToMakeItWorkInJavaEE6"><a href="/2009/12/03/bean-validation-validation-everywhere-ee-6-edition#H-SoWhatDoIHaveToDoToMakeItWorkInJavaEE6">So what do I have to do to make it work in Java EE 6</a></h1>

<p class="wikiPara">
The short answer is nothing. Not even an XML configuration trick.
</p>

<p class="wikiPara">
Simply add your constraints on your domain model and the platform does the rest for you.
</p>

<h2 class="wikiHeadline2" id="H-JSFAndHowToExposeConstraintViolationsToTheUser"><a href="/2009/12/03/bean-validation-validation-everywhere-ee-6-edition#H-JSFAndHowToExposeConstraintViolationsToTheUser">JSF and how to expose constraint violations to the user</a></h2>

<p class="wikiPara">
In JSF, you bind form inputs to properties of your domain model. JSF 2 and Bean Validation smartly figure out which property you are binding to and execute the constraints associated to it.
</p>

<pre class="wikiPreformatted brush: xml; gutter: true;">&lt;h:form id="register"&gt;
    &lt;div style="color: red"&gt;
        &lt;h:messages id="messages" globalOnly="true"/&gt;
    &lt;/div&gt;

    &lt;div&gt;
        Login:
        &lt;h:inputText id="login" value="#{identifier.user.login}"/&gt;
        &lt;h:message style="color: red" for="login"/&gt;
        &lt;br/&gt;
        Password:
        &lt;h:inputSecret id="password" value="#{identifier.user.password}"/&gt;
        &lt;h:message style="color: red" for="password"/&gt;
        &lt;br/&gt;
        Firstname:
        &lt;h:inputText id="firstname" value="#{identifier.user.firstname}"/&gt;
        &lt;h:message style="color: red" for="firstname"/&gt;
        &lt;br/&gt;
        Email:
        &lt;h:inputText id="email" value="#{identifier.user.email}"/&gt;
        &lt;h:message style="color: red" for="email"/&gt;
        &lt;br/&gt;

        &lt;h:commandButton id="Login" value="Login" action="#{identifier.register}"/&gt;
        &lt;br/&gt;
        &lt;h:button id="cancel" value="Cancel" outcome="/home.xhtml"/&gt;
    &lt;/div&gt;
&lt;/h:form&gt;</pre>


<p class="wikiPara">
If the email, for example is malformed and the first name is left empty, Bean Validation will return the constraint violations to JSF 2 that will expose them to the user in a localized error message.
By default, it just works and you don't even have to think about it.
</p>

<p class="wikiPara">
For more advanced use cases, like disabling constraint validation for one or several fields or using a specific group or set of groups instead of the default one, you can use the <tt>&lt;f:validateBean/&gt;</tt> tag (check line 8 and 20 in the following example).
</p>

<pre class="wikiPreformatted brush: xml; gutter: true;">&lt;h:form id="register"&gt;
    &lt;div style="color: red"&gt;
        &lt;h:messages id="messages" globalOnly="true"/&gt;
    &lt;/div&gt;

    &lt;div&gt;
        &lt;!-- ***** use a specific group ***** --&gt;
        &lt;f:validateBean validationGroups="${identifier.validationGroups}"&gt;
            Login:
            &lt;h:inputText id="login" value="#{identifier.user.login}"/&gt;
            &lt;h:message style="color: red" for="login"/&gt;
            &lt;br/&gt;
            Password:
            &lt;h:inputSecret id="password" value="#{identifier.user.password}"/&gt;
            &lt;h:message style="color: red" for="password"/&gt;
            &lt;br/&gt;
            Firstname:
            &lt;!-- ***** disable validation for firstname ***** --&gt;
            &lt;h:inputText id="firstname" value="#{identifier.user.firstname}"&gt;
                &lt;f:validateBean disabled="true"/&gt;
            &lt;/h:inputText&gt;
            &lt;h:message style="color: red" for="firstname"/&gt;
            &lt;br/&gt;
            Email:
            &lt;h:inputText id="email" value="#{identifier.user.email}"/&gt;
            &lt;h:message style="color: red" for="email"/&gt;
            &lt;br/&gt;

            &lt;h:commandButton id="Login" value="Login" action="#{identifier.register}"/&gt;
            &lt;br/&gt;
            &lt;h:button id="cancel" value="Cancel" outcome="/home.xhtml"/&gt;
        &lt;/f:validateBean&gt;
    &lt;/div&gt;
&lt;/h:form&gt;</pre>



<p class="wikiPara">
In the future, we want to work with RichFaces so that the constraints declared on the object model are validated in the JSF components on the client side. This is something we had prototyped already and that Pete, Dan and I proposed to the JSF 2 expert group initially but we had to scale down our ambitions :) Expect some innovations from us in this area.
</p>

<p class="wikiPara">
But not all your data comes from the presentation layer.
</p>

<h2 class="wikiHeadline2" id="H-JPA2LastLineOfDefense"><a href="/2009/12/03/bean-validation-validation-everywhere-ee-6-edition#H-JPA2LastLineOfDefense">JPA 2: last line of defense</a></h2>

<p class="wikiPara">
Again, by default, your JPA 2 provider runs Bean Validation on the entities you are about to persist or update. You are then guaranteed to not put invalid data in your database and thus increasing the quality of your data overall. Oh, and these are the same constraints you would have validated in JSF 2.0.
</p>

<p class="wikiPara">
You can disable validation in JPA 2 using the <tt>validation-mode</tt> element in <tt>persistence.xml</tt> or the <tt>javax.persistence.validation.mode</tt> property and set them to <tt>none</tt>. More interestingly, you can chose which group will be validated upon entity persist, update and even delete operations. By default, the <tt>Default</tt> group is validated when you persist or update entities. Use any one of these properties to adjust that.
</p>

<pre class="wikiPreformatted brush: xml; gutter: true;">&lt;property name="javax.persistence.validation.group.pre-persist" 
        value"javax.validation.groups.Default, com.acme.model.Structural"/&gt;
&lt;property name="javax.persistence.validation.group.pre-update" 
        value"javax.validation.groups.Default, com.acme.model.Structural"/&gt;

&lt;property name="javax.persistence.validation.group.pre-delete" 
        value"com.acme.model.SafeDestruct"/&gt;</pre>


<p class="wikiPara">
Hibernate Core and Hibernate Validator go a bit beyond that and propagate the constraints to the database schema (provided that you let Hibernate Core generate or update the schema for you). Simply set the <tt>hibernate.hbm2ddl.auto</tt> property to <tt>create</tt>, <tt>update</tt> or <tt>create-drop</tt>.
</p>


<h2 class="wikiHeadline2" id="H-HowAboutMyServiceLayer"><a href="/2009/12/03/bean-validation-validation-everywhere-ee-6-edition#H-HowAboutMyServiceLayer">How about my service layer</a></h2>

<p class="wikiPara">
You can inject a <tt>Validator</tt> or <tt>ValidatorFactory</tt> instance in any injectable POJO in Java EE 6.
</p>

<pre class="wikiPreformatted brush: java; gutter: true;">class SalesService {
  @Inject Validator validator;
  @Inject @Current User user;

  public boolean canBuyInOneClick() {
    return validator.validate(user, BuyInOneClick.class).size() == 0;
  }</pre>


<h1 class="wikiHeadline1" id="H-WhereCanITryIt"><a href="/2009/12/03/bean-validation-validation-everywhere-ee-6-edition#H-WhereCanITryIt">Where can I try it?</a></h1>

<p class="wikiPara">
All of this is now available in <a href="/Bloggers/IntroducingJBossAS600M1" target="" class="regularLink">JBoss AS 6 M1</a> that have just been released. Enjoy!
</p>
</div>

