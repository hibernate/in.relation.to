---
title: "Bean Validation Sneak Peek part III: groups and partial validation"
author: "Emmanuel Bernard"
blogger_name: "Emmanuel"
creation_date: "10-04-2008"
original_tags: [Bean Validation,Bean Validation Sneak Peek]
tags: [Bean Validation,Java EE]

relative_url: /2008/04/10/bean-validation-sneak-peek-part-iii-groups-and-partial-validation
slug: bean-validation-sneak-peek-part-iii-groups-and-partial-validation
lace: http://in.relation.to/8833.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2008/04/10/bean-validation-sneak-peek-part-iii-groups-and-partial-validation
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
<i class="wikiEmphasis">This is the third installment of a series of blog entries on the Bean Validation specification (JSR 303). If you have not done it yet, go read <a href="http://in.relation.to/Bloggers/BeanValidationSneakPeekPartI" target="" class="regularLink">the first</a> and <a href="http://in.relation.to/Bloggers/BeanValidationSneakPeekPartIICustomConstraints" target="" class="regularLink">second</a> part.</i>
</p>

<p class="wikiPara">
The Bean Validation specification let's you define constraints on your domain model. In a couple of situations, validating a subset of constraints is needed.
</p>

<p class="wikiPara">
In a wizard-style screen, the information is partially distilled over time from screen to screen. Validating data for each screen is useful but as a whole, the data is not ready for a complete constraint validation.
</p>

<p class="wikiPara">
Some constraints need to run after others. There are several use cases for ordering constraints:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> higher level constraints may expect data pre validated by basic constraints before being triggered themselves</li>
<li class="wikiUnorderedListItem"> some constraints are expensive in CPU, memory, time or even money. Running the previous constraints first and fail fast is required</li>
<li class="wikiUnorderedListItem"> some use cases need to validate additional or specific constraints not necessary for others use cases</li>
</ul>

<p class="wikiPara">
To solve this class of problems, the Bean Validation specification uses the notion of group. Each constraint can define a set of groups it belongs to. When it comes to validate an object graph, one or several groups can be requested.
</p>

<h2 class="wikiHeadline2" id="H-ThePrinciples"><a href="/2008/04/10/bean-validation-sneak-peek-part-iii-groups-and-partial-validation#H-ThePrinciples">The principles</a></h2>

<p class="wikiPara">
Let's first describe the theory behind groups
</p>

<h3 class="wikiHeadline3" id="H-DeclareAConstraintAsBelongingToAGroup"><a href="/2008/04/10/bean-validation-sneak-peek-part-iii-groups-and-partial-validation#H-DeclareAConstraintAsBelongingToAGroup">Declare a constraint as belonging to a group</a></h3>

<p class="wikiPara">
Each constraint has a <tt>groups</tt> element whose default value is an empty array. When this element is not explicitly declared on an constraint annotation, the default group is assumed
</p>

<pre class="wikiPreformatted">public class Address {
        //not null belongs to the "default" group
        @NotNull String street1;
}</pre>


<p class="wikiPara">
Any constraint declaration can define one or several groups it belongs to. Note that <q>default</q> is the special default group.
</p>

<pre class="wikiPreformatted">public class Address {
        @NotNull(groups={"basic", "default"}) private String street1;
}</pre>


<p class="wikiPara">
In this example, <tt>@NotNull</tt> is checked any time either the <tt>basic</tt> or <tt>default</tt> group is requested.
</p>

<h3 class="wikiHeadline3" id="H-DefiningConstraintOrdering"><a href="/2008/04/10/bean-validation-sneak-peek-part-iii-groups-and-partial-validation#H-DefiningConstraintOrdering">Defining constraint ordering</a></h3>

<p class="wikiPara">
Ordering constraints for the sake of ordering the execution does not make a lot of sense since the Bean Validation implementation ends up executing all the constraints and return all the failures (for a given set of groups). However, it is useful to have the ability to avoid the execution of a constraint if an other constraint fails.
</p>

<p class="wikiPara">
The Bean Validation specification uses the notion of a group sequence. A group sequence declares a list of groups. Each group must be validated sequentially following the list order. Validating a group means validating all constraints of an object graph belonging to the group. If one or more constraints fail in a given group, the following groups in the group sequence are not processed.
</p>

<p class="wikiPara">
A group sequence is declared with <tt>@GroupSequence</tt> and is applied on the class it is set on.
</p>

<pre class="wikiPreformatted">@GroupSequence(name="default", sequence={"basic", "complex"})
@AddressChecker(groups="complex")
public class Address {
        @NotNull(groups="basic") private String street1;
        ...
}</pre>


<p class="wikiPara">
In an object graph (<tt>@Valid</tt>), group sequences from the parent object are inherited by the children objects. <tt>@GroupSequences</tt> is used to declare more than one sequence per class. A group sequence can contain the name of another group sequence.
</p>

<h3 class="wikiHeadline3" id="H-ValidatingAGroup"><a href="/2008/04/10/bean-validation-sneak-peek-part-iii-groups-and-partial-validation#H-ValidatingAGroup">Validating a group</a></h3>

<p class="wikiPara">
By default, the <tt>validate</tt> method validates the <tt>default</tt> group. You can decide to validate one or several groups:
</p>

<pre class="wikiPreformatted">validator.validate(address, "basic");
validator.validate(address, "firstscreen", "secondscreen");</pre>


<p class="wikiPara">
The groups passed to the <tt>validate</tt> method are not processed in a particular order (if you need ordering, use a group sequence).
</p>

<h2 class="wikiHeadline2" id="H-PracticalUses"><a href="/2008/04/10/bean-validation-sneak-peek-part-iii-groups-and-partial-validation#H-PracticalUses">Practical uses</a></h2>

<p class="wikiPara">
Enough theory, let's see how groups and group sequences solve our use cases.
</p>

<h3 class="wikiHeadline3" id="H-UseCaseSpecificValidation"><a href="/2008/04/10/bean-validation-sneak-peek-part-iii-groups-and-partial-validation#H-UseCaseSpecificValidation">Use case specific validation</a></h3>

<p class="wikiPara">
Defining constraints based on specific use cases is sometimes useful. A typical example comes from reusing the same object model for different purposes, in different contexts.
</p>

<p class="wikiPara">
In our example, an account can be in three states, default, canbuy and oneclick. A canbuy account has enough information to buy items, a oneclick account can buy in... ahem one click.
</p>

<pre class="wikiPreformatted">public class Account {

        @NotEmpty @Length(max=50) private String firstname;
        @Length(max=50) private String middleName;
        @NotEmpty @Length(max=50) private String lastname;
        
        @NotNull(groups="canbuy") @Phone private String cellPhone;

        @Valid @NotEmpty(groups="canbuy")
        private Set&lt;Address&gt; addresses;

        @Valid @NotNull(groups="canbuy")
        private Address defaultAddress;
        
        @Valid @NotEmpty(groups="canbuy")
        private Set&lt;PaymentMethod&gt; paymentMethod;

        @Valid @NotNull(groups="oneclick")
        private Address defaultPaymentMethod;

}</pre>


<p class="wikiPara">
Let's dissect the previous example. A default account must have a first name and last name. If it has addresses, payment methods and phone number, each of these properties must be valid. However, these properties do not have to be filled up to be valid.
</p>

<p class="wikiPara">
An account can buy if it has a default address and at least one payment method. An account can buy in one click if it has a default payment method.
</p>

<p class="wikiPara">
We could imagine the following logic
</p>

<pre class="wikiPreformatted">Set&lt;InvalidConstraint&gt; accountIssues = validator.validate(account);
if ( accountIssues.size() &gt; 0 ) {
        //push that error list to the user
}
else {
        if ( validator.validate(account, "canbuy").size() == 0 ) {
                enableBuyButton();
                if ( validator.validate(account, "oneclick").size() == 0 ) {
                        enableOneClick();
                }
        }
}</pre>


<p class="wikiPara">
The data consistency is ensured by the <tt>default</tt> group. And some additional state checking is provided by additional groups. Note that in an integrated world, your application framework or your web framework would let your declaratively express which group needs to be validated in a given page context, page, conversation etc. The application avoids the extra work of manually executing the validation.
</p>

<h3 class="wikiHeadline3" id="H-PartialDataValidationTheWizardScreenModel"><a href="/2008/04/10/bean-validation-sneak-peek-part-iii-groups-and-partial-validation#H-PartialDataValidationTheWizardScreenModel">Partial data validation: the wizard screen model</a></h3>

<p class="wikiPara">
In a wizard-style user interface, data is provided partially and gets more and more complete when the user move from one wizard screen to the other.
</p>

<p class="wikiPara">
Let's take the previous example and let's imagine a wizard building a one click account from the ground up:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> the first screen acquires the firstname, lastname and phone</li>
<li class="wikiUnorderedListItem"> the second screen adds one or several addresses</li>
<li class="wikiUnorderedListItem"> the third screen adds one or several payment methods</li>
<li class="wikiUnorderedListItem"> the forth screen makes sure the user selects a default address and payment method and that everything is set up for a one click process</li>
<li class="wikiUnorderedListItem"> the fifth screen is a summary and make sure that everything is in place</li>
</ul>

<pre class="wikiPreformatted">public class Account {

        @NotEmpty(groups={"firstscreen", "default"}) 
        @Length(max=50, groups={"firstscreen", "default"}) 
        private String firstname;
        
        @NotEmpty(groups={"firstscreen", "default"})
        @Length(max=50, groups={"firstscreen", "default"}) 
        private String lastname;
        
        @NotNull(groups={"firstscreen", "canbuy"}) 
        @Phone(groups={"firstscreen", "default"})
        private String cellPhone;

        @Valid @NotEmpty(groups={"secondscreen", "canbuy"})
        private Set&lt;Address&gt; addresses;

        @Valid @NotNull(groups={"forthscreen", "canbuy"})
        private Address defaultAddress;
        
        @Valid @NotEmpty(groups={"thirdscreen", "canbuy"})
        private Set&lt;PaymentMethod&gt; paymentMethod;

        @Valid @NotNull(groups={"forthscreen", "oneclick"})
        private Address defaultPaymentMethod;

}</pre>


<p class="wikiPara">
For each screen but the last, a specific group has been set up. The last screen needs to ensure an account is valid for a oneclick operation. It then needs to validate <tt>default</tt>, <tt>canbuy</tt> and <tt>oneclick</tt> groups.
</p>

<p class="wikiPara">
While the group validation can be called programmatically, we expect application frameworks and web frameworks to let you define the targeted groups declaratively.
</p>

<p class="wikiPara">
In JSF, it could look like:
</p>

<pre class="wikiPreformatted">&lt;s:validateAll groups="firstscreen"&gt;
  &lt;s:decorate&gt;
    &lt;h:inputText id="firstname" value="#{account.firstname}" /&gt;
    &lt;h:message for="firstname" styleClass="error" /&gt;
    &lt;br/&gt;
    &lt;h:inputText id="lastname" value="#{account.lastname}" /&gt;
    &lt;h:message for="lastname" styleClass="error" /&gt;
    &lt;br/&gt;
    &lt;h:inputText id="cellPhone" value="#{account.cellPhone}" /&gt;
    &lt;h:message for="cellPhone" styleClass="error" /&gt;
  &lt;/s:decorate&gt;
&lt;/s:validateAll&gt;
</pre>

<p class="wikiPara">
This is just a proposal / vision. This integration is not part of the JSR 303 specification.
</p>

<h3 class="wikiHeadline3" id="H-ConstraintOrdering"><a href="/2008/04/10/bean-validation-sneak-peek-part-iii-groups-and-partial-validation#H-ConstraintOrdering">Constraint ordering</a></h3>

<p class="wikiPara">
An other use case is the ability to stop constraint validations if a group of constraint fails. It is quite useful in (at least) two situations:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> some constraint validations (especially class level constraints) expect to work on pre-validated constraints (for example pre validated with nullability, length and global pattern matchings): the basic level constraints must be valid before calling a higher level constraint checking.</li>
<li class="wikiUnorderedListItem"> some constraints are expensive to run (long processing, access an external resource etc)</li>
</ul>

<p class="wikiPara">
Validating an address can be fairly simple (some basic constraints) especially when targeting one country. It could also be much more complex and involve address coherence checking (the zipcode must match the city, the street name much match the zipcode and so on). The address coherence checking cannot really be applied until we are sure the basic constraints are valid as it expects some pre normalized data. On top of that, our application has to call an external service to check the coherence. And it turns out calling this service has two drawbacks:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> it is a bit slow (at least slower than the other constraint validations)</li>
<li class="wikiUnorderedListItem"> it costs a fee per execution</li>
</ul>

<p class="wikiPara">
We want to make sure the address coherence constraint is not called unless the other constraints are valid:
</p>

<pre class="wikiPreformatted">@GroupSequence(name="default", sequence={"basic", "complex"})
@Address(groups="complex")
public class Address {
    @NotNull(groups="basic") @Max(50, groups="basic")) private String street1;
    @Max(50, groups="basic")) private String street2;
    @Max(10, groups="basic")) @NotNull(groups="basic") private String zipCode;
    @Max(20, groups="basic")) @NotNull(groups="basic") String city;
    @NotNull(groups="basic") private Country country;
    
    ...
}</pre>


<p class="wikiPara">
The group sequence will first validate the constraints marked as <tt>basic</tt>, then validate the constraints marked as <tt>complex</tt> unless one (or more) constraint from the <tt>basic</tt> group failed.
</p>

<h2 class="wikiHeadline2" id="H-Conclusion"><a href="/2008/04/10/bean-validation-sneak-peek-part-iii-groups-and-partial-validation#H-Conclusion">Conclusion</a></h2>
<p class="wikiPara">
In most cases, the default group will suffice. But more complex use cases need additional flexibility in the constraint definition and validation.
While declaring groups is the application developers responsibility, validating a given set of groups will most likely be driven by the client framework (application frameworks, web frameworks and to a certain extends persistence frameworks). Either by using method annotations or template declarations, frameworks like WebBeans or JSF will capture the requested constraint validation groups and execute the validation calls for the application.
</p>

<p class="wikiPara">
This part of the specification is probably the most controversial. The current proposal tries to achieve several goals:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> embrace the declarative model</li>
<li class="wikiUnorderedListItem"> stay as simple and understandable as possible</li>
<li class="wikiUnorderedListItem"> provide enough flexibility to match most use cases</li>
</ul>

<p class="wikiPara">
The expert group is seeking feedback in several forms on the <tt>groups</tt> approach:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> use cases: describe your use cases, see how (or if) they can be addressed by the current proposal</li>
<li class="wikiUnorderedListItem"> enhancements: propose enhancements on the <tt>groups</tt> concept to make it more flexible or more simple</li>
<li class="wikiUnorderedListItem"> alternatives: you think you have the perfect solution? go describe it, let's see how it fits the model</li>
</ul>

<p class="wikiPara">
We encourage you to read the <a href="http://jcp.org/en/jsr/detail?id=303" target="" class="regularLink">specification</a> and provide feedbacks and comments on <a href="http://forum.hibernate.org/viewforum.php?f=26" target="" class="regularLink">this forum</a>.</p>
</div>

