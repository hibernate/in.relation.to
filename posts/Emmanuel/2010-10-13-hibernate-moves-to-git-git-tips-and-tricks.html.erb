---
title: "Hibernate moves to Git + Git tips and tricks"
author: "Emmanuel Bernard"
blogger_name: "Emmanuel"
creation_date: "13-10-2010"
original_tags: [Git,Hibernate,Hibernate Validator]
tags: [Discussion,Hibernate Validator]

relative_url: /2010/10/13/hibernate-moves-to-git-git-tips-and-tricks
slug: hibernate-moves-to-git-git-tips-and-tricks
lace: http://in.relation.to/17349.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2010/10/13/hibernate-moves-to-git-git-tips-and-tricks
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
Yyou probably don't know it yet but Hibernate Core and Hibernate Validator source code is now on <a href="http://git-scm.com/" target="" class="regularLink">Git</a> and Hibernate Search and co will likely follow very soon. There are various reasons for the move but to summarize it, life was not bad under SVN but it's really great under Git.
</p>

<h1 class="wikiHeadline1" id="H-GettingHibernateSources"><a href="/2010/10/13/hibernate-moves-to-git-git-tips-and-tricks#H-GettingHibernateSources">Getting Hibernate sources</a></h1>

<p class="wikiPara">
The public <q>reference</q> Git repository is hosted at <a href="http://github.com/hibernate" target="" class="regularLink">GitHub</a>. We are not married to GitHub but so far, we really like the infrastructure they offer. Kudos to them! In any case moving is one clone away. That tends to keep services like that on their toes.
</p>

<p class="wikiPara">
Hibernate Core is <a href="http://github.com/hibernate/hibernate-core" target="" class="regularLink">here</a> while Hibernate Validator is <a href="http://github.com/hibernate/hibernate-validator" target="" class="regularLink">there</a>.
</p>

<h1 class="wikiHeadline1" id="H-Contributing"><a href="/2010/10/13/hibernate-moves-to-git-git-tips-and-tricks#H-Contributing">Contributing</a></h1>

<p class="wikiPara">
If you want to contribute a fix or new feature, either:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> use the GitHub fork capability: clone, work on a branch, fork the repo on GitHub (fork button), push the work there and trigger a pull request (pull request button). Also see <a href="http://help.github.com/forking/" target="" class="regularLink">http://help.github.com/forking</a> and <a href="http://help.github.com/pull-requests/" target="" class="regularLink">http://help.github.com/pull-requests</a>
</li>
<li class="wikiUnorderedListItem"> use the pure Git approach: clone, work on a branch, push to a public fork repo hosted somewhere, trigger a pull request <tt>git pull-request</tt>
</li>
<li class="wikiUnorderedListItem"> provide a good old patch file: clone the repo, create a patch with <tt>git format-patch</tt> or <tt>diff</tt> and attach the patch file to JIRA</li>
</ul>

<p class="wikiPara">
Our preference is GitHub over pure Git over patches:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> GitHub lets us comment on your changes in a fine grained way</li>
<li class="wikiUnorderedListItem"> Git generally leads to more small commits that are easier to follow</li>
<li class="wikiUnorderedListItem"> a big fat patch of 100k is always depressing and can't be updated easliy</li>
</ul>

<p class="wikiPara">
If you still want to do it the old way a provide a patch file, that's ok too.
</p>

<h1 class="wikiHeadline1" id="H-VariousTipsOnGit"><a href="/2010/10/13/hibernate-moves-to-git-git-tips-and-tricks#H-VariousTipsOnGit">Various tips on Git</a></h1>

<p class="wikiPara">
While in no way comprehensive, here are a collection of useful tips when using Git.
</p>

<h2 class="wikiHeadline2" id="H-ReadABookOnIt"><a href="/2010/10/13/hibernate-moves-to-git-git-tips-and-tricks#H-ReadABookOnIt">Read a book on it</a></h2>

<p class="wikiPara">
The time will be worth it. I particularly enjoyed <a href="http://progit.org/book/" target="" class="regularLink">Pro Git</a>. It's an awesome book and very practical. It has a free html and epub version (buying the tree version is recommended to repay the author).
</p>

<h2 class="wikiHeadline2" id="H-Cloning"><a href="/2010/10/13/hibernate-moves-to-git-git-tips-and-tricks#H-Cloning">Cloning</a></h2>

<p class="wikiPara">
Prefer the <tt>git</tt> protocol when cloning over <tt>http</tt> (so say the experts). At the very least that will be much faster. cloning the repo from GitHub took me less than 3 minutes.
</p>

<pre class="wikiPreformatted">#for people with read/write access
git clone git@github.com:hibernate/hibernate-core.git

#for people with read-only access
git clone git://github.com/hibernate/hibernate-core.git</pre>


<p class="wikiPara">
This will create a remote link named <tt>origin</tt>. I usually tend to rename it to reflect what it really is.
</p>

<pre class="wikiPreformatted">git remote rename origin core-on-github</pre>


<p class="wikiPara">
Note that you can attach more than one remote repository to your local repository
</p>

<pre class="wikiPreformatted">git clone git://github.com/hibernate/hibernate-core.git
git remote rename origin ref-core-github
git remote add manu-core-github git@github.com:emmanuelbernard/hibernate-core.git
git fetch manu-core-github</pre>


<h2 class="wikiHeadline2" id="H-PushingAndPulling"><a href="/2010/10/13/hibernate-moves-to-git-git-tips-and-tricks#H-PushingAndPulling">Pushing and pulling</a></h2>

<p class="wikiPara">
To initially get a copy of a remote branch locally, do
</p>

<pre class="wikiPreformatted">git checkout -b 3.6 origin/3.6</pre>


<p class="wikiPara">
When pulling a branch, it's best to keep the same name between the origin repo and your clone. Many syntax have shortcuts in this situation (are you listening Hardy? ;) ). You can then do
</p>

<pre class="wikiPreformatted">git push origin master</pre>


<p class="wikiPara">
If you happen to have renamed the branch <tt>master</tt> to say <tt>local-master</tt> locally, do
</p>

<pre class="wikiPreformatted">git push origin local-master:master</pre>


<p class="wikiPara">
To delete a branch on a remote repository, you push an empty one
</p>

<pre class="wikiPreformatted">git push origin :branch-to-remove</pre>


<h2 class="wikiHeadline2" id="H-Branches"><a href="/2010/10/13/hibernate-moves-to-git-git-tips-and-tricks#H-Branches">Branches</a></h2>

<p class="wikiPara">
Always work on a topic branch and merge your work when you are done.
</p>

<pre class="wikiPreformatted">git checkout master
git checkout -b HHH-XXX
#hack commit hack commit</pre>


<p class="wikiPara">
Don't forget to pull from your master and rebase this topic branch before proposing request pull.
</p>

<p class="wikiPara">
There are many advantages to this, one of them being that you can work on many different things in parallel and sync them with the reference master easily.
</p>

<p class="wikiPara">
Likewise if you want to share a work with somebody from the Hibernate team, push to the public repo and define the pull request of your topic branch. Make sure your topic branch is above the most recent master.
</p>

<h2 class="wikiHeadline2" id="H-Commits"><a href="/2010/10/13/hibernate-moves-to-git-git-tips-and-tricks#H-Commits">Commits</a></h2>

<p class="wikiPara">
Prefer small commits, they will be more readable and will very unlikely fail on merge.
</p>

<p class="wikiPara">
Write good comments (one short line including the issue number at stake and a summary, followed by a blank line and a more detailed explanation if needed.
</p>

<pre class="wikiPreformatted">HHH-XXX Fix NPE on persist

Fix stupid bug by Gavin that lead to a NPE when persisting objects with components</pre>


<h2 class="wikiHeadline2" id="H-MergeOrRebase"><a href="/2010/10/13/hibernate-moves-to-git-git-tips-and-tricks#H-MergeOrRebase">Merge or rebase</a></h2>

<p class="wikiPara">
It's a debate, but here is my take on it.
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> Primitive 0: DO NOT rebase a branch that you have shared publicly (unless you know people won't use it or you wish them harm).</li>
<li class="wikiUnorderedListItem"> Primitive 1: Prefer rebase over merge assuming it does not break Primitive 0</li>
</ul>

<p class="wikiPara">
This is particularly sensible when you trigger a pull request: rebase atop the branch you are branching of (master usually). Your work will be easier to read and integrate.
</p>

<p class="wikiPara">
Rebase put changes from the branch you forked (say master) below the new commits you have done (say HHH-XXX) and thus keep the history linear.
</p>

<pre class="wikiPreformatted">git checkout HHH-XXX
git rebase master</pre>


<p class="wikiPara">
While we are at rebasing, you can rewrite your commit history to clean comments or merge some commits together (aka squashing)
</p>

<pre class="wikiPreformatted">git rebase -i HEAD~6 (go back 6 commits in time)</pre>


<h2 class="wikiHeadline2" id="H-BackportingCherrypicking"><a href="/2010/10/13/hibernate-moves-to-git-git-tips-and-tricks#H-BackportingCherrypicking">Backporting: cherry-picking</a></h2>

<p class="wikiPara">
Git made backporting fun.
</p>

<p class="wikiPara">
Say you have done some commits on master and the sha1 of the commits are ae397d... and 87ab342...
</p>

<p class="wikiPara">
You can apply them on an older branch very easily.
</p>

<pre class="wikiPreformatted">git checkout 3.5
git cherry-pick ae397d
git cherry-pick 87ab34</pre>


<p class="wikiPara">
Bam, you're done. Now did I tell you to do small commits? That's also for the backporters.
</p>

<h2 class="wikiHeadline2" id="H-AliasesAndConfiguration"><a href="/2010/10/13/hibernate-moves-to-git-git-tips-and-tricks#H-AliasesAndConfiguration">Aliases and configuration</a></h2>

<p class="wikiPara">
Once you're fed up with typing longish command lines, use aliases. I've put a copy of my ~/.gitconfig file in case people want to copy some things including aliases (see below)
</p>

<pre class="wikiPreformatted">~/.gitconfig
[user]
     name = Redacted
     email = redacted@redacted.com
     signingkey = id_key.pub
[core]
     editor = open -nW -a Smultron
[merge]
     tool = opendiff
[color]
     ui = auto
[color "branch"]
     current = yellow reverse
     local = yellow
     remote = green
[color "diff"]
     meta = yellow bold
     frag = magenta bold
     old = red bold
     new = green bold
[color "status"]
     added = yellow
     changed = green
     untracked = cyan
[github]
     user = redacted
     token = redacted
[alias]
     co = checkout
     undo = reset --hard
     cb = checkout -b
     br = branch
     cp = cherry-pick</pre>


<h2 class="wikiHeadline2" id="H-Tools"><a href="/2010/10/13/hibernate-moves-to-git-git-tips-and-tricks#H-Tools">Tools</a></h2>

<p class="wikiPara">
If you use Mac OS X, GitX is a fantastic tool. In particular, you can very easily play with interactive staging and commit only some parts of a file in a couple of clicks. A typical use case is to separate the commit of a typo from the commit of a core feature. Some people like the built-in GitK GUI.
</p>

<p class="wikiPara">
Command completion support via <tt>git-completion.bash</tt> is pretty good if you are command shell type person. The script is available in the Git project sources and in other places (including Fedora). Pro Git has <a href="http://progit.org/book/ch2-11.html" target="" class="regularLink">some more information</a> on it.
</p>

<h2 class="wikiHeadline2" id="H-Various"><a href="/2010/10/13/hibernate-moves-to-git-git-tips-and-tricks#H-Various">Various</a></h2>

<p class="wikiPara">
You can also read <a href="http://blog.emmanuelbernard.com/2010/05/git-how-my-life-has-improved-since-last-month-when-i-used-svn/" target="" class="regularLink">this blog entry</a> that was some more info for people moving from SVN to Git.
</p>

<p class="wikiPara">
This entry is too long already, feel free to add your tips in the comments.</p>
</div>

