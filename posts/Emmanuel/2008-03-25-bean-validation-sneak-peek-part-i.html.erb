---
title: "Bean Validation Sneak Peek part I"
author: "Emmanuel Bernard"
blogger_name: "Emmanuel"
creation_date: "25-03-2008"
original_tags: [Bean Validation,Bean Validation Sneak Peek]
tags: [Bean Validation,Java EE]

relative_url: /2008/03/25/bean-validation-sneak-peek-part-i
slug: bean-validation-sneak-peek-part-i
lace: http://in.relation.to/8746.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2008/03/25/bean-validation-sneak-peek-part-i
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
<i class="wikiEmphasis">This blog entry is a general overview of the Bean Validation specification. Future blog entries will follow and will dive into specific aspects of the specification.
</i>
</p>

<p class="wikiPara">
We have just released an <a href="http://jcp.org/en/jsr/detail?id=303" target="" class="regularLink">early draft review of JSR 303 Bean Validation</a>. The goal of this draft is to gather feedbacks and comments from the multi-facets community
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> application developers (SE, EE, GUI, process, database)</li>
<li class="wikiUnorderedListItem"> library developers</li>
<li class="wikiUnorderedListItem"> tool developers</li>
<li class="wikiUnorderedListItem"> other JSR expert groups including JSF 2.0, Java Persistence 2.0 and WebBeans</li>
</ul>

<p class="wikiPara">
Please download the <a href="http://jcp.org/en/jsr/detail?id=303" target="" class="regularLink">specification draft</a> and give us feedback.
</p>

<h2 class="wikiHeadline2" id="H-Goals"><a href="/2008/03/25/bean-validation-sneak-peek-part-i#H-Goals">Goals</a></h2>
<p class="wikiPara">
Validating data is a common task that is spread across several (if not all) layers of today's applications. 
Because each layer defines validation rules its own way, duplication and errors are quite common.
</p>

<div style="text-align:center">
<img src="/images/8738.png" width="469" height="162">
</div>

<p class="wikiPara">
The Bean Validation specification addresses this problem by providing:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> an extensible annotation-based validation declaration model (XML deployment descriptors will be available as well)</li>
<li class="wikiUnorderedListItem"> a standard runtime validation API</li>
<li class="wikiUnorderedListItem"> a standard metadata query API</li>
</ul>

<p class="wikiPara">
By providing a standard frame set around object validation, the specification aims at being the main provider for validation declaration and validation execution in the Java ecosystem. The same set of validations will be shared by all the application layers.
</p>

<h2 class="wikiHeadline2" id="H-ExpressingConstraints"><a href="/2008/03/25/bean-validation-sneak-peek-part-i#H-ExpressingConstraints">Expressing constraints</a></h2>
<p class="wikiPara">
Constraints are primarily expressed through annotations. Adding a constraint on a class, field or getter is as simple as adding a constraint annotation on it. The annotated element value is checked by the constraint.
</p>

<pre class="wikiPreformatted">public class Address {
        @NotEmpty @Max(50)
        private String street1;
        
        @Max(50)
        private String street2;

        @Max(9) @NotNull
        private String zipcode;
        
        ...
}</pre>


<p class="wikiPara">
Validating an object is equivalent to validate all the constraints declared on:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> its fields</li>
<li class="wikiUnorderedListItem"> its getters</li>
<li class="wikiUnorderedListItem"> its class</li>
<li class="wikiUnorderedListItem"> its superclasses</li>
<li class="wikiUnorderedListItem"> its interfaces</li>
</ul>


<h3 class="wikiHeadline3" id="H-MindYourOwnConstraint"><a href="/2008/03/25/bean-validation-sneak-peek-part-i#H-MindYourOwnConstraint">Mind your own constraint</a></h3>
<p class="wikiPara">
Constraints are not limited to built-in annotations. Any application can define its own additional set of constraints. A constraint is comprised of:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> an annotation</li>
<li class="wikiUnorderedListItem"> a constraint validation implementation</li>
</ul>

<p class="wikiPara">
While the annotation expresses the constraint on the domain model, the validation implementation decides whether a given value passes the constraint or not.
</p>

<h3 class="wikiHeadline3" id="H-Message"><a href="/2008/03/25/bean-validation-sneak-peek-part-i#H-Message">message</a></h3>
<p class="wikiPara">
A constraint can define a custom error message returned when failure occurs.
</p>

<pre class="wikiPreformatted">public class Address {
        @NotEmpty(message="The street is mandatory")
        private String street1;
</pre>

<p class="wikiPara">
The specification provides a way to externalize these messages: this will be covered in a later post.
</p>

<h3 class="wikiHeadline3" id="H-ObjectGraphValidation"><a href="/2008/03/25/bean-validation-sneak-peek-part-i#H-ObjectGraphValidation">object graph validation</a></h3>

<p class="wikiPara">
It is handy to validate an object graph as a whole rather than validate every single object manually. <tt>@Valid</tt> allows you to include associated objects to the validation process
</p>


<pre class="wikiPreformatted">public class Order {
        @OrderNumber private String orderNumber;
        @Valid @NotNull private Address delivery;
}</pre>


<p class="wikiPara">
When an <tt>order</tt> object is validated, its <tt>address</tt> is validated as well.
</p>


<h2 class="wikiHeadline2" id="H-ValidatingConstraints"><a href="/2008/03/25/bean-validation-sneak-peek-part-i#H-ValidatingConstraints">Validating constraints</a></h2>

<p class="wikiPara">
A <tt>Validator</tt> validates objects (graphs) of a given type. When an object is validated, all declared constraints are validated (from fields, getters, the class itself and associated objects if marked as such).
The validation will process all constraints and return the list of all failing ones. This is quite useful to display all erroneous fields in a user interface.
</p>

<pre class="wikiPreformatted">Validator&lt;Address&gt; addressValidator = ...;
for (InvalidConstraint&lt;Address&gt; error : addressValidator.validate(address) ) {
        displayErrorByField(error.getPropertyPath(), error.getMessage());       
}</pre>


<p class="wikiPara">
The API also allows to validate a given property rather than the whole object graph for finer grained validation, possibly even before setting the value. This situation arises when an object is gradually populated and needs to be validated.
</p>

<pre class="wikiPreformatted">//apply the street1 constraints on the value
addressValidator.validateValue("street1", "3340 peachtree Rd NE");</pre>


<p class="wikiPara">
It is also possible to validate a subset of the declared constraints rather than all available constaints (using the notion of constraint groups). This is useful in two scenarios:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> validate a gradually populated object graph (wizard style UI or use case driven validation)</li>
<li class="wikiUnorderedListItem"> validate a set of constraints before an other set of constraints (the second relying on the first or being expensive resource-wise)</li>
</ul>

<p class="wikiPara">
Groups will be covered in a future post.
</p>

<h2 class="wikiHeadline2" id="H-SharingConstraintMetadata"><a href="/2008/03/25/bean-validation-sneak-peek-part-i#H-SharingConstraintMetadata">Sharing constraint metadata</a></h2>
<p class="wikiPara">
The Bean Validation API exposes all the constraint metadata for a given class:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> describes the constraints of a given element</li>
<li class="wikiUnorderedListItem"> exposes the constraint properties</li>
<li class="wikiUnorderedListItem"> etc</li>
</ul>

<p class="wikiPara">
Metadata information is useful for tools (such as IDEs) and libraries interacting beyond the frontier of Java (database, javascript libraries and so on).
</p>

<h2 class="wikiHeadline2" id="H-TheGrandSchemeOfThings"><a href="/2008/03/25/bean-validation-sneak-peek-part-i#H-TheGrandSchemeOfThings">The grand scheme of things</a></h2>
<p class="wikiPara">
The goal of JSR 303 is to be the main runtime checking solution and metadata repository for validation rule. This common language between application developers, libraries and JSRs in need for validation (runtime and metadata) will free Java developers from multiple constraint declarations and incompatible validation implementations.
</p>

<p class="wikiPara">
We have specifically planned to work with expert groups from JSF 2.0, Java Persistence 2.0 and WebBeans to offer a smooth and homogeneous integration at the Java platform level. You can envision your constraints propagated to the database schema, to AJAX UI components and checked at various levels of the Java application (presentation, business, persistence layers), all from the same declaration source: your domain model.
</p>


<p class="wikiPara">
This blog entry only brushes the main usages and APIs of the Bean Validation specification. I will follow with some posts covering in more depth:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> how to write your own constraints and why it matters</li>
<li class="wikiUnorderedListItem"> groups: define subsets of constraints, why and how</li>
<li class="wikiUnorderedListItem"> beyond the Java land: the metadata API</li>
</ul>

<p class="wikiPara">
Please download the specification draft and give us feedback.</p>
</div>

