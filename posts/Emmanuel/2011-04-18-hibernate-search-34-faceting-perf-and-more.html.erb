---
title: "Hibernate Search 3.4: Faceting, perf and more"
author: "Emmanuel Bernard"
blogger_name: "Emmanuel"
creation_date: "18-04-2011"
original_tags: [Hibernate,Hibernate Search]
tags: [Hibernate Search]

relative_url: /2011/04/18/hibernate-search-34-faceting-perf-and-more
slug: hibernate-search-34-faceting-perf-and-more
lace: http://in.relation.to/19419.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2011/04/18/hibernate-search-34-faceting-perf-and-more
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
The Hibernate team is pleased to announce Hibernate Search 3.4 which comes with couple of new features most notably faceting: we are continuing the trend of 3.3 where the focus was on simplifying queries). But the bulk of the work has been around performance optimization, you should see the benefits in your applications especially when the domain model is getting complex.
</p>

<p class="wikiPara">
Oh and for people that don't know, Hibernate Search is a full-text search engine atop Hibernate Core (and Infinispan).
</p>

<h1 class="wikiHeadline1" id="H-Faceting"><a href="/2011/04/18/hibernate-search-34-faceting-perf-and-more#H-Faceting">Faceting</a></h1>

<p class="wikiPara">
Faceting is a technique that divides the results of a query into multiple categories. Say you search for a car, categories could be:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> Brand (Renault, Mercedes, Nissan, Ford)</li>
<li class="wikiUnorderedListItem"> Price range (below $5000, $5000 - $10000, $10000 - $20000, ...)</li>
</ul>

<p class="wikiPara">
For each, category value, the faceting feature gives you the number of matching elements. You will then know that there are 20 Mercedes and 7 Nissan matching the query. On one side, you have the results of your query (typically at the center of the page) and on the other sde (typically on the left side), you have a list of categories with their repartition amongst the query results. Faceting is really a smart/contextual navigation tool.
</p>

<p class="wikiPara">
Finally, you can drill down, ie select one or several category results to refine the query. It is hard to explain all this in words, but check out <a href="http://www.amazon.com/gp/search/ref=sr_nr_scat_3017941_ln?rh=n%3A3017941%2Ck%3Aoptical+lenses&amp;keywords=optical+lenses&amp;ie=UTF8&amp;qid=1303147542&amp;scn=3017941&amp;h=a23127f10024445e0e296acda780ff184d9c3849" target="" class="regularLink">amazon.com</a> (do a query within a department - say in the Digital SLR department - query 'lenses' and you will see Department, Brand, Customer review, Condition facets on the left).
</p>

<p class="wikiPara">
Hibernate Search now provides an API to implement Amazon style faceting for your queries. We make use of a DSL API to express a facet request that you can then attach to a query.
</p>

<pre class="wikiPreformatted">FacetingRequest priceFacetingRequest = qB
  .facet()
    .name( "priceFaceting" )
    .onField( "price" )
    .range()
      .below( 1000 )
      .from( 1001 ).to( 1500 )
      .above( 1500 ).excludeLimit()
    .createFacetingRequest();</pre>


<p class="wikiPara">
Check out <a href="http://docs.jboss.org/hibernate/stable/search/reference/en-US/html/search-query.html#query-faceting" target="" class="regularLink">the documentation</a> for more info.
</p>

<h1 class="wikiHeadline1" id="H-RetrieveEntitiesFromTheSecondLevelCacheFirst"><a href="/2011/04/18/hibernate-search-34-faceting-perf-and-more#H-RetrieveEntitiesFromTheSecondLevelCacheFirst">Retrieve entities from the second level cache first</a></h1>

<p class="wikiPara">
Some people have a data set small enough to keep most of the living data in their second level cache. Up until now, Hibernate Search was favoring a database query. You can now customize how the data is retrieved and in particular force the second level cache:
</p>

<pre class="wikiPreformatted">FullTextQuery query = session.createFullTextQuery(luceneQuery, User.class);
query.initializeObjectsWith(
    ObjectLookupMethod.SECOND_LEVEL_CACHE,
    DatabaseRetrievalMethod.QUERY
);
List results = query.getResultList();</pre>


<p class="wikiPara">
Many thanks to the customers that requested this feature, it turned out to be extremely useful in various situations :)
</p>

<h1 class="wikiHeadline1" id="H-Lucene31"><a href="/2011/04/18/hibernate-search-34-faceting-perf-and-more#H-Lucene31">Lucene 3.1</a></h1>

<p class="wikiPara">
Hibernate Search has been upgraded to the latest version of Lucene. While some APIs have changed in the Lucene area, Hibernate Search shields you for all code-breaking changes. Make sure to check our <a href="http://community.jboss.org/wiki/HibernateSearchMigrationGuide" target="" class="regularLink">migration guide</a> though as some Lucene configurations have changed.
</p>

<h1 class="wikiHeadline1" id="H-PerformanceImprovements"><a href="/2011/04/18/hibernate-search-34-faceting-perf-and-more#H-PerformanceImprovements">Performance improvements</a></h1>

<p class="wikiPara">
A lot of work has been put in this release on performance improvements. Of course, Lucene 3.1 comes with its lot of enhancements but we have also improved the Hibernate Search engine:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> Update entities only when indexed properties have changed: if an entity changes in Hibernate Core but none of its indexed properties change, we won't trigger indexing anymore.</li>
<li class="wikiUnorderedListItem"> Mass Indexer now uses multiple threads during the text analysis phase: Mass Index runs as much work in parallel, we have added the actual text analysis phase to the mix.</li>
<li class="wikiUnorderedListItem"> Ability to use <tt>FieldCache</tt> and trade memory for performance improvement: loads a given field value in memory and avoid the Lucene index lookup later on. Check <a href="http://docs.jboss.org/hibernate/search/3.4/reference/en-US/html/search-query.html#query-fieldcaches" target="" class="regularLink">the reference documentation</a> for more info.</li>
<li class="wikiUnorderedListItem"> Smarter indexing on collection update event: when we know a collection won't involve updating an indexed entity (recursively), we skip the event.</li>
</ul>

<h1 class="wikiHeadline1" id="H-InternalsAndInfinispan"><a href="/2011/04/18/hibernate-search-34-faceting-perf-and-more#H-InternalsAndInfinispan">Internals and Infinispan</a></h1>

<p class="wikiPara">
We have properly isolated Hibernate Search query engine from Hibernate Core. The engine is now reused in Infinispan 5 as part of its Query module. The good news is that Infinispan Query benefits from all the new Hibernate Search features including faceting.
</p>

<h1 class="wikiHeadline1" id="H-HowToTryIt"><a href="/2011/04/18/hibernate-search-34-faceting-perf-and-more#H-HowToTryIt">How to try it</a></h1>

<p class="wikiPara">
There are many more minor features and many bug fixes, be sure to check our <a href="https://github.com/hibernate/hibernate-search/blob/3.4.0.Final/changelog.txt" target="" class="regularLink">changelog</a> for all the details.
</p>

<p class="wikiPara">
Hibernate Search 3.4 is compatible with the latest version of Hibernate Core (3.6.x). Check out the new release on JBoss.org's Maven <a href="http://repository.jboss.org/nexus/content/groups/public-jboss/" target="" class="regularLink">repository</a> or <a href="http://www.hibernate.org/subprojects/search/download" target="" class="regularLink">download the distribution</a>. You can also <a href="http://www.hibernate.org/subprojects/search/docs" target="" class="regularLink">read the documentation</a>.
Make sure to check out the <a href="http://community.jboss.org/wiki/HibernateSearchMigrationGuide" target="" class="regularLink">migration guide</a> if case you are migrating your application from a previous Hibernate Search version.
</p>

<h1 class="wikiHeadline1" id="H-JUDConAndJBossWorld"><a href="/2011/04/18/hibernate-search-34-faceting-perf-and-more#H-JUDConAndJBossWorld">JUDCon and JBoss World</a></h1>
<p class="wikiPara">
If you are interested in all things JBoss, you must come to <a href="http://www.redhat.com/summit/" target="" class="regularLink">JBoss World</a> (May 3rd-May6th 2011 in Boston, MA, USA). Sanne and I will be speaking about Hibernate OGM and how to use JPA and store data on Infinispan. More info a bit later (hint, we use Hibernate Search  :)).
</p>

<p class="wikiPara">
If you cannot afford JBoss World (and even if you can), try and come to JUDCon which is the JBoss.org community conference (May 2nd-May3rd 2011 in Boston, MA, USA). Sanne will be speaking about search on Infinispan (hint, he will use Hibernate Search). More info and registration <a href="http://www.jboss.org/events/JUDCon.html" target="" class="regularLink">here</a>.
</p>
</div>

