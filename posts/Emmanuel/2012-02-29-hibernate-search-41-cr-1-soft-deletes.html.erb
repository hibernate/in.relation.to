---
title: "Hibernate Search 4.1 CR1: soft deletes"
author: "Emmanuel Bernard"
blogger_name: "Emmanuel"
creation_date: "29-02-2012"
original_tags: [Hibernate,Hibernate Search]
tags: [Hibernate Search]

relative_url: /2012/02/29/hibernate-search-41-cr-1-soft-deletes
slug: hibernate-search-41-cr-1-soft-deletes
lace: http://in.relation.to/22966.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2012/02/29/hibernate-search-41-cr-1-soft-deletes
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
This release will hopefully be the last before Hibernate Search 4.1 final. If you want to give feedback, 
now is the time :) We are simultaneously releasing Hibernate Search 3.4.2 as a minor bug fix release.
</p>

<p class="wikiPara">
The main improvement in this candidate for release is the ability to intercept indexing operations and change 
them. In the team we nicknamed it the Soft Delete feature even if it can do much more. At first look, it seems 
like a barbarian feature but it enables a lot of interesting use cases.
</p>

<h2 class="wikiHeadline2" id="H-IndexingInterception"><a href="/2012/02/29/hibernate-search-41-cr-1-soft-deletes#H-IndexingInterception">Indexing interception</a></h2>

<p class="wikiPara">
In some situations, you do not want to index all the entities (of a given type). For example, I want my readers 
to search my blog entries only when they are in PUBLISHED state. If they are in DRAFT, they should not appear 
in the results. Of course, to do that you can use a boolean query restriction or even better a declarative 
filter. Nevertheless, these DRAFT blogs are still indexed. The situation is even more critical if the majority of 
your entities should not be searchable. An example is invoices that should not be searchable when put in archive 
mode.
</p>

<p class="wikiPara">
Indexing interception lets you decide if an entity is worthy of being indexed. The big benefits are:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> less work at runtime: no bridge conversion, no analyzer phase, and no writes in the index</li>
<li class="wikiUnorderedListItem"> a smaller and more manageable index: smaller indexes makes faster queries, fit better in memory and are easier to backup and copy</li>
</ul>

<p class="wikiPara">
Alright so how do I do this?
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> write an <tt>EntityIndexingInterceptor</tt>
</li>
<li class="wikiUnorderedListItem"> Mark the entity as being intercepted using <tt>@Indexed.interceptor</tt>
</li>
</ul>

<pre class="wikiPreformatted brush:java">/**
 * Only index blog when it is in published state
 *
 * @author Emmanuel Bernard &lt;emmanuel@hibernate.org&gt;
 */
public class IndexWhenPublishedInterceptor implements EntityIndexingInterceptor&lt;Blog&gt; {
    @Override
    public IndexingOverride onAdd(Blog entity) {
        if (entity.getStatus() == BlogStatus.PUBLISHED) {
            return IndexingOverride.APPLY_DEFAULT;
        }
        return IndexingOverride.SKIP;
    }

    @Override
    public IndexingOverride onUpdate(Blog entity) {
        if (entity.getStatus() == BlogStatus.PUBLISHED) {
            return IndexingOverride.UPDATE;
        }
        return IndexingOverride.REMOVE;
    }

    @Override
    public IndexingOverride onDelete(Blog entity) {
        return IndexingOverride.APPLY_DEFAULT;
    }

    @Override
    public IndexingOverride onCollectionUpdate(Blog entity) {
        return onUpdate(entity);
    }
}
</pre>


<pre class="wikiPreformatted brush:java">@Entity
@Indexed(interceptor=IndexWhenPublishedInterceptor.class)
public class Blog {
    @Id
    @GeneratedValue
    public Integer getId() { return id; }
    public void setId(Integer id) {  this.id = id; }
    private Integer id;

    @Field
    public String getTitle() { return title; }
    public void setTitle(String title) {  this.title = title; }
    private String title;

    public BlogStatus getStatus() { return status; }
    public void setStatus(BlogStatus status) {  this.status = status; }
    private BlogStatus status;

    [...]
}
</pre>


<p class="wikiPara">
If you look at <tt>IndexWhenPublishedInterceptor</tt>, you will see that we only index the entity when it 
is in PUBLISHED state and we skip or remove it from the index otherwise.
</p>

<p class="wikiPara">
This feature is still experimental as we might add more transitions
depending on your feedback.
</p>

<h2 class="wikiHeadline2" id="H-GetTheRelease"><a href="/2012/02/29/hibernate-search-41-cr-1-soft-deletes#H-GetTheRelease">Get the release</a></h2>

<p class="wikiPara">
This release is (hopefully) the last of the 4.1 series before 4.1 final. Try it out:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> <a href="http://hibernate.org/subprojects/search/download" target="" class="regularLink">download the release or get it via Maven</a>
</li>
<li class="wikiUnorderedListItem"> check the user <a href="https://forum.hibernate.org/viewforum.php?f=9" target="" class="regularLink">forums</a>
</li>
<li class="wikiUnorderedListItem"> report issues on <a href="https://hibernate.onjira.com/browse/HSEARCH" target="" class="regularLink">JIRA</a>
</li>
<li class="wikiUnorderedListItem"> get the source on <a href="https://github.com/hibernate/hibernate-search" target="" class="regularLink">GitHub</a>, pull requests welcome :)</li>
</ul>

<h2 class="wikiHeadline2" id="H-HibernateSearch342"><a href="/2012/02/29/hibernate-search-41-cr-1-soft-deletes#H-HibernateSearch342">Hibernate Search 3.4.2</a></h2>

<p class="wikiPara">
This release fixed a few bugs in particular a regression on how collections are indexed. Thanks 
to Guillaume Smet for his work. We encourage users stuck with the 3.4 series to upgrade.
You can get the release on 
<a href="http://sourceforge.net/projects/hibernate/files/hibernate-search/" target="" class="regularLink">SourceForge</a> and it should be available on our Maven repository within the next few hours or days.</p>
</div>

