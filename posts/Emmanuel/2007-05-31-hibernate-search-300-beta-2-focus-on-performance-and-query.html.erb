---
title: "Hibernate Search 3.0.0.Beta2: Focus on performance and query"
author: "Emmanuel Bernard"
blogger_name: "Emmanuel"
creation_date: "31-05-2007"
original_tags: []
tags: [Hibernate ORM]

relative_url: /2007/05/31/hibernate-search-300-beta-2-focus-on-performance-and-query
slug: hibernate-search-300-beta-2-focus-on-performance-and-query
lace: http://in.relation.to/2235.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2007/05/31/hibernate-search-300-beta-2-focus-on-performance-and-query
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
Hibernate Search 3.0.0.Beta2 is out with a bunch of new interesting features:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> shared Lucene IndexReader, significantly increasing the performances especially in read mostly applications</li>
</ul>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> ability to customize the object graph fetching strategy</li>
</ul>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> properties projection from the Lucene index</li>
</ul>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> ability to sort queries (thanks to Hardy Ferentschik)</li>
</ul>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> expose the total number of matching results regardless of pagination</li>
</ul>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> and some other surprises and bug fixes, check <a href="http://opensource.atlassian.com/projects/hibernate/secure/IssueNavigator.jspa?reset=true&amp;pid=10061&amp;fixfor=10683" target="" class="regularLink">the release notes </a> for more info</li>
</ul>

<h2 class="wikiHeadline2" id="H-Performance"><a href="/2007/05/31/hibernate-search-300-beta-2-focus-on-performance-and-query#H-Performance">Performance</a></h2>

<p class="wikiPara">
Hibernate Search can now share <tt>IndexReader</tt>s across queries and threads, making them much more efficient especially on applications where the number of reads is much higher than the number of updates. Opening and warming a Lucene <tt>IndexReader</tt> can be a relatively costly operation compared to a single query. To enable sharing, just add the following property
</p>

<pre class="wikiPreformatted">
hibernate.search.reader.strategy shared
</pre>


<p class="wikiPara">
Object loading has been enhanced as well. You can for example define the exact fetching strategy used to load the expected object graph, pretty much like you would do it in a Criteria or HQL query, allowing per use case optimization.
</p>

<p class="wikiPara">
Some use cases do not mandate a fully loaded object. Hibernate Search now allow properties projection from the Lucene index. At the cost of storing the value in the index, you can now retrieve a specific subset of properties. The behavior is similar to HQL or Criteria query projections.
</p>

<pre class="wikiPreformatted">
fullTextQuery.setIndexProjection( "id", "summary", "body", "mainAuthor.name" ).list();
</pre>


<h2 class="wikiHeadline2" id="H-QueryFlexibility"><a href="/2007/05/31/hibernate-search-300-beta-2-focus-on-performance-and-query#H-QueryFlexibility">Query flexibility</a></h2>
<p class="wikiPara">
I already talked about the customizable fetching strategy and projection.
</p>

<p class="wikiPara">
The default sorting on Hibernate Search queries is per relevance, but you can now customize this strategy and sort per field(s).
</p>

<p class="wikiPara">
Regardless of the pagination process, it is interesting to know the total number of matching elements. While costly in plain SQL, this information is provided out-of-the-box by Apache Lucene. <tt>getResultSize()</tt> is now exposed by the <tt>FullTextQuery</tt>. From this information, you can for example:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> implement the search engine feature '1-10 of about 888,000,000'</li>
</ul>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> implement a fast pagination navigation</li>
</ul>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> implement a multi step search engine (gradually enabling approximations if the restricted query(ies) return no or not enough results)</li>
</ul>


<p class="wikiPara">
For more information, check the <a href="http://opensource.atlassian.com/projects/hibernate/secure/IssueNavigator.jspa?reset=true&amp;pid=10061&amp;fixfor=10683" target="" class="regularLink">the release notes </a> and <a href="http://www.hibernate.org/30.html" target="" class="regularLink">download the bundle </a>. Hibernate Search 3.0.0.Beta2 is compatible with Hibernate Core 3.2.x (from 3.2.2), Hibernate Annotations 3.3.x and Hibernate EntityManaher 3.3.x.
</p>
</div>

