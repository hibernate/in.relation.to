---
title: "Bean Validation Sneak Peek part II: custom constraints"
author: "Emmanuel Bernard"
blogger_name: "Emmanuel"
creation_date: "01-04-2008"
original_tags: [Bean Validation,Bean Validation Sneak Peek]
tags: [Bean Validation,Java EE]

relative_url: /2008/04/01/bean-validation-sneak-peek-part-ii-custom-constraints
slug: bean-validation-sneak-peek-part-ii-custom-constraints
lace: http://in.relation.to/8787.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2008/04/01/bean-validation-sneak-peek-part-ii-custom-constraints
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
This is the second part of a series of blogs about Bean Validation. For a general introduction, <a href="http://in.relation.to/Bloggers/BeanValidationSneakPeekPartI" target="" class="regularLink">read this entry</a> first.
This part focuses on constraint definition.
</p>

<p class="wikiPara">
While Bean Validation will come with a set of predefined basic constraints (like <tt>@NotNull</tt>, <tt>@Length</tt> and so on), a key feature of the specification is its extensibility. Application developers can and are strongly encouraged to write their own custom constraints matching a particular business requirement.
</p>

<h2 class="wikiHeadline2" id="H-WritingACustomConstraint"><a href="/2008/04/01/bean-validation-sneak-peek-part-ii-custom-constraints#H-WritingACustomConstraint">Writing a custom constraint</a></h2>

<p class="wikiPara">
Because writing custom constraints is a core part of the specification goal, great care have been taken to make it as simple as possible. Let's walk through the process of creating a custom constraint.
</p>

<p class="wikiPara">
As we have seen in the <a href="http://in.relation.to/Bloggers/BeanValidationSneakPeekPartI" target="" class="regularLink">previous blog entry</a>, a constraint is composed of
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> an annotation</li>
<li class="wikiUnorderedListItem"> an implementation</li>
</ul>

<h3 class="wikiHeadline3" id="H-ConstraintAnnotation"><a href="/2008/04/01/bean-validation-sneak-peek-part-ii-custom-constraints#H-ConstraintAnnotation">Constraint annotation</a></h3>
<p class="wikiPara">
Every constraint is associated to an annotation. You can see it as a type safe alias and a descriptor. Constraint annotations can also hold one or several parameters that will help customize the behavior at declaration time
</p>

<pre class="wikiPreformatted">public class Order {
    @NotNull @OrderNumber private String number;
    @Range(min=0) private BigDecimal totalPrice;
    ...
}</pre>


<p class="wikiPara">
Let's have a look at the <tt>@OrderNumber</tt> annotation definition
</p>

<pre class="wikiPreformatted">@Target({METHOD, FIELD})
@Retention(RUNTIME)
@ConstraintValidator(OrderNumberValidator.class)
public @interface OrderNumber {
    String message() default "{error.orderNumber}"; 
    String[] groups() default {}; 
}
</pre>


<p class="wikiPara">
Constraint annotations are just regular annotations with a few extra things:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> they must use the runtime retention policy: the bean validation provider will inspect your objects at runtime</li>
<li class="wikiUnorderedListItem"> they must be annotated with <tt>@ConstraintValidator</tt>
</li>
<li class="wikiUnorderedListItem"> they must have a <tt>message</tt> attribute</li>
<li class="wikiUnorderedListItem"> they must have a <tt>groups</tt> attribute</li>
</ul>

<p class="wikiPara">
The <tt>@ConstraintValidator</tt> indicates to the bean validation provider that an annotation is a constraint annotation. It also points to the constraint validation implementation routine (we will describe that in a minute).
</p>

<p class="wikiPara">
The <tt>message</tt> attribute (which generally is defaulted to a key) provides the ability for a constraint declaration to override the default message returned in the constraint error list. We will cover this particular topic in a later post.
</p>

<p class="wikiPara">
<tt>groups</tt> lets a constraint declaration define the subset of constraints it participates to. Groups enable partial validation and ordered validation. We will cover this particular topic in a later post.
</p>

<p class="wikiPara">
In addition to these mandatory attributes, an annotation can define any additional element to parameterize the constraint logic. The set of parameters is passed to the constraint implementation. For example, a <tt>@Range</tt> annotation needs <tt>min</tt> and <tt>max</tt> attributes.
</p>

<pre class="wikiPreformatted">@Target({METHOD, FIELD})
@Retention(RUNTIME)
@ConstraintValidator(RangeValidator.class)
public @interface Range {
        long max() default Long.MAX_VALUE;

        long min() default Long.MIN_VALUE;

        String message() default "{error.range}";
        String[] groups() default {}; 
}</pre>


<p class="wikiPara">
Now that we have a way to express a constraint and its parameters, we need to provide the logic to validate the constraint.
</p>

<h3 class="wikiHeadline3" id="H-ConstraintImplementation"><a href="/2008/04/01/bean-validation-sneak-peek-part-ii-custom-constraints#H-ConstraintImplementation">Constraint implementation</a></h3>

<p class="wikiPara">
The constraint implementation is associated to its annotation through the use of <tt>@ConstraintValidator</tt>. In the first early draft, <tt>@ValidatorClass</tt> is sometimes used in lieu of <tt>@ConstraintValidator</tt>: this is a mistake driven by a last minute change, sorry. The implementation must implement a very simple interface <tt>Constraint&lt;A extends Annotation&gt;</tt> where <tt>A</tt> is the targeted constraint annotation
</p>

<pre class="wikiPreformatted">public class OrderNumberValidator implements Constraint&lt;OrderNumber&gt; {
        public void initialize(OrderNumber constraintAnnotation) {
                //no initialization needed
        }

        /**
         * Order number are of the form Nnnn-nnn-nnn when n is a digit
         * The sum of each nnn numbers must be a multiple of 3
         */
        public boolean isValid(Object object) {
                if ( object == null) return true;
                if ( ! (object instanceof String) )
                        throw new IllegalArgumentException("@OrderNumber only applies to String");
                String orderNumber = (String) object;
                if ( orderNumber.length() != 12 ) return false;
                if ( orderNumber.charAt( 0 ) != 'N'
                                || orderNumber.charAt( 4 ) != '-'
                                || orderNumber.charAt( 8 ) != '-'
                                ) return false;
                try {
                        long result = Integer.parseInt( orderNumber.substring( 1, 4 ) )
                                        + Integer.parseInt( orderNumber.substring( 5, 8 ) )
                                        + Integer.parseInt( orderNumber.substring( 9, 12 ) );
                        return result % 3 == 0;
                }
                catch (NumberFormatException nfe) {
                        return false;
                }
        }
}</pre>


<p class="wikiPara">
The <tt>initialize</tt> method receives the constraint annotation as a parameter. This method typically does:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> prepare parameters for the <tt>isValid</tt> method</li>
<li class="wikiUnorderedListItem"> acquire external resources if needed</li>
</ul>

<p class="wikiPara">
As you can see the interface entirely focuses on validation and leaves other concerns such as error rendering to the bean validation provider.
</p>

<p class="wikiPara">
<tt>isValid</tt> is responsible for validating a value. A few interesting things can be noted:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> <tt>isValid</tt> must support concurrent calls</li>
<li class="wikiUnorderedListItem"> exceptions should be raised when the object type received does not match the validation implementation expectations</li>
<li class="wikiUnorderedListItem"> the null value is not considered invalid: the specification recommends to split the core constraint validation from the not-null constraint validation and use <tt>@NotNull</tt> if the property must not be null</li>
</ul>

<p class="wikiPara">
This easily customizable approach gives application programmers the freedom they need to express constraints and validate them.
</p>

<h3 class="wikiHeadline3" id="H-ApplyingTheSameConstraintTypeMultipleTimes"><a href="/2008/04/01/bean-validation-sneak-peek-part-ii-custom-constraints#H-ApplyingTheSameConstraintTypeMultipleTimes">Applying the same constraint type multiple times</a></h3>

<p class="wikiPara">
Especially when using <tt>groups</tt>, you will sometimes need to apply the same type of constraint multiple times on the same element. The Bean Validation specification takes into account annotations containing an array of constraint annotations:
</p>

<pre class="wikiPreformatted">@Target({METHOD, FIELD})
@Retention(RUNTIME)
public @interface Patterns {
        Pattern[] value();
}

@ConstraintValidator(PatternValidator.class)
@Target({METHOD, FIELD})
@Retention(RUNTIME)
public @interface Pattern {
        /** regular expression */
        String regex();

        /** regular expression processing flags */
        int flags() default 0;

        String message() default "{validator.pattern}";
        
        String[] groups() default {};
}
</pre>


<p class="wikiPara">
In this example, you can apply multiple patterns on the same property
</p>

<pre class="wikiPreformatted">public class Engine {
        @Patterns( {
            @Pattern(regex = "^[A-Z0-9-]+$", message = "must contain alphabetical characters only"),
            @Pattern(regex = "^....-....-....$", message="must match ....-....-....")
                        } )
        private String serialNumber;
        ...</pre>


<h3 class="wikiHeadline3" id="H-BuildingConstraints"><a href="/2008/04/01/bean-validation-sneak-peek-part-ii-custom-constraints#H-BuildingConstraints">Building constraints</a></h3>

<p class="wikiPara">
By default, Bean Validation providers instantiate constraint validation implementations using a no-arg constructor. However, the specification offers an extension point to delegate the instantiation process to a dependency management library such as Web Beans, Guice, Spring, JBoss Seam or even the JBoss Microcontainer. 
</p>

<p class="wikiPara">
Depending on the capacity of the dependency management tool, we expect validation implementations to be able to receive injected resources if needed: this mechanism will be entirely dependent on the dependency management tool.
</p>

<h2 class="wikiHeadline2" id="H-ClasslevelConstraints"><a href="/2008/04/01/bean-validation-sneak-peek-part-ii-custom-constraints#H-ClasslevelConstraints">Class-level constraints</a></h2>

<p class="wikiPara">
Some of you have expressed concerns about the ability to apply a constraint spanning multiple properties, or to express constraint which depend on several properties. The classical example is address validation. Addresses have intricate rules:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> a street name is somewhat standard and must certainly have a length limit</li>
<li class="wikiUnorderedListItem"> the zip code structure entirely depends on the country</li>
<li class="wikiUnorderedListItem"> the city can often be correlated to a zipcode and some error checking can be done (provided that a validation service is accessible)</li>
<li class="wikiUnorderedListItem"> because of these interdependencies a simple property level constraint does to fit the bill</li>
</ul>

<p class="wikiPara">
The solution offered by the Bean Validation specification is two-fold:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> it offers the ability to force a set of constraints to be applied before an other set of constraints through the use of groups and group sequences. This subject will be covered in the next blog entry</li>
<li class="wikiUnorderedListItem"> it allows to define class level constraints</li>
</ul>

<p class="wikiPara">
Class level constraints are regular constraints (annotation / implementation duo) which apply on a class rather than a property. Said differently, class-level constraints receive the object instance (rather than the property value) in <tt>isValid</tt>.
</p>

<pre class="wikiPreformatted">@Address 
public class Address {
    @NotNull @Max(50) private String street1;
    @Max(50) private String street2;
    @Max(10) @NotNull private String zipCode;
    @Max(20) @NotNull String city;
    @NotNull private Country country;
    
    ...
}</pre>


<pre class="wikiPreformatted">@ConstraintValidator(MultiCountryAddressValidator.class)
@Target(TYPE)
@Retention(RUNTIME)
public @interface Address {
    String message() default "{error.address}";
    String[] groups() default {};
}</pre>


<pre class="wikiPreformatted">public class MultiCountryAddressValidator implements Constraint&lt;Address&gt; {
        public void initialize(Address constraintAnnotation) {
                //initialize the zipcode/city/country correlation service
        }

        /**
         * Validate zipcode and city depending on the country
         */
        public boolean isValid(Object object) {
                if ( ! (object instanceof Address) )
                        throw new IllegalArgumentException("@Address only applies to Address");
                Address address = (Address) object;
                Country country = address.getCountry();
                if ( country.getISO2() == "FR" ) {
                    //check address.getZipCode() structure for France (5 numbers)
                    //check zipcode and city correlation (calling an external service?)
                    return isValid;
                }
                else if ( country.getISO2() == "GR" ) {
                    //check address.getZipCode() structure for Greece
                    //no zipcode / city correlation available at the moment
                    return isValid;
                }
                ...
        }
}</pre>


<p class="wikiPara">
The advanced address validation rules have been left out of the address object and implemented by <tt>MultiCountryAddressValidator</tt>. By accessing the object instance, class level constraints have a lot of flexibility and can validate multiple correlated properties. Note that ordering is left out of the equation here, we will come back to it in the next post.
</p>

<p class="wikiPara">
The expert group has discussed various multiple properties support approaches: we think the class level constraint approach provides both enough simplicity and flexibility compared to other property level approaches involving dependencies. Your feedback is welcome.
</p>

<h2 class="wikiHeadline2" id="H-Conclusion"><a href="/2008/04/01/bean-validation-sneak-peek-part-ii-custom-constraints#H-Conclusion">Conclusion</a></h2>

<p class="wikiPara">
Custom constraints are at the heart of JSR 303 Bean Validation flexibility. It should not be considered awkward to write a custom constraint:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> the validation routine captures the exact validation semantic you expect</li>
<li class="wikiUnorderedListItem"> a carefully chosen annotation name will make constraints extremely readable in the code</li>
</ul>

<p class="wikiPara">
Please let us know what you think <a href="http://forum.hibernate.org/viewforum.php?f=26" target="" class="regularLink">here</a>. You can download the full specification draft <a href="http://jcp.org/en/jsr/detail?id=303" target="" class="regularLink">there</a>. The next blog entry will cover groups, constraints subsets and validation ordering.</p>
</div>

