---
title: "Why can I call Bean Validation when I remove an entity in JPA 2?"
author: "Emmanuel Bernard"
blogger_name: "Emmanuel"
creation_date: "03-03-2010"
original_tags: [Bean Validation]
tags: [Bean Validation]

relative_url: /2010/03/03/why-can-i-call-bean-validation-when-i-remove-an-entity-in-jpa-2
slug: why-can-i-call-bean-validation-when-i-remove-an-entity-in-jpa-2
lace: http://in.relation.to/14611.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2010/03/03/why-can-i-call-bean-validation-when-i-remove-an-entity-in-jpa-2
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
Antonio has written a <a href="http://agoncal.wordpress.com/2010/03/03/bean-validation-with-jpa-1-0/" target="" class="regularLink">nice article</a> on how to use Bean Validation and Hibernate Validator 4.0 in JPA 1.0 and Hibernate 3.3 (by retrofitting what's happening automatically in JPA 2.0). He asked an interesting question at the end of his post. 
</p>

<p class="wikiPara">
While he understands the benefit of JPA 2.0 calling Bean Validation on entity creation or update, he is wondering about the use case driving the ability to trigger validation when an entity is removed.
</p>

<p class="wikiPara">
The feature was not in initially but a user came with an interesting use case during the review process: 
</p>

<blockquote class="wikiBlockquote">
I want to be sure an order is paid before deleting it from the system. If it's not paid, I am not legally allowed to remove it.
</blockquote>

<p class="wikiPara">
Here is the solution:
</p>

<pre class="wikiPreformatted">@Entity class Order {
   @Id @GeneratedValue public Integer getId() { return id; }
   public void setId(Integer id) { this.id = id; }
   private Integer id;

   @AssertTrue(groups=LegallyRemovable.class) public boolean isPaid() { return paid; }
   public void setPaid(boolean paid) { this.paid = paid; }
   private boolean paid;

   [...]
}

&lt;persistence-unit name="OrderManagement"&gt;
  &lt;properties&gt;
    &lt;property name="javax.persistence.validation.group.pre-remove"&gt;com.acme.app.groups.LegallyRemovable&lt;/property&gt;
  &lt;/properties&gt;
&lt;/persistence-unit&gt;
</pre>

<p class="wikiPara">
The application will likely do something like that at the service layer:
</p>

<pre class="wikiPreformatted">if ( validator.validate(order, LegallyRemovable.class).size() &gt; 0 ) {
  throw BusinessException(...);
}</pre>

<p class="wikiPara">
But if for some reason a developper forgets to do it or an order is deleted by cascade, the JPA 2 validation layer will be here to save you.
</p>

<p class="wikiPara">
Note that by default, no group is validated when entities are removed which makes sense for 99% of the use cases out there.</p>
</div>

