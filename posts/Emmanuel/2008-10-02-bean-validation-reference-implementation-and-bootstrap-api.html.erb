---
title: "Bean Validation reference implementation and Bootstrap API"
author: "Emmanuel Bernard"
blogger_name: "Emmanuel"
creation_date: "02-10-2008"
original_tags: [Bean Validation]
tags: [Bean Validation]

relative_url: /2008/10/02/bean-validation-reference-implementation-and-bootstrap-api
slug: bean-validation-reference-implementation-and-bootstrap-api
lace: http://in.relation.to/9497.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2008/10/02/bean-validation-reference-implementation-and-bootstrap-api
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
We have been recently working a lot on the Bean Validation spec (JSR 303) and have two good news for you:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> the bootstrap API proposal is out</li>
<li class="wikiUnorderedListItem"> the reference implementation is available too (end of this blog)</li>
</ul>

<p class="wikiPara">
Please have a look at both and give us <a href="http://forum.hibernate.org/viewforum.php?f=26" target="" class="regularLink">feedbacks</a>. It is still time to make it better ;)
</p>

<h1 class="wikiHeadline1" id="H-BootstrapAPI"><a href="/2008/10/02/bean-validation-reference-implementation-and-bootstrap-api#H-BootstrapAPI">Bootstrap API</a></h1>

<p class="wikiPara">
The primary goal of the bootstrap API is trivial. Provide access to a <tt>ValidatorFactory</tt> capable of building <tt>Validator</tt> instances. These validator instances are then used to validate the domain model.
</p>

<p class="wikiPara">
Some additional goals have been pursued as well:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> simple to use</li>
<li class="wikiUnorderedListItem"> type safe</li>
<li class="wikiUnorderedListItem"> extensible and flexible to the container environment (Java EE, Java SE, dependency injection framework, OSGi-esque containers and so on)</li>
<li class="wikiUnorderedListItem"> support multiple implementations</li>
</ul>

<h2 class="wikiHeadline2" id="H-Examples"><a href="/2008/10/02/bean-validation-reference-implementation-and-bootstrap-api#H-Examples">Examples</a></h2>

<p class="wikiPara">
The best way to learn an API is to see it in action.
</p>

<h3 class="wikiHeadline3" id="H-EverydayBootstrap"><a href="/2008/10/02/bean-validation-reference-implementation-and-bootstrap-api#H-EverydayBootstrap">Everyday bootstrap</a></h3>

<p class="wikiPara">
The first example shows the most simple way and also the most common.
</p>

<pre class="wikiPreformatted">ValidatorFactory factory = Validation.getValidatorBuilder().build();

//cache the factory somewhere
Validator&lt;Address&gt; addressValidator = factory.getValidator(Address.class);</pre>


<p class="wikiPara">
This creates a thread-safe <tt>ValidatorFactory</tt> object that should be cached. In this example, the default Bean Validation provider is used unless an explicit provider implementation is defined in the Bean Validation XML configuration file.
</p>

<h3 class="wikiHeadline3" id="H-ContainerDrivenBootstrap"><a href="/2008/10/02/bean-validation-reference-implementation-and-bootstrap-api#H-ContainerDrivenBootstrap">Container driven bootstrap</a></h3>

<p class="wikiPara">
The second example refines some of the configuration elements.
</p>

<pre class="wikiPreformatted">ValidatorFactory factory = Validation
       .getValidatorBuilder()
          .messageResolver( new WebBeansMessageResolver() )
          .constraintFactory( new WebBeansComponentConstraintFactory() )
          .build();

//cache the factory somewhere
Validator&lt;Address&gt; addressValidator = factory.getValidator(Address.class);
</pre>


<p class="wikiPara">
This example shows a typical bootstrap in a container. The container has the ability to refined the message resolution strategy to adhere it standards. In the case of Web Bean, one can imagine the message resolver to resolve contextual components and EL expressions.
</p>

<p class="wikiPara">
A container is also responsible for the lifecycle of its components. A custom contraint implementation factory can be provided. It will be responsible for instantiating constraint implementations. In the case of Web Beans, one can imagine a constraint factory properly injecting components inside the constraint implementation.
</p>

<p class="wikiPara">
Some containers change the standard Java rules when it comes to classloader and resource discovery. It can make Bean Validation provider discovery challenging in such environments. To work around this problem, the specification lets a container override the provider resolution strategy. This strategy can be injected at bootstrap time.
</p>

<pre class="wikiPreformatted">//OSGi environment is picky when it comes to class loaders.
ValidatorFactory factory = Validation
       .defineBootstrapState()
          .providerResolver( new OSGiServiceDiscoverer() )
          .build();

//cache the factory somewhere
Validator&lt;Address&gt; addressValidator = factory.getValidator(Address.class);
</pre>


<p class="wikiPara">
<tt>OSGIServiceDiscoverer</tt> has the knowledge of the OSGi isolation rules and can resolve the list of available providers accordingly.
</p>

<h3 class="wikiHeadline3" id="H-SpecificProviderBootstrap"><a href="/2008/10/02/bean-validation-reference-implementation-and-bootstrap-api#H-SpecificProviderBootstrap">Specific provider bootstrap</a></h3>
<p class="wikiPara">
The third example shows how to select a specific provider programmatically. Each provider is uniquely identified by a sub interface of <tt>ValidatorBuilder</tt>. Hibernate Validator for example provides <tt>org.hibernate.validator.HibernateValidatorBuilder</tt>.
</p>

<pre class="wikiPreformatted">//get Hibernate Validator provider
ValidatorFactory factory = Validation
       .builderType( HibernateValidatorBuilder.class )
       .getValidatorBuilder()
       .build();

//cache the factory somewhere
Validator&lt;Address&gt; addressValidator = factory.getValidator(Address.class);</pre>


<p class="wikiPara">
Using a specific sub interface of <tt>ValidatorBuilder</tt> as unique identifier has an other advantage. This sub interface can host provider specific configuration and still be called in a type safe way.
</p>

<pre class="wikiPreformatted">
HibernateValidatorBuilder hibernateBuilder = Validation
       .builderType( HibernateValidatorBuilder.class )
       .getValidatorBuilder();

ValidatorFactory factory = hibernateBuilder
          .messageResolver( new ContainerMessageResolver() ) //default configuration option
          .disableDDLAlteration()
          .enableConstraintHotRedeploy()
          .build();</pre>


<p class="wikiPara">
Or written in a more compact way
</p>

<pre class="wikiPreformatted">ValidatorFactory factory = Validation
       .builderType( HibernateValidatorBuilder.class )
       .getValidatorBuilder()
               .messageResolver( new ContainerMessageResolver() )
               .disableDDLAlteration()
               .enableConstraintHotRedeploy()
               .build();
</pre>

<p class="wikiPara">
Where <tt>HibernateValidatorBuilder</tt> looks like:
</p>

<pre class="wikiPreformatted">public interface HibernateValidatorBuilder extends ValidatorBuilder&lt;HibernateValidatorBuilder&gt; {
    HibernateValidatorBuilder disableDDLAlteration();
    HibernateValidatorBuilder enableconstraintHotRedeploy();
}
</pre>


<p class="wikiPara">
Note that nowhere we needed to down cast objects!
</p>

<h2 class="wikiHeadline2" id="H-MainAPIs"><a href="/2008/10/02/bean-validation-reference-implementation-and-bootstrap-api#H-MainAPIs">Main APIs</a></h2>
<p class="wikiPara">
The main artifacts involved in the bootstrap process are:
</p>

<p class="wikiPara">
<tt>Validation</tt>: API entry point. Lets you optionally define the Bean Validation provider targeted as well as a provider resolution strategy. <tt>Validation</tt> generates <tt>ValidatorBuilder</tt> objects and can bootstrap any provider implementation.
</p>

<p class="wikiPara">
<tt>ValidationProvider</tt>: contract between the bootstrap procedure and a Bean Validation provider implementation.
</p>

<p class="wikiPara">
<tt>ValidationProviderResolver</tt>: returns a list of all Bean Validation providers available in the execution context (generally the classpath).
</p>

<p class="wikiPara">
<tt>ValidatorBuilder</tt>: collects the configuration details that will be used to build <tt>ValidatorFactory</tt>. A specific sub interface of <tt>ValidatorBuilder</tt> must be provided by Bean Validation providers as a unique identifier. This sub interface typically hosts provider specific configurations.
</p>

<p class="wikiPara">
<tt>ValidatorFactory</tt>: result of the bootstrap process. Build <tt>Validator</tt> instances from a given Bean Validation provider. This object is thread-safe.
</p>

<h1 class="wikiHeadline1" id="H-Specification"><a href="/2008/10/02/bean-validation-reference-implementation-and-bootstrap-api#H-Specification">Specification</a></h1>
<p class="wikiPara">
The bits of specification describing the bootstrap process is available <a href="#bean-validation-reference-implementation-and-bootstrap-api_attachment1" target="" class="regularLink">here[1]</a> and the APIs are available as part of the reference implementation.
Please provide feedback either to our <a href="http://forum.hibernate.org/viewforum.php?f=26" target="" class="regularLink">forum</a> or in the <a href="http://opensource.atlassian.com/projects/hibernate/browse/BVAL" target="" class="regularLink">JIRA issue tracker project</a> component spec-general.
</p>

<h1 class="wikiHeadline1" id="H-ReferenceImplementation"><a href="/2008/10/02/bean-validation-reference-implementation-and-bootstrap-api#H-ReferenceImplementation">Reference implementation</a></h1>
<p class="wikiPara">
The reference implementation is available <a href="http://anonsvn.jboss.org/repos/hibernate/validator/trunk/" target="" class="regularLink">in SVN</a>. Simply do </p>
<pre class="wikiPreformatted">svn checkout http://anonsvn.jboss.org/repos/hibernate/validator/trunk/ ri</pre>
 to check it out so to speak. The spec is comprised of the validation API and the actual reference implementation. Both projects are Maven projects. They are distributed under the Apache Software License 2.0. 


<p class="wikiPara">
Many thanks to Hardy for taking over my bits and pieces of prototype, todos and complaints and make it an actual project. Hardy will probably write a blog entry sometimes in the future about the RI architecture.
</p>

<p class="wikiPara">
You can provide feedback to our <a href="http://forum.hibernate.org/viewforum.php?f=26" target="" class="regularLink">forum</a>. If you have suggestions or bug reports, a <a href="http://opensource.atlassian.com/projects/hibernate/browse/BVAL" target="" class="regularLink">JIRA issue tracker project</a> has also been created.
</p>

<p class="wikiPara">
It is still a work in progress but is good enough to start playing with it. Most of the ideas behind the spec are already present, so have a look!</p>
</div>

<div class="attachments">
<h4>Attachments</h4>
<ol class="wikiOrderedList"><li class="wikiOrderedListItem"><a name="bean-validation-reference-implementation-and-bootstrap-api_attachment1" href="/assets/Bootstrap-20081002.pdf">Bootstrap-20081002.pdf</a></li>
</ol>
</div>

