---
title: "What you did not see at the JBoss World 2011 keynote demo"
author: "Sanne Grinovero"
blogger_name: "Sanne"
creation_date: "15-06-2011"
original_tags: [Hibernate,Hibernate OGM,Hibernate Search,OGM,jbw2011keynote,jbwkeynote2011]
tags: [Event,Hibernate OGM,Hibernate Search,Java EE]

relative_url: /2011/06/15/what-you-did-not-see-at-thejboss-world-2011-keynote-demo
slug: what-you-did-not-see-at-thejboss-world-2011-keynote-demo
lace: http://in.relation.to/20826.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2011/06/15/what-you-did-not-see-at-thejboss-world-2011-keynote-demo
---
<div id="documentDisplay" class="documentDisplay">


<div><img align="right" hspace="25" src="http://1.bp.blogspot.com/-BU_Th8gwcGQ/Te_F39JVgLI/AAAAAAAABfg/lFNL0VBpmIw/s320/Screen+shot+2011-06-08+at+19.55.50.png"></div>
<p class="wikiPara">
Visualizing data structures is not easy, and I'm confident that a great deal of success of the exceptionally well received demo we presented at the <a href="http://www.jboss.org/jbw2011keynote.html" target="" class="regularLink">JBoss World 2011 keynote</a> originated from the nice web UIs projected on the multiple big screens. These web applications were effectively visualizing the tweets flowing, the voted hashtags highlighted in the tagcloud, and the animated Infinispan grid while the nodes were dancing on an ideal hashweel visualizing the data distribution among the nodes.
</p>

<p class="wikiPara">
So I bet that everybody in the room got a clear picture of the fact that the data was stored in Infinispan, and by live unplugging a random server everybody could see the data reorganize itself, making it seem a simple and natural way to process huge amounts of data. Not all technical details were explained, so in this and the following post we're going to detail what you did <i class="wikiEmphasis">not</i> see: how was the data stored, how could Drools filter the data, how could all visualizations load the grid stored data, and still be developed in record time?
</p>

<h1 class="wikiHeadline1" id="H-JPAOnAGrid"><a href="/2011/06/15/what-you-did-not-see-at-thejboss-world-2011-keynote-demo#H-JPAOnAGrid">JPA on a Grid</a></h1>

<p class="wikiPara">
All those applications were simply using JPA: Java Persistence API. Think about the name: it's clearly meant to address all persistence needs of Java applications; in fact while it's traditionally associated with JDBC databases, we have just shown it's not necessarily limited to those databases: our applications were running an early preview of the Hibernate Object/Grid Mapper: <a href="http://community.jboss.org/wiki/OverviewOfHibernateOGM" target="" class="regularLink">Hibernate OGM</a>, and the simple JPA model was mapped to Infinispan, a key/value store.
</p>

<h1 class="wikiHeadline1" id="H-CollectingRequirements"><a href="/2011/06/15/what-you-did-not-see-at-thejboss-world-2011-keynote-demo#H-CollectingRequirements">Collecting requirements</a></h1>

<p class="wikiPara">
The initial plan didn't include Hibernate OGM, as it was very experimental yet, it was never released nor even tagged before, but it was clear that we wanted to use Infinispan: to store and to search the tweets. Kevin Conner was the architect envisioning the technical needs, who managed to push each involved developer to do its part, and finally assembled it all into a working application in record time; so he came to Emmanuel and me with a simple list of requirements:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem">we want to showcase Infinispan</li>
<li class="wikiUnorderedListItem">we want to store Tweets, many of them, in real time coming in from a live stream from Twitter</li>
<li class="wikiUnorderedListItem">we need to be able to iterate them all in time order, to rollback the stream and re-process it again (as you can see in the demo recording, we had a fake cheater and want to apply stricter rules to filter out invalid tweets at a second stage, without loosing the originally collected tweets).</li>
<li class="wikiUnorderedListItem">we need to know which projects are voted the most: people are going to express preferences via hashtags in their tweets</li>
<li class="wikiUnorderedListItem">we want to know who's voting the most</li>
<li class="wikiUnorderedListItem">it has to perform well, potentially on a big set of data</li>
</ul>

<h1 class="wikiHeadline1" id="H-UsingLucene"><a href="/2011/06/15/what-you-did-not-see-at-thejboss-world-2011-keynote-demo#H-UsingLucene">Using Lucene</a></h1>

<p class="wikiPara">
So, to implement these search requirements, you have to consider that being Infinispan a key/value store, performing queries is not as natural as you would do on a database. Infinispan currently provides two main approaches: to use the <a href="http://community.jboss.org/wiki/QueryingInfinispan" target="" class="regularLink">Query module</a> or to define some simple <a href="http://community.jboss.org/wiki/InfinispanDistributedExecutionFramework" target="" class="regularLink">Map/Reduce tasks</a>.
</p>

<p class="wikiPara">
Also, consider those requirements. Using SQL, how were we going to count all tweets containing a specific hashtag, extract this count for all collected hashtags, and sort them by frequency? On a relational database, that would have been a very inefficient query which involves at least a full table scan, possibly a scan per hashtag, and it would have required a prior list of hashtags to look for. We wanted to extract the most frequently mentioned tags, we didn't really know what to look for as people were free to vote for anything.
</p>

<p class="wikiPara">
A totally different approach is to use an inverted index: every time you save a tweet, you tokenize it, extract all terms and so keep a list of terms with pointers to the containing tweets, and store the frequency as well. That's exactly how full-text search engines like Lucene work; in addition to that Lucene is able to apply state-of-the-art optimizations, caches and filtering capabilities. Both our Infinispan Query and <a href="http://www.hibernate.org/subprojects/search.html" target="" class="regularLink">Hibernate Search</a> provide nice and easy integrations with Lucene (they actually share the same engine, one geared towards Infinispan users and one to Hibernate and JPA users).
</p>

<p class="wikiPara">
To count for who voted the most is a problem which is technically comparable to counting for term frequencies, so again Lucene would be perfect. Sorting all data on a timestamp is not a good reason to introduce Lucene, but still it's able to do that pretty well too, so Lucene would indeed solve all query needs for this application.
</p>

<h1 class="wikiHeadline1" id="H-HibernateOGMWithHibernateSearch"><a href="/2011/06/15/what-you-did-not-see-at-thejboss-world-2011-keynote-demo#H-HibernateOGMWithHibernateSearch">Hibernate OGM with Hibernate Search</a></h1>

<p class="wikiPara">
So Infinispan Query could have been a good choice. But we opted for Hibernate OGM with Search as they would provide the same indexing features, but on top of that using a nice JPA interface. Also I have to admit that Hibernate OGM was initially discarded as it was lacking an HQL query parser: my fault, being late with implementing it, but in this case it was not a problem as all queries we needed were better solved using the full text queries, which are not defined via HQL.
</p>

<h2 class="wikiHeadline2" id="H-Model"><a href="/2011/06/15/what-you-did-not-see-at-thejboss-world-2011-keynote-demo#H-Model">Model</a></h2>

<p class="wikiPara">
So how does our model look like? Very simple, it's a single JPA entity, enhanced with some Hibernate Search annotations.
</p>

<pre class="wikiPreformatted">
@Indexed(index = "tweets")
@Analyzer(definition = "english")
@AnalyzerDef(name = "english",
	tokenizer = @TokenizerDef(factory = StandardTokenizerFactory.class),
	filters = {
		@TokenFilterDef(factory = ASCIIFoldingFilterFactory.class),
		@TokenFilterDef(factory = LowerCaseFilterFactory.class),
		@TokenFilterDef(factory = StopFilterFactory.class, params = {
				@Parameter(name = "words", value = "stoplist.properties"),
				@Parameter(name = "resource_charset", value = "UTF-8"),
				@Parameter(name = "ignoreCase", value = "true")
		})
})
@Entity
public class Tweet {
	
	private String id;
	private String message = "";
	private String sender = "";
	private long timestamp = 0L;
	
	public Tweet() {}
	
	public Tweet(String message, String sender, long timestamp) {
		this.message = message;
		this.sender = sender;
		this.timestamp = timestamp;
	}

	@Id
	@GeneratedValue(generator = "uuid")
	@GenericGenerator(name = "uuid", strategy = "uuid2")
	public String getId() { return id; }
	public void setId(String id) { this.id = id; }

	@Field
	public String getMessage() { return message; }
	public void setMessage(String message) { this.message = message; }

	@Field(index=Index.UN_TOKENIZED)
	public String getSender() { return sender; }
	public void setSender(String sender) { this.sender = sender; }

	@Field
	@NumericField
	public long getTimestamp() { return timestamp; }
	public void setTimestamp(long timestamp) { this.timestamp = timestamp; }

}
</pre>

<p class="wikiPara">
Note the <i class="wikiEmphasis">uuid</i> generator for the identifier: that's currently the most efficient one to use in a distributed environment.
On top of the standard <i class="wikiEmphasis">@Entity</i>, <i class="wikiEmphasis">@Indexed</i> enables the Lucene indexing engine, the <i class="wikiEmphasis">@AnalyzerDef</i> and <i class="wikiEmphasis">Analyzer</i> specifies the text cleanup we want to apply to the indexed tweets, <i class="wikiEmphasis">@Field</i> selects the property to be indexed, <i class="wikiEmphasis">@NumericField</i> makes sure the numeric sort will be performed efficiently treating the indexed value really as a number and not as an additional keyword: always remember that Lucene is focused on natural language matching.
</p>

<h2 class="wikiHeadline2" id="H-ExampleQueries"><a href="/2011/06/15/what-you-did-not-see-at-thejboss-world-2011-keynote-demo#H-ExampleQueries">Example queries</a></h2>

<p class="wikiPara">
This is going to look like a bit verbose as I'm expanding all functions for clarity:
</p>

<pre class="wikiPreformatted">
public List&lt;Tweet&gt; allTweetsSortedByTime() {

	//this is needed only once but we want to show it in this context:
	QueryBuilder queryBuilder = fullTextEntityManager.getSearchFactory().buildQueryBuilder().forEntity( Tweet.class ).get();

	//Define a Lucene query which is going to return all tweets:
	Query query = queryBuilder.all().createQuery();

	//Make a JPA Query out of it:
	FullTextQuery fullTextQuery = fullTextEntityManager.createFullTextQuery( query );

	//Currently needed to have Hibernate Search work with OGM:
	fullTextQuery.initializeObjectsWith( ObjectLookupMethod.PERSISTENCE_CONTEXT, DatabaseRetrievalMethod.FIND_BY_ID );

	//Specify the desired sort:
	fullTextQuery.setSort( new Sort( new SortField( "timestamp", SortField.LONG ) ) );

	//Run the query (or alternatively open a scrollable result):
	return fullTextQuery.getResultList();
}
</pre>


<h2 class="wikiHeadline2" id="H-DownloadIt"><a href="/2011/06/15/what-you-did-not-see-at-thejboss-world-2011-keynote-demo#H-DownloadIt">Download it</a></h2>

<p class="wikiPara">
To see the full example, I pushed a complete Maven project to github. It includes a test of all queries and all project details needed to get it running, such as Infinispan and JGroups configurations, the persistence.xml needed to enable HibernateOGM.
</p>

<p class="wikiPara">
Please clone it to start playing with OGM:
<a href="https://github.com/Sanne/tweets-ogm" target="" class="regularLink">https://github.com/Sanne/tweets-ogm</a>
</p>

<p class="wikiPara">
And see you on <a href="http://hibernate.org/community/irc" target="" class="regularLink">IRC</a>, the <a href="https://forum.hibernate.org/viewforum.php?f=9" target="" class="regularLink">Hibernate Search forums</a>, or the brand new <a href="https://forum.hibernate.org/viewforum.php?f=31" target="" class="regularLink">Hibernate OGM forums</a> for any clarification.
</p>


<h2 class="wikiHeadline2" id="H-HowAreEntitiesPersistedInTheGrid"><a href="/2011/06/15/what-you-did-not-see-at-thejboss-world-2011-keynote-demo#H-HowAreEntitiesPersistedInTheGrid">How are entities persisted in the grid?</a></h2>

<p class="wikiPara">
Emmanuel is going to blog about that soon, keep an eye on the blog!
<i class="wikiEmphasis">Update: <a href="http://in.relation.to/Bloggers/HibernateOGMBirthAnnouncement" target="" class="regularLink">blog on OGM published</a></i>
</p>
</div>

