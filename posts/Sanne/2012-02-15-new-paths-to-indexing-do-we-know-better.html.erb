---
title: "New paths to indexing: do we know better?"
author: "Sanne Grinovero"
blogger_name: "Sanne"
creation_date: "15-02-2012"
original_tags: [Hibernate Search]
tags: [Hibernate Search]

relative_url: /2012/02/15/new-paths-to-indexing-do-we-know-better
slug: new-paths-to-indexing-do-we-know-better
lace: http://in.relation.to/22920.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2012/02/15/new-paths-to-indexing-do-we-know-better
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
Hibernate Search <i class="wikiEmphasis">4.1.0.Beta2</i> is released, and contains a very interesting improvement: it is now possible to precisely express which paths will be indexed when using <i class="wikiEmphasis">@IndexedEmbedded</i>.
</p>

<p class="wikiPara">
Previously, when using <i class="wikiEmphasis">@IndexedEmbedded</i>, we would walk the entity graph up to the specified depth to index all the traversed branches. We would index to the same depth all paths, until the specified maximum depth is reached or a smaller value for depth was encountered. In a complex model it could become complex to control what exactly would get indexed.
</p>

<p class="wikiPara">
On the forums Zach Kurey, who was having this problem, asked me <q>just out of curiosity</q> why we didn't provide an explicit paths-to-be-included option. <q>Surely</q>, he wrote, <q>there must be a reason</q>. Truth be told, there was no reason: we just hadn't thought about it.
</p>

<p class="wikiPara">
So, if you have suggestions, don't think we know better. Get in touch!
Our role is to protect the quality of the code and catalyse the experience of many clever users: we need to hear from you to keep on improving.
</p>

<p class="wikiPara">
After <a href="https://github.com/hibernate/hibernate-search/pull/156" target="" class="regularLink">a long discussion about the API</a> and implementation details, this release makes the new <a href="http://docs.jboss.org/hibernate/search/4.1/api/org/hibernate/search/annotations/IndexedEmbedded.html#includePaths()" target="" class="regularLink">@IndexedEmbedded(includePaths)</a> feature available for everyone to use. Thanks to Zach and Davide D'Alto, as after contributing to the design they also provided the patches and tests, making this brilliant idea available to everyone.
</p>

<h1 class="wikiHeadline1" id="H-HowDoesItWork"><a href="/2012/02/15/new-paths-to-indexing-do-we-know-better#H-HowDoesItWork">How does it work?</a></h1>

<p class="wikiPara">
In the following <i class="wikiEmphasis">Indexed Entity</i> we declare that when indexing each <i class="wikiEmphasis">Person</i> we want to index the <i class="wikiEmphasis">name</i> and <i class="wikiEmphasis">surname</i> fields, and its <i class="wikiEmphasis">parents</i> as well by using the well known <i class="wikiEmphasis">@IndexedEmbedded</i> annotation:
</p>

<pre class="wikiPreformatted brush: java">@Entity
@Indexed
public class Person {

   @Id
   public int id;

   @Field
   public String name;

   @Field
   public String surname;

   @OneToMany
   @IndexedEmbedded(includePaths = { "name" })
   public Set&lt;Person&gt; parents;

   @ContainedIn
   @ManyToOne
   public Person child;

    ...//other fields omitted
}
</pre>

<p class="wikiPara">
The news is the attribute <i class="wikiEmphasis">includePaths</i> of the annotation, which points out that we don't want to recursively index all fields for the parent Person, but only its <u>name</u> field.
</p>

<p class="wikiPara">
This was a very simple example; the reference documentation contains <a href="http://docs.jboss.org/hibernate/search/4.1/reference/en-US/html_single/#indexedembedded-includePath" target="" class="regularLink">more examples and details</a>.
In short, it provides better control on which fields will be indexed, avoiding to index unnecessary objects. Of course this improves overall performance.
</p>

<h1 class="wikiHeadline1" id="H-HibernateSearch410Beta2AwaitsYou"><a href="/2012/02/15/new-paths-to-indexing-do-we-know-better#H-HibernateSearch410Beta2AwaitsYou">Hibernate Search 4.1.0.Beta2 awaits you!</a></h1>

<p class="wikiPara">
Of course this release contains some more bugfixes and improvements, for more details check <a href="https://hibernate.onjira.com/secure/ReleaseNote.jspa?projectId=10061&amp;version=11854" target="" class="regularLink">the release notes</a>.
</p>

<h2 class="wikiHeadline2" id="H-TheLinks"><a href="/2012/02/15/new-paths-to-indexing-do-we-know-better#H-TheLinks">The links</a></h2>
<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> Download it from <a href="https://sourceforge.net/projects/hibernate/files/hibernate-search/4.1.0.Beta2/" target="" class="regularLink">Sourceforge</a> or via <a href="http://www.hibernate.org/subprojects/search/download.html" target="" class="regularLink">Maven artifacts</a>.</li>
<li class="wikiUnorderedListItem"> Get in touch on the <a href="https://forum.hibernate.org/viewforum.php?f=9" target="" class="regularLink">forums</a> or on <a href="http://hibernate.org/community" target="" class="regularLink">the mailing list</a>.</li>
<li class="wikiUnorderedListItem"> Help out: have a look at <a href="https://hibernate.onjira.com/browse/HSEARCH" target="" class="regularLink">JIRA</a> and get the code from <a href="https://github.com/hibernate/hibernate-search" target="" class="regularLink">GitHub</a>.</li>
</ul>

</div>

