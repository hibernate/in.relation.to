---
title: "Hibernate Search 3.2: fast index rebuild"
author: "Sanne Grinovero"
blogger_name: "Sanne"
creation_date: "07-12-2009"
original_tags: [Hibernate,Hibernate Search]
tags: [Hibernate Search]

relative_url: /2009/12/07/hibernate-search-32-fast-index-rebuild
slug: hibernate-search-32-fast-index-rebuild
lace: http://in.relation.to/13387.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2009/12/07/hibernate-search-32-fast-index-rebuild
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
One of the points for using Hibernate Search is that your valued business data is stored in the database: a reliable transactional and relational store.
So while Hibernate Search keeps the index in sync with the database during regular use, in several occasions you'll need to be able to rebuild the indexes from scratch:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> Data existed before you introduced Hibernate Search</li>
<li class="wikiUnorderedListItem"> New features are developed, index mapping changed</li>
<li class="wikiUnorderedListItem"> A database backup is restored</li>
<li class="wikiUnorderedListItem"> Batch changes are applied on the database</li>
<li class="wikiUnorderedListItem"> ...you get the point, this list could be very long</li>
</ul>

<h3 class="wikiHeadline3" id="H-EvolvingUserDriven"><a href="/2009/12/07/hibernate-search-32-fast-index-rebuild#H-EvolvingUserDriven">Evolving, user driven</a></h3>
<p class="wikiPara">
An API to perform this operations always existed in previous versions of Hibernate Search, but questions about how to make this faster weren't unusual on the forums. Keep in mind that rebuilding the whole index basically means that you have to load all indexed entities from the database to the Java world to feed Lucene with data to index. I'm a user myself and the code for the new MassIndexer API was tuned after field experience on several applications and with much involvement of the community.
</p>

<h2 class="wikiHeadline2" id="H-QuickStartMassIndexerAPI"><a href="/2009/12/07/hibernate-search-32-fast-index-rebuild#H-QuickStartMassIndexerAPI">QuickStart: MassIndexer API</a></h2>

<p class="wikiPara">
Since version 3.0 the documentation provided a recommended re-indexing routine; this method is still available but a new API providing better performance was added in version 3.2. No configuration changes are required, just start it:
</p>

<pre class="wikiPreformatted brush: java; gutter: true;">FullTextSession fullTextSession = ...
MassIndexer massIndexer = fullTextSession.createIndexer();
massIndexer.startAndWait();
</pre>

<p class="wikiPara">
The above code will block until all entities are reindexed.
If you don't need to wait for it use the asynchronous method:
</p>

<pre class="wikiPreformatted brush: java; gutter: true;">fullTextSession.createIndexer().start();
</pre>

<h3 class="wikiHeadline3" id="H-SelectingTheEntitiesToRebuildTheIndexFor"><a href="/2009/12/07/hibernate-search-32-fast-index-rebuild#H-SelectingTheEntitiesToRebuildTheIndexFor">Selecting the entities to rebuild the index for</a></h3>
<p class="wikiPara">
You don't need to rebuild the index for all indexed entities; let's say you want to re-index only the DVDs:
</p>

<pre class="wikiPreformatted brush: java; gutter: true;">fullTextSession.createIndexer( Dvd.class ).startAndWait();
</pre>

<p class="wikiPara">
This will include all of Dvd's subclasses, as all Hibernate Search's APIs are polymorphic.
</p>

<h3 class="wikiHeadline3" id="H-IndexOptimizationAndClearing"><a href="/2009/12/07/hibernate-search-32-fast-index-rebuild#H-IndexOptimizationAndClearing">Index optimization and clearing</a></h3>
<p class="wikiPara">
As in Lucene's world an update is implemented as remove and then add, before adding all entities to the index we need to remove them all from the index.
This operation is known as <u>purgeAll</u> in Hibernate Search.
By default the index is purged and optimized at start, and optimized again at the end; you might opt for a different strategy but keep in mind that by disabling the purge operation you could later find duplicates. The optimization after purge is applied to save some disk space, as recommended in <a href="https://www.hibernate.org/beamto.php?action=beam&amp;beam_id=17" target="" class="regularLink">Hibernate Search in Action</a>.
</p>

<pre class="wikiPreformatted brush: java; gutter: true;">fullTextSession.createIndexer()
   .purgeAllOnStart( true ) // true by default, highly recommended
   .optimizeAfterPurge( true ) // true is default, saves some disk space
   .optimizeOnFinish( true ) // true by default
   .start();
</pre>

<h2 class="wikiHeadline2" id="H-FasterFaster"><a href="/2009/12/07/hibernate-search-32-fast-index-rebuild#H-FasterFaster">Faster, Faster!</a></h2>

<p class="wikiPara">
A MassIndexer is very sensitive to tuning; some settings can make it orders of magnitude faster when tuned properly, and the good values depend on your specific mapping, environment, database, and even your content. To find out which settings you need to tune you should be aware of some implementation details.
</p>

<p class="wikiPara">
The MassIndexer uses a pipeline with different specialized threads working on it, so most processing is done concurrently.
The following explains the process for a single entity type, but this is actually done in parallel jobs for each different entity when you have more than one indexed type:
</p>

<ol class="wikiOrderedList">
<li class="wikiOrderedListItem"> A single thread named <u>identifier-loader</u> scrolls over the primary keys of the type. The number of threads for this stage is always one so that a transaction can define the set of keys to consider. So a first hint is to use simple keys, avoid complex types as the loading of keys will always be serialized.</li>
<li class="wikiOrderedListItem"> The loaded primary keys are pushed to a <u>id queue</u>; there's one such queue for each root type to be indexed.</li>
<li class="wikiOrderedListItem"> At the second stage a threadpool called <u>entity-loader</u> loads batches of entities using the provided primary keys. You can tune the number of threads working on this task concurrently (<u>threadsToLoadObjects(int)</u>) and the number of entities fetched per iteration (<u>batchSizeToLoadObjects(int)</u>). While idle threads might be considered a waste, this is minor and it's better to have some spare threads doing nothing than the opposite. Make sure you don't make it too hard for the database by requesting too much data: setting a too big batch size or way too many threads will also hurt, you will have to find the sweet spot. The queues will work as buffers to mitigate the effect of performance highs and lows due to different data, so finding the sweet spot is not a quest for the exact value but about finding a reasonable value.</li>
<li class="wikiOrderedListItem"> The <u>entity queue</u> contains a stream of entities needing conversion into Lucene Documents, it's fed by the <u>entity-loader</u> threads and consumed by the <u>document-creator</u> threads.</li>
<li class="wikiOrderedListItem"> The <u>document-creator</u> threads will convert the entities into Lucene Documents (apply your Search mapping and custom bridges, transform data in text). It is important to understand that it's still possible that during conversion some lazy object will be loaded from database (step 7 in the picture). So this step could be cheap or expensive: depending on your domain model and how you mapped it there could be more round trips happening to database or none at all. Second level cache interactions might help or hurt in this phase.</li>
<li class="wikiOrderedListItem"> The <u>document queue</u> should be a constant stream of Documents to be added to the index. If this queue is mostly near-empty it means you're being slower in producing the data than what Lucene is able to analyse and write it to the index. I this queue is mostly full it means you're being faster in producing the Documents than what Lucene is able to write them to the index. Always consider that Lucene is analysing the text during the write operation, so if this is slow it's not necessarily related to I/O limits but you could have expensive analysis. To find out you'll need a profiler.</li>
<li class="wikiOrderedListItem"> The <u>document indexer</u> thread number is also configurable, so in case of expensive analysis you can have more CPUs working on it.</li>
</ol>

<div style="margin-left:auto;margin-right:auto; width: 900px;">
<a href="http://opensource.atlassian.com/projects/hibernate/secure/attachment/14939/MassIndexer.png"><img src="http://opensource.atlassian.com/projects/hibernate/secure/attachment/14939/MassIndexer.png" width="500"></a>
</div>

<p class="wikiPara">
The queues are blocking and bounded, so there's no danger in setting too many producer threads for any stage: if a queue fills up the producers will be set on hold until space is available.
All thread pools have names assigned, so if you connect with a profiler or debugger the different stages can be promptly identified.
</p>

<h3 class="wikiHeadline3" id="H-APIForDataLoadTuning"><a href="/2009/12/07/hibernate-search-32-fast-index-rebuild#H-APIForDataLoadTuning">API for data load tuning</a></h3>

<p class="wikiPara">
The following settings rebuild my personal reference database in 3 minutes, while I started at 6 hours before enabling these settings, or at 2 months before looking into any kind of Hibernate or Lucene tuning.
</p>

<pre class="wikiPreformatted brush: java; gutter: true;">fullTextSession.createIndexer()
   .batchSizeToLoadObjects( 30 )
   .threadsForSubsequentFetching( 8 )
   .threadsToLoadObjects( 4 )
   .threadsForIndexWriter( 3 )
   .cacheMode(CacheMode.NORMAL) // defaults to CacheMode.IGNORE
   .startAndWait();
</pre>


<h3 class="wikiHeadline3" id="H-Caching"><a href="/2009/12/07/hibernate-search-32-fast-index-rebuild#H-Caching">Caching</a></h3>
<p class="wikiPara">
When some information is embedded in the index from entities having a low cardinality (a high cache hit ratio), for example when there's a ManyToOne relation to gender or countrycode it might make sense to enable the cache, which is ignored by default.
In most cases ignoring the cache will result in best performance, especially if you're using a distributed cache which would introduce unneeded network events.
</p>

<h2 class="wikiHeadline2" id="H-OfflineJob"><a href="/2009/12/07/hibernate-search-32-fast-index-rebuild#H-OfflineJob">Offline job</a></h2>

<p class="wikiPara">
While normally all changes done by Hibernate Search are coupled to a transaction, the MassIndexer uses several transactions and consistency is not guaranteed if you make changes to data while it's running. The index will only contain the entities which where existing in the database when the job started, and any update made to the index in this timeframe by other means might be lost. While nothing wrong would happen to the data on database, the index might be inconsistent if changes are made while the job is busy.
</p>

<h2 class="wikiHeadline2" id="H-PerformanceChecklist"><a href="/2009/12/07/hibernate-search-32-fast-index-rebuild#H-PerformanceChecklist">Performance checklist</a></h2>
<p class="wikiPara">
After having parallelized the indexing code, there are some other bottlenecks to avoid:
</p>

<ol class="wikiOrderedList">
<li class="wikiOrderedListItem"> Check your database behavior, almost all databases provide a profiling tool which can provide valuable information when run during a mass indexing</li>
<li class="wikiOrderedListItem"> Use a connection pool and size it properly: having more Hibernate Search threads accessing your database won't help when they have to contend database connections</li>
<li class="wikiOrderedListItem"> Having set EAGER loading on properties not needed by Hibernate Search will have them loaded, avoid it</li>
<li class="wikiOrderedListItem"> Check for network latency</li>
<li class="wikiOrderedListItem"> The effect of tuning settings doesn't depend only on static information like schema, mapping options and Lucene settings but also on the contents of data: don't assume five minutes of testing will highlight your normal behavior and collect metrics from real world scenarios. The queues are going to help as buffers for non-constant performance in the various stages.</li>
<li class="wikiOrderedListItem"> Don't forget to tune the IndexWriter. See the <a href="http://docs.jboss.org/hibernate/stable/search/reference/en-US/html/search-configuration.html#lucene-indexing-performance" target="" class="regularLink">reference documentation</a>: nothing changed in this area.</li>
<li class="wikiOrderedListItem"> If the indexing CPUs are not at 100% usage and the DB is not hitting his limits, you know you can improve the settings</li>
</ol>

<h2 class="wikiHeadline2" id="H-ProgressMonitoring"><a href="/2009/12/07/hibernate-search-32-fast-index-rebuild#H-ProgressMonitoring">Progress Monitoring</a></h2>
<p class="wikiPara">
An API is on the road to plug your own monitoring implementation; currently beta1 uses a logger to periodically print status, so you can enable or disable your loggers to control it. Let us know what kind of monitoring you would like to have, or contribute one!
</p>
</div>

