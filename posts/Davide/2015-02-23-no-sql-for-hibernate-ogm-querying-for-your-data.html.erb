---
title: "NoSQL for Hibernate OGM: Querying for your data"
author: "Davide D'Alto"
blogger_name: "Davide"
creation_date: "23-02-2015"
original_tags: [Hibernate,Hibernate OGM,Hibernate OGM 101]
tags: [Hibernate OGM]

relative_url: /2015/02/23/no-sql-for-hibernate-ogm-querying-for-your-data
slug: no-sql-for-hibernate-ogm-querying-for-your-data
lace: http://in.relation.to/42552.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2015/02/23/no-sql-for-hibernate-ogm-querying-for-your-data
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
Welcome to the second part of the <q>NoSQL with Hibernate OGM 101</q> tutorial series.
In <a href="http://in.relation.to/Bloggers/NoSQLWithHibernateOGM101PersistingYourFirstEntities" target="" class="regularLink">part 1</a> you have seen how to include Hibernate OGM in your Java project
and how simple it is to persist entities and switch between different kind of NoSQL datastores.
</p>

<p class="wikiPara">
Now that your datastore contains some data you will probably want to run
some queries on it. Fear not, Hibernate OGM will let you get your data in several different ways:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> using the Java Persistence Query Langage (JP-QL)</li>
<li class="wikiUnorderedListItem"> using the NoSQL native query language of the datastore of your choice (if it has one)</li>
<li class="wikiUnorderedListItem"> using Hibernate Search queries - primarly full-text queries</li>
</ul>

<p class="wikiPara">
All of these alternatives will allow you to run a query on the datastore
and get the result as a list of managed entities.
</p>

<h3 class="wikiHeadline3" id="H-PreparingTheTestClass"><a href="/2015/02/23/no-sql-for-hibernate-ogm-querying-for-your-data#H-PreparingTheTestClass">Preparing the test class</a></h3>

<p class="wikiPara">
We are going to add a new class HikeQueryTest. It will populate the datastore with some information about hikes:
</p>

<pre class="wikiPreformatted brush: java; gutter: false;">public class HikeQueryTest {

    private static EntityManagerFactory entityManagerFactory;

    @BeforeClass
    public static void setUpEntityManagerFactoryAndPopulateTheDatastore() {
        entityManagerFactory = Persistence.createEntityManagerFactory( "hikePu" );

            EntityManager entityManager = entityManagerFactory.createEntityManager();

            entityManager.getTransaction().begin();

            // create a Person
            Person bob = new Person( "Bob", "McRobb" );

            // and two hikes
            Hike cornwall = new Hike(
                "Visiting Land's End", new Date(), new BigDecimal( "5.5" ),
                new HikeSection( "Penzance", "Mousehole" ),
                new HikeSection( "Mousehole", "St. Levan" ),
                new HikeSection( "St. Levan", "Land's End" )
            );
            Hike isleOfWight = new Hike(
                "Exploring Carisbrooke Castle", new Date(), new BigDecimal( "7.5" ),
                new HikeSection( "Freshwater", "Calbourne" ),
                new HikeSection( "Calbourne", "Carisbrooke Castle" )
            );

            // let Bob organize the two hikes
            cornwall.setOrganizer( bob );
            bob.getOrganizedHikes().add( cornwall );

            isleOfWight.setOrganizer( bob );
            bob.getOrganizedHikes().add( isleOfWight );

            // persist organizer (will be cascaded to hikes)
            entityManager.persist( bob );

            entityManager.getTransaction().commit();
           entityManager.close();
    }

    @AfterClass
    public static void closeEntityManagerFactory() {
        entityManagerFactory.close();
    }
}
</pre>


<p class="wikiPara">
This methods will make sure that the entity manager factory is created before running the tests and that the datastore contains some data. The data are the same we stored in <a href="http://in.relation.to/Bloggers/NoSQLWithHibernateOGM101PersistingYourFirstEntities" target="" class="regularLink">part 1</a>.
</p>

<p class="wikiPara">
Now that we have some data in place, we can start to write some tests to search for them.
</p>

<h3 class="wikiHeadline3" id="H-UsingTheJavaPersistenceQueryLangageJPQL"><a href="/2015/02/23/no-sql-for-hibernate-ogm-querying-for-your-data#H-UsingTheJavaPersistenceQueryLangageJPQL">Using the Java Persistence Query Langage (JP-QL)</a></h3>

<p class="wikiPara">
The JP-QL is a query language defined as part of the <a href="http://download.oracle.com/otndocs/jcp/persistence-2.0-fr-eval-oth-JSpec/" target="" class="regularLink">Java Persistence API (JPA) specification</a>.
It's designed to work with entities and to be database independent.
</p>

<p class="wikiPara">
Taking the entity <i class="wikiEmphasis">Hike</i> as an example:
</p>

<pre class="wikiPreformatted brush: java; gutter: false;">@Entity
public class Hike {

    @Id
    @GeneratedValue(generator = "uuid")
    @GenericGenerator(name = "uuid", strategy = "uuid2")
    private String id;

    private String description;
    private Date date;
    private BigDecimal difficulty;

    @ManyToOne
    private Person organizer;

    @ElementCollection
    @OrderColumn(name = "sectionNo")
    private List&lt;HikeSection&gt; sections;
       
      // constructors, getters, setters, ...
}
</pre>


<p class="wikiPara">
A JP-QL query to get the list of available hikes ordered by difficulty looks like this:
</p>

<pre class="wikiPreformatted brush: sql; gutter: false;">SELECT h FROM Hike h ORDER BY h.difficulty ASC
</pre>


<p class="wikiPara">
Hibernate OGM will parse this query and transform it into the equivalent one in the native query language of the datastore of your choice.
In Neo4j, for example, it creates and execute a Cypher query like the following:
</p>

<pre class="wikiPreformatted brush: java; gutter: false;">MATCH (h:Hike) RETURN h ORDER BY h.difficulty
</pre>


<p class="wikiPara">
In MongoDB, using the MongoDB JavaScript API as a query notation, it looks like this:
</p>

<pre class="wikiPreformatted brush: java; gutter: false;">db.Hike.find({}, { "difficulty": 1})
</pre>


<p class="wikiPara">
If you use JP-QL in your application you will be able to switch between datastore without the need to update the queries.
</p>

<p class="wikiPara">
Now that you have an understanding of what’s going on, we can start querying for the data we
persisted. We can, for example, get the list of available hikes:
</p>

<pre class="wikiPreformatted brush: java; gutter: false;">@Test
public void canSearchUsingJPQLQuery() {
    // Get a new entityManager
    EntityManager entityManager = entityManagerFactory.createEntityManager();

    // Start transaction
    entityManager.getTransaction().begin();

    // Find all the available hikes ordered by difficulty
    List&lt;Hike&gt; hikes = entityManager
        .createQuery( "SELECT h FROM Hike h ORDER BY h.difficulty ASC" , Hike.class )
        .getResultList();

    assertThat( hikes.size() ).isEqualTo( 2 );
    assertThat( hikes ).onProperty( "description" ).containsExactly( "Visiting Land's End", "Exploring Carisbrooke Castle" );

    entityManager.getTransaction().commit();
    entityManager.close();
}
</pre>


<p class="wikiPara">
If you have used the JPA specification before you will find this code very familiar:
it's the same code you would write when working on a relational database using JPA.
</p>

<p class="wikiPara">
You can test this by switching the configuration and dependency between Neo4j and MongoDB: the test will still pass without any change in the code.
</p>

<p class="wikiPara">
The cool thing is that you can use JP-QL queries with datastores which don't have their own query engine. Hibernate OGM's query parser will create full-text queries in this case which are executed via Hibernate Search and Lucene. We will see later how you can do this in more details.
</p>

<p class="wikiPara">
The result of the query is a list of managed entities. This means that changes to the objects will be applied to the data in the database automatically. You also can navigate the resulting object graph, causing lazy associations to be loaded as required.
</p>

<p class="wikiPara">
The support for the JP-QL language is not complete and it might change depending on the
backend. We will leave the details to the official Hibernate OGM documentation.
At the moment what's supported is:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> simple comparisons</li>
<li class="wikiUnorderedListItem"> <i class="wikiEmphasis">IS NULL</i> and <i class="wikiEmphasis">IS NOT NULL</i>
</li>
<li class="wikiUnorderedListItem"> the boolean operators <i class="wikiEmphasis">AND</i>, <i class="wikiEmphasis">OR</i>, <i class="wikiEmphasis">NOT</i>
</li>
<li class="wikiUnorderedListItem"> <i class="wikiEmphasis">LIKE</i>, <i class="wikiEmphasis">IN</i> and <i class="wikiEmphasis">BETWEEN</i>
</li>
<li class="wikiUnorderedListItem"> <i class="wikiEmphasis">ORDER BY</i>
</li>
</ul>

<p class="wikiPara">
In case JP-QL is not a good fit for your use case, we will see how you can execute
a query using the native language of the backend of your choice.
</p>

<h3 class="wikiHeadline3" id="H-UsingTheNativeBackendQueryLanguage"><a href="/2015/02/23/no-sql-for-hibernate-ogm-querying-for-your-data#H-UsingTheNativeBackendQueryLanguage">Using the native backend query language</a></h3>

<p class="wikiPara">
Sometimes you might decide to sacrifice portablility in favor of the power of the underlying native query language. For example, you might want to benefit from the abilities of Neo4j's Cypher language for running hierarchical/recursive queries.
Using MongoDB, let’s get the hikes passing through “Penzance”:
</p>

<pre class="wikiPreformatted brush: java; gutter: false;">// Search for the hikes with a section that start from "Penzace" in MongoDB
List&lt;Hike&gt; hikes = entityManager.createNativeQuery("{ $query : { sections : { $elemMatch : { start: 'Penzance' } } } }", Hike.class ).getResultList();
</pre>


<p class="wikiPara">
The same code with Neo4j would look like this:
</p>

<pre class="wikiPreformatted brush: java; gutter: false;">// Search for the hikes with a section that start from "Penzace" in Neo4j
List&lt;Hike&gt; hikes = entityManager.createNativeQuery( "MATCH (h:Hike) -- (:Hike_sections {start: 'Penzance'} ) RETURN h", 
Hike.class ).getResultList();
</pre>


<p class="wikiPara">
The important thing to notice is that, like JPA queries,  the objects returned by the query are managed entities.
</p>

<p class="wikiPara">
You can also define queries using the annotation javax.persistence.NamedNativeQuery:
</p>

<pre class="wikiPreformatted brush: java; gutter: false;">@Entity
@NamedNativeQuery(
name = "PenzanceHikes",
query = "{ $query : { sections : { $elemMatch : { start: 'Penzance' } } } }", resultClass = Hike.class )
public class Hike { … }
</pre>


<p class="wikiPara">
and then execute it like this:
</p>

<pre class="wikiPreformatted brush: java; gutter: false;">List&lt;Hike&gt; hikes = entityManager.createNamedQuery( "PenzanceHikes" ).getResultList();
</pre>


<h3 class="wikiHeadline3" id="H-UsingHibernateSearchQueries"><a href="/2015/02/23/no-sql-for-hibernate-ogm-querying-for-your-data#H-UsingHibernateSearchQueries">Using Hibernate Search queries</a></h3>

<p class="wikiPara">
Hibernate Search offers a way to index Java objects into Lucene indexes and to execute full-text queries on them. The indexes do live outside your datastore. This means you can have query capabilities even if they are not supported natively. It also offers a few interesting properties in terms of feature set and scalability. In particular, using Hibernate Search, you can off-load query execution to separate nodes and scale it independently from the actual datastore nodes.
</p>

<p class="wikiPara">
For this example we are going to use MongoDB. You first need to add Hibernate Search to your application. In a  Maven project, you need to add the following dependency in the pom.xml:
</p>

<pre class="wikiPreformatted brush: java; gutter: false;">&lt;dependencies&gt;
    ...
    &lt;dependency&gt;
        &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
        &lt;artifactId&gt;hibernate-search-orm&lt;/artifactId&gt;
    &lt;/dependency&gt;
    ...
&lt;/dependencies&gt;
</pre>


<p class="wikiPara">
Now, you can select what you want to index:
</p>

<pre class="wikiPreformatted brush: java; gutter: false;">@Entity
@Indexed
public class Hike {

    @Id
    @GeneratedValue(generator = "uuid")
    @GenericGenerator(name = "uuid", strategy = "uuid2")
    private String id;

    @Field
    private String description;

    private Date date;
    private BigDecimal difficulty;

    @ManyToOne
    private Person organizer;

    @ElementCollection
    @OrderColumn(name = "sectionNo")
    private List&lt;HikeSection&gt; sections;
       
    // constructors, getters, setters, ...
}
</pre>


<p class="wikiPara">
The @Indexed annotation identifies the classes that we want to index, while the @Field annotation specifies which properties of the class we want to index.
Every time a new Hike entity is persisted via the entity manager using Hibernate OGM, Hibernate Search will automatically add it to the index and keep track of changes to managed entities.
That way, index and datastore are up to date.
</p>

<p class="wikiPara">
You can now look for the hikes to Carisbrooke using Lucene queries. In this example,
we will use  the query builder provided by Hibernate Search:
</p>

<pre class="wikiPreformatted brush: java; gutter: false;">@Test
public void canSearchUsingFullTextQuery() {
    EntityManager entityManager = entityManagerFactory.createEntityManager();

    entityManager.getTransaction().begin();

    //Add full-text superpowers to any EntityManager:
    FullTextEntityManager ftem = Search.getFullTextEntityManager(entityManager);

    // Optionally use the QueryBuilder to simplify Query definition:
    QueryBuilder b = ftem.getSearchFactory().buildQueryBuilder().forEntity( Hike.class ).get();

    // A Lucene query to search for hikes to the Carisbrooke castle:
    Query lq = b.keyword().onField("description").matching("Carisbrooke castle").createQuery();

    //Transform the Lucene Query in a JPA Query:
    FullTextQuery ftQuery = ftem.createFullTextQuery(lq, Hike.class);

    //This is a requirement when using Hibernate OGM instead of ORM:
    ftQuery.initializeObjectsWith( ObjectLookupMethod.SKIP, DatabaseRetrievalMethod.FIND_BY_ID );

    // List matching hikes
    List&lt;Hike&gt; hikes = ftQuery.getResultList();
    assertThat( hikes ).onProperty( "description" ).containsOnly( "Exploring Carisbrooke Castle" );

    entityManager.getTransaction().commit();
    entityManager.close();
}
</pre>


<p class="wikiPara">
The result of the code will be a list of hikes mentioning “Carisbrooke castle” in the description.
</p>

<p class="wikiPara">
Hibernate Search is a very powerful tool with many different options, it would take too long to describe all of them in this tutorial. You can check the <a href="http://hibernate.org/search/documentation/" target="" class="regularLink">reference documentation</a> to learn more about it.
</p>

<h3 class="wikiHeadline3" id="H-WrapUp"><a href="/2015/02/23/no-sql-for-hibernate-ogm-querying-for-your-data#H-WrapUp">Wrap up</a></h3>

<p class="wikiPara">
That’s all for now.
</p>

<p class="wikiPara">
As you have seen, Hibernate OGM provides you with a range of options to run queries against your datastore, which should cover most of your typical query needs: JP-QL, native NoSQL queries and full-text queries via Hibernate Search / Apache Lucene. Even if you have never worked with NoSQL datastores before, you will be able to experiment with them easily.
</p>

<p class="wikiPara">
You can find the <a href="https://github.com/hibernate/hibernate-demos/tree/master/hibernate-ogm/nosql-with-hibernate-ogm-101/hibernate-ogm-demo-nosql-with-hibernate-ogm-101-part-2" target="" class="regularLink">complete example code</a> of this blog post (and the previous one) on GitHub. Just fork it and play with it as you like. 
</p>

<p class="wikiPara">
Now that you know how to store and find your entities, we will see in the next part of the series how you can put everything inside an application container like <a href="http://wildfly.org" target="" class="regularLink">WildFly</a>.
</p>

<p class="wikiPara">
We are eager to know your opinion, feel free to comment or <a href="http://hibernate.org/community/" target="" class="regularLink">contact us</a>, we will answer your questions and hear your feed-back.;</p>
</div>

