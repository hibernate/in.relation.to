---
title: "Testing EJB3 apps with TestNG"
author: "Christian Bauer"
blogger_name: "Christian"
creation_date: "25-11-2005"
original_tags: []
tags: []

relative_url: /2005/11/25/testing-ejb-3-apps-with-test-ng
slug: testing-ejb-3-apps-with-test-ng
lace: http://in.relation.to/1380.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2005/11/25/testing-ejb-3-apps-with-test-ng
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
It would be great if I could use the TestNG plugin for IntelliJ but I'm still on version 4.5 and
its only available for IDEA 5. Tried to switch a few times but the XML editor just doesn't work
anymore and throws exceptions faster than I can click. I want the XML editor of IDEA 3.x back, it
just worked and didn't have the goofy indentation routines of 4.x...
</p>

<p class="wikiPara">
Still, after using TestNG only for a a day or two, I think that its so much better than JUnit that
I wonder why I didn't try earlier. I guess I should have listened to Gavin who was raving about
how easy it was to get the <a href="http://www.jboss.com/products/seam" target="" class="regularLink">Seam</a> tests up and running. It
actually has all the things I've been missing with JUnit.
</p>

<p class="wikiPara">
So I got my first TestNG setup running nicely for CaveatEmptor. By the way, I've uploaded a new
<a href="http://caveatemptor.hibernate.org" target="" class="regularLink">alpha release</a> that includes all the stuff I'm going to talk
about here (and quite a few other new things). For those of you interested in the progress of
the /Hibernate in Action/ second edition: I've completed 95% of all mapping examples,
which I think (and hope) was the most time consuming part. I'm now updating the chapters about sessions,
transactions, caching, etc., so finishing the manuscript this year is possible, I guess.
</p>

<p class="wikiPara">
Back to TestNG and how I used it to test EJBs. One of the nice things about TestNG is how easy it is
to configure runtime infrastructure you need for your tests. First I wrote a class that 
boots the <a href="http://www.jboss.com/products/ejb3" target="" class="regularLink">JBoss EJB 3.0</a> container. TestNG will run the <tt>startup()</tt>
and <tt>shutdown()</tt> methods for a suite of tests:
</p>

<pre class="wikiPreformatted">
public class EJB3Container {

    private static InitialContext initialContext;
    private EJB3StandaloneDeployer deployer;

    @Configuration(beforeSuite = true)
    public void startup() {
        try {

            // Boot the JBoss Microcontainer with EJB3 settings, loads ejb3-interceptors-aop.xml
            EJB3StandaloneBootstrap.boot(null);

            // Deploy CaveatEmptor beans (datasource, mostly)
            EJB3StandaloneBootstrap.deployXmlResource("caveatemptor-beans.xml");

            // Add all EJBs found in the archive that has this file
            deployer = new EJB3StandaloneDeployer();
            deployer.getArchivesByResource().add("META-INF/persistence.xml");

            // Deploy everything we got
            deployer.create();
            deployer.start();

            // Create InitialContext from jndi.properties
            initialContext = new InitialContext();

        } catch (Exception ex) {
            throw new RuntimeException(ex);
        }
    }

    @Configuration(afterSuite = true)
    public void shutdown() {
        try {
            deployer.stop();
            deployer.destroy();
            EJB3StandaloneBootstrap.shutdown();
        } catch (Exception ex) {
            throw new RuntimeException(ex);
        }
    }

    public static Object lookup(String beanName) {
        try {
            return initialContext.lookup(beanName);
        } catch (NamingException ex) {
            throw new RuntimeException("Couldn't lookup: " + beanName, ex);
        }
    }

}</pre>


<p class="wikiPara">
First thing on startup, I boot the <a href="http://www.jboss.com/products/jbossmc" target="" class="regularLink">JBoss Microcontainer</a>, which is
actually the kernel of the future JBoss AS 5.x. Because I'm using the <tt>EJB3StandaloneBootstrap</tt> it will
automatically search for the configuration files for the EJB 3.0 container. You need those and the required
libraries in your classpath. If you want to try this download <a href="http://caveatemptor.hibernate.org" target="" class="regularLink">CaveatEmptor</a>
and copy the libraries and configuration.
</p>

<p class="wikiPara">
Next I'm deploying some beans from <tt>caveatemptor-beans.xml</tt>, right now this includes just a single
datasource for integration testing. It is configured to use JTA and bound to JNDI, services provided by the microcontainer.
You can set up and wire other stateless POJO services there if you have to.
</p>

<p class="wikiPara">
Finally I'm deploying all EJBs for my tests. The <tt>EJB3StandaloneDeployer</tt> supports many different deployment strategies
and I decided to use <q>search the classpath and deploy the JAR that contains this file</q>. For EJB 3.0 persistence, which
is what I'm primarily testing in CaveatEmptor, I have to have a <tt>META-INF/persistence.xml</tt> configuration anyway for
an <tt>EntityManagerFactory</tt>. I actually have to figure out how to deploy an exploded archive with a single command and
auto-discovery of EJBs...
</p>

<p class="wikiPara">
Now if I write a test class I will need a starting point, I need to get a handle on one of my EJBs. I can look them up in JNDI -
that's what the static <tt>lookup()</tt> method is good for - or I could wire them into my test classes with the microcontainer.
I decided to use a lookup:
</p>

<pre class="wikiPreformatted">
public class CategoryItem {

    @Test(groups = {"integration.database"})
    public void saveCategory() {

        CategoryDAO catDAO = (CategoryDAO)EJB3Container.lookup(CategoryDAO.class.getName());
        Category newCat = new Category("Foo");
        catDAO.makePersistent(newCat);

    }
}</pre>


<p class="wikiPara">
Here I'm testing a data access object. Well, I'm not actually testing much as I don't assert any state after saving. I still have
to port all my JUnit tests over but my first goal was to have the infrastructure ready.
</p>

<p class="wikiPara">
The <tt>CategoryDAO</tt> is a stateless EJB that I wrote with the <a href="http://www.hibernate.org/328.html" target="" class="regularLink">Generic DAO pattern</a>. To make
it an EJB I had to add a <tt>@Stateless</tt> annotation and get the <tt>EntityManager</tt> injected into the bean. What about
transactions?
</p>

<p class="wikiPara">
For a stateless EJB the default transaction attribute is <tt>REQUIRES</tt>, so any method I call on the DAO is executed in a
system transaction. If several are called in the same test method they all run in the same transaction.
</p>

<p class="wikiPara">
I've also started using TestNG groups, a great feature. By marking the test method as belonging to the group
<tt>integration.database</tt> I can target it in my TestNG suite assembly in <tt>testng.xml</tt>:
</p>

<pre class="wikiPreformatted">
&lt;suite name="CaveatEmptor-EJB3" verbose="1"&gt;

    &lt;test name="Runtime"&gt;
        &lt;packages&gt;
            &lt;package name="org.hibernate.ce.auction.test.testng.runtime"/&gt;
        &lt;/packages&gt;
    &lt;/test&gt;

    &lt;test name="Integration"&gt;
        &lt;groups&gt;
            &lt;run&gt;&lt;include name="integration.*"/&gt;&lt;/run&gt;
        &lt;/groups&gt;
        &lt;packages&gt;
             &lt;package name="org.hibernate.ce.auction.test.testng.persistence"/&gt;
         &lt;/packages&gt;
    &lt;/test&gt;

&lt;/suite&gt;</pre>


<p class="wikiPara">
I still have to figure out how to create the assembly in a way that says <q>use this runtime for this group of tests</q>. Right
now I'd need several suites for this.
</p>

<p class="wikiPara">
Since I'm stuck with the old IntelliJ I've got to run the tests with Ant (I'd really like to have that green bar ;):
</p>

<pre class="wikiPreformatted">
&lt;target name="testng.run" depends="testng.package"
    description="TestNG tests with the JBoss EJB3 Microcontainer"&gt;
    &lt;mkdir dir="${testng.out.dir}"/&gt;

    &lt;testng outputDir="${testng.out.dir}"&gt;
        &lt;classpath&gt;
            &lt;pathelement path="${testng.build.dir}/${proj.shortname}.jar"/&gt;
            &lt;path refid="project.classpath"/&gt;
            &lt;path&gt;
                &lt;fileset dir="${container.lib}"&gt;
                    &lt;include name="**/*.jar"/&gt;
                &lt;/fileset&gt;
            &lt;/path&gt;
        &lt;/classpath&gt;
        &lt;xmlfileset dir="${testng.classes.dir}" includes="testng.xml"/&gt;
    &lt;/testng&gt;
&lt;/target&gt;</pre>


<p class="wikiPara">
So I'm hooked on TestNG now and will use it for all EJB tests in the future. I've got to check out
Gavins TestNG configuration for JSF + EJB testing in Seam and how he simulates the HTTP environment...
</p>

<p class="wikiPara">
Oh, and if any Jetbrains guys read this: fix the XML editor. There are people out there who use it to write docs. Thanks :)
</p>
</div>

