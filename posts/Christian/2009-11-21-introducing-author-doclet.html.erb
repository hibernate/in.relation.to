---
title: "Introducing AuthorDoclet"
author: "Christian Bauer"
blogger_name: "Christian"
creation_date: "21-11-2009"
original_tags: [AuthorDoclet,Books]
tags: []

relative_url: /2009/11/21/introducing-author-doclet
slug: introducing-author-doclet
lace: http://in.relation.to/13138.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2009/11/21/introducing-author-doclet
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
I'm on my way home from the Seam community meeting in Antwerp this Friday, where I managed to talk to two
or three people about the Javadoc-based documentation toolset I've been working on, but there was no opportuntity
to talk about it in more detail or to look at some actual examples.
</p>

<p class="wikiPara">
The preliminary name is AuthorDoclet and I'm not attached to it - it's the first thing I entered into the project
name box in IntelliJ. So I've been using AuthorDoclet to write the AuthorDoclet manual, which was a bit recursive
and confusing. Especially because I'm still redesigning certain aspects of the software while I'm writing
the manual.
</p>

<p class="wikiPara">
And this is actually the most important idea behind AuthorDoclet: Stop writing anemic and synthetic unit test
code. Write unit tests that people want to read, to learn your software. Write lots of quality Javadoc for your
unit test classes and methods. Then press a button in AuthorDoclet and you'll get documentation automatically
generated, with validated and tested examples.
</p>

<p class="wikiPara">
This kind of approach has already been evaluated and implemented by other people, for example, there is
<a href="http://arrenbrecht.ch/jcite/" target="" class="regularLink">JCite</a>. However, the tools I've found all assume that you write documentation
text in some text editor and <i class="wikiEmphasis">include</i> the code examples by putting placeholders in the text. These
placeholders are then replaced with code  from your Java classes by the documentation processing tool.
</p>

<p class="wikiPara">
Validating the source code used in examples is not the only problem you'll have
to deal with when you work on software documentation. The other major issue is <i class="wikiEmphasis">maintaining</i> the code while
you go through many iterations of the same text, and of course many versions of the example code. If you manually
copy and paste code lines from your working application into the document you are writing, you'll at some
point no longer know which code needs to be updated and where, after some refactoring.
</p>

<p class="wikiPara">
The solution offered by JCite is simple: The second time it is processing your documentation, it is going
to find all the citations (included code snippets) that changed and it will show you a list of items to approve
or decline.
</p>

<p class="wikiPara">
With AuthorDoclet, you should not even have this problem because instead of referencing the code snippets from
the text for inclusion, you write the text into the same file as the code, as Javadoc comments. So when the code
changes, you immediately see the text that describes that code example. When you change the name of a class, method,
or field, any references from your Javadoc comments (in all source files!) will be updated automatically as well.
(I'm assuming that your IDE supports Javadoc refactoring.)
</p>

<p class="wikiPara">
You still need an external master template file in AuthorDoclet which describes your documentation <i class="wikiEmphasis">structure</i>. The
following example will make this easier to understand. Create an XHTML file as your master
template:
</p>

<pre class="wikiPreformatted brush: xml">&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
&lt;head&gt;
    &lt;title&gt;Hello World Source&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div&gt;
        &lt;a class="citation"
           href="example/helloworld/HelloWorld.java"/&gt;
    &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>


<p class="wikiPara">
When processed by AuthorDoclet, this XHTML file will be transformed into the result XHTML file, and all tags
that are known to the AuthorDoclet processing pipeline (that's an implementation detail) are going to be
handled. The <tt>citation</tt> anchor is going to trigger the inclusion of the source of <tt>HelloWorld.java</tt> as source
within that <tt>&lt;div&gt;</tt>. You can organize your <tt>&lt;div&gt;</tt>'s into chapters and (sub-)sections.
</p>

<p class="wikiPara">
Now, this was not an example of Javadoc inclusion, just the simpler case of Java source inclusion. This is
Javadoc citation:
</p>

<pre class="wikiPreformatted brush: xml">&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
&lt;head&gt;
    &lt;title&gt;Hello World Documentation&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div&gt;
        &lt;a class="citation"
           href="javadoc://example.helloworld.HelloWorldTest#testHello()"/&gt;
    &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>


<p class="wikiPara">
You'll probably recognize the syntax of this <tt>javadoc://</tt> reference: It's the same you use in Javadoc with
<tt>@link</tt> and <tt>@see</tt> tags. Your IDE can detect these strings and refactor the <tt>href</tt> value when the class or
method name changes.
</p>

<p class="wikiPara">
The Javadoc, which is also XHTML, is going to be included between the <tt>&lt;div&gt;</tt> element. If there are any
<tt>&lt;a class="citation"/&gt;</tt> within that Javadoc - again, we are talking about the Javadoc of the <tt>testHello()</tt>
method - they are going to be processed as well:
</p>

<pre class="wikiPreformatted brush: java">/**
* Testing Hello World
* &lt;p&gt;
* Let's assume you want to say "Hello World". The following &lt;em&gt;example&lt;/em&gt; shows you how
* to do that:
* &lt;/p&gt;
* &lt;a class="citation" href="javacode://example.helloworld.HelloWorld#testHello()"/&gt;
* &lt;p&gt;
* This was easy, right?
* &lt;/p&gt;
*/
@Test
public void testHello() {
    System.out.println("Hello World!");
}
</pre>


<p class="wikiPara">
Note the scheme of that URI: The <tt>javacode://</tt> prefix is enabling the dot-notation for package, class, and method
names (Javadoc <tt>@see</tt> syntax). Without this scheme, you'd reference the <tt>.java</tt> file directly as shown earlier.
</p>

<p class="wikiPara">
Processing this Javadoc comment is a recursive operation: If it would contain an anchor that cites another
Javadoc comment - be it package, class, or method level - that Javadoc comment would also be transformed and
so on.
</p>

<p class="wikiPara">
AuthorDoclet currently also supports various syntaxes for inclusion/exclusion of source lines, and a few special
options I'm going to show some other time.
</p>

<p class="wikiPara">
The output document is XHTML markup, and styling, or printing this document is outside of the scope of AuthorDoclet.
You can get an easy preview if you write a <tt>CSS</tt> file and open it in the browser - remember that you control
the XHTML element identifiers and CSS classes directly:
</p>

<pre class="wikiPreformatted brush:xml">&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
&lt;head&gt;
    &lt;title&gt;Hello World Documentation&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div&gt;
    &lt;div class="citation javadoc" id="javadoc.example.helloworld.HelloWorldTest-testHello__"&gt;
        &lt;div class="title"&gt;Testing Hello World&lt;/div&gt;
        &lt;div class="content"&gt;
            &lt;p&gt;
                Let's assume you want to say "Hello World". The following &lt;em&gt;example&lt;/em&gt; shows you how
                to do that:
            &lt;/p&gt;

            &lt;div class="citation javacode" id="javacode.example.helloworld.HelloWorldTest-testHello__"&gt;
                &lt;div class="content"&gt;&lt;![CDATA[
                @Test
                public void testHello() {
                    System.out.println("Hello World!");
                }
                ]]&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;p&gt;
                This was easy, right?
            &lt;/p&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>


<p class="wikiPara">
AuthorDoclet also supports linking, e.g. you can write <tt>{@link example.helloworld.HelloWorld#testHello()}</tt> in
any of your Javadoc comments, and a cross-reference (a regular link...) to the citation will be generated in
the output.
</p>

<p class="wikiPara">
Writing an XSL:FO utility that converts XHTML to nice-looking PDFs is going to be easy. I guess iText would work
as well, although I've not spend any time so far on the output transformation for consumption.
</p>
</div>

