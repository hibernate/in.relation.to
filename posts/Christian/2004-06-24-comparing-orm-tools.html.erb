---
title: "Comparing ORM tools"
author: "Christian Bauer"
blogger_name: "Christian"
creation_date: "24-06-2004"
original_tags: []
tags: [Hibernate ORM]

relative_url: /2004/06/24/comparing-orm-tools
slug: comparing-orm-tools
lace: http://in.relation.to/1248.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2004/06/24/comparing-orm-tools
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
I've seen three or four <q>ORM tool comparisons</q> in the last three weeks; on some weblogs, on our
forum and I've even been part in several decisions. 
</p>

<p class="wikiPara">
I have the impression that many developers have problems categorizing and evaluating ORM tools, no
matter if its Hibernate, Cayenne, PrIdE (I hope that spelling is correct), or some home-made JDBC
framework. I got really frustrated at some point, but what brings me to this blog
entry is probably a posting made today, by <a href="http://jroller.com/page/ferg/20040616#jdo_ejb_cmp_hibernate_and" target="" class="regularLink">Scott Ferguson</a>.
He compares EJB CMP, JDO, and Hibernate. I wasn't really happy with his list of points. 
Don't get me wrong, I'm not complaining about Scott's conclusions (our precious
Hibernate!), in fact, I actually usually listen to Scott. I've even followed Resins development
closely several years ago, nearly got it approved for a medium-sized installation (politics...),
and even reported and fixed some bugs.
</p>

<p class="wikiPara">
So, this entry, after a long introduction, is about <q>comparing ORM solutions</q>. What all the
reviews and articles had in common was a very very obscure criteria schema. In one article,
I've seen someone comparing <q>loading and saving a single object</q> and looking at the lines of
code that you need for this operation. Next, we hear something like <q>my ORM should work with
objects</q> or other vague statements that, in practice, probably not help you decide what you should
use.
</p>

<p class="wikiPara">
I did my research for Hibernate in Action, and I think we have found an excellent taxonomy
for ORM solutions. Actually, <a href="http://www.chimu.com/publications/objectRelational/part0008.html" target="" class="regularLink">Mark Fussel</a>
started to use these categories in 1997, we merely rewrote his list and set it in context to
Java application development:
</p>

<p class="wikiPara">
<i class="wikiEmphasis">Pure relational</i>
</p>

<p class="wikiPara">
The whole application, including the user interface, is designed around the relational
model and SQL-based relational operations. Direct SQL can be fine-tuned in every
aspect, but the drawbacks, such as difficult maintenance, lack of portability, and
maintainability, are significant, especially in the long run. Applications in this category
often make heavy use of stored procedures, shifting some of the work out of
the business layer and into the database.
</p>

<p class="wikiPara">
<i class="wikiEmphasis">Light object mapping</i>
</p>

<p class="wikiPara">
Entities are represented as classes that are mapped manually to the relational
tables. Hand-coded SQL/JDBC is hidden from the business logic using well-known
design patterns (such as DAO). This approach is extremely widespread and is successful
for applications with a small number of entities, or applications with generic,
metadata-driven data models. Stored procedures might have a place in this kind
of application.
</p>

<p class="wikiPara">
<i class="wikiEmphasis">Medium object mapping</i>
</p>

<p class="wikiPara">
The application is designed around an object model. SQL is generated at build
time using a code generation tool, or at runtime by framework code. Associations
between objects are supported by the persistence mechanism, and queries may be
specified using an object-oriented expression language. Objects are cached by the
persistence layer. A great many ORM products and homegrown persistence layers
support at least this level of functionality. It's well suited to medium-sized
applications with some complex transactions, particularly when portability between
different database products is important. These applications usually don't use
stored procedures.
</p>

<p class="wikiPara">
<i class="wikiEmphasis">Full object mapping</i>
</p>

<p class="wikiPara">
Full object mapping supports sophisticated object modeling: composition, inheritance,
polymorphism, and <q>persistence by reachability</q> or a more flexible transitive
persistence solution. The persistence layer implements transparent persistence; persistent
classes do not inherit any special base class or have to implement a special interface. The
persistence layer does not enforce a particular programming model for the domain model
implementation. Efficient fetching strategies (lazy and eager fetching) and caching
strategies are implemented transparently to the application. This level of functionality
can hardly be achieved by a homegrown persistence layer - it's equivalent to months or
years of development time.
</p>

<p class="wikiPara">
In my experience, it is quite easy to find the category for a given product. In Hibernate
in Action, we also have a list of interesting questions that you should ask if you compare
ORM tools:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> What do persistent classes look like? Are they fine-grained JavaBeans?</li>
</ul>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> How is mapping metadata defined? </li>
</ul>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> How should we map class inheritance hierarchies?</li>
</ul>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> How does the persistence logic interact at runtime with the objects of the business domain?</li>
</ul>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> What is the lifecycle of a persistent object? </li>
</ul>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> What facilities are provided for sorting, searching, and aggregating?</li>
</ul>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> How do we efficiently retrieve data with associations?</li>
</ul>


<p class="wikiPara">
In addition, two issues are common to any data-access technology. They also
impose fundamental constraints on the design and architecture of an ORM:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem">  Transactions and concurrency</li>
</ul>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem">  Cache management (and concurrency)</li>
</ul>


<p class="wikiPara">
Find the answers to those questions, and you can compare ORM software. Scott in fact started right
with the <q>lifecycle</q>, but he has not given enough information in his article for a real
discussion, it's mostly his opinion (which is fine on a weblog).
</p>

<p class="wikiPara">
There are, as always in life, many solutions and not a single product, project, or specification
will be perfect in all scenarios. You don't have to try to get to the <q>top</q> of the list and
always use Full object mapping (and the appropriate tool). There are very good reasons to use a 
Light object mapping tool (iBatis, for example) in some situations! In many situations, JDBC and
SQL are the best choice. I'm talking about a comparison at the same level, and I've made good
experience with the categories and questions I've shown above. Read the book. :)
</p>

<p class="wikiPara">
Thanks for listening
</p>
</div>

