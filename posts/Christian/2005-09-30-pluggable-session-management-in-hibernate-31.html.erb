---
title: "Pluggable Session management in Hibernate 3.1"
author: "Christian Bauer"
blogger_name: "Christian"
creation_date: "30-09-2005"
original_tags: []
tags: [Hibernate ORM]

relative_url: /2005/09/30/pluggable-session-management-in-hibernate-31
slug: pluggable-session-management-in-hibernate-31
lace: http://in.relation.to/1375.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2005/09/30/pluggable-session-management-in-hibernate-31
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
Steve just committed a new interface and extension point to Hibernate Core.  We can finally plug-in custom Session context management into Hibernate.  For those of you who already know <tt>getCurrentSession()</tt> in Hibernate 3.0, this new extension enables the same without a JTA environment.
</p>

<p class="wikiPara">
But how does it work? In a J2EE container we can rely on the scope of the
current JTA transaction to bind the Hibernate Session. So whenever you call
<tt>getCurrentSession()</tt> you get exactly that. Outside of a container, however,
we don't really know when a Session ends (starting it is easy: the first time
you request one).
</p>

<p class="wikiPara">
So, a new interface was needed to allow Hibernate users to provide a <q>current
Session</q>. In fact, the interface <tt>CurrentSessionContext</tt> has exactly this
single method you can implement. But you don't have to, there are two default
implementations distributed with Hibernate 3.1: 
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> The usual behavior for JTA environments, binding the current Session to the current system transaction This works without any extra configuration, just set up Hibernate for managed J2EE use (transaction manager, etc.), and call <tt>sessionFactory.getCurrentSession()</tt>. No need to flush or close the Session. If you use CMT, transaction demarcation is declarative, if you use BMT, call the methods <tt>beginTransaction()</tt>, <tt>getTransaction().commit()</tt>, and <tt>getTransaction().rollback()</tt> on the current Session. If you want to you can enable JTA context management in your Hibernate configuration by setting the new property <tt>current_session_context_class</tt> to <tt>"jta"</tt>, but again, it is the default if Hibernate is configured for J2EE.</li>
</ul>


<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> An implementation for typical Hibernate deployment in non-managed environments, binding the current Session to the current thread. However, this implementation needs a little help from you to mark the end of a unit of work (we can't wait for the thread to end). You have to call the static method <tt>ThreadLocalSessionContext.unbind().close()</tt> to remove the current Session from the thread, and to close it. To enable this context handler, set the <tt>current_session_context_class</tt> configuration property to <tt>"thread"</tt>.</li>
</ul>


<p class="wikiPara">
Of course you can implement your own <tt>CurrentSessionContext</tt> and name the
class in configuration, for example, to implement a Long Session (or in new terms: extended persistence context) pattern with EJBs, storing the disconnected Session in a SFSB between requests and JTA transactions.
</p>

<p class="wikiPara">
The traditional <tt>HibernateUtil</tt> class can now finally be reduced to a simple
startup helper, used to initialize a <tt>SessionFactory</tt>. This is how a typical
data access routine now looks like in CMT, BMT, and non-JTA environments:
</p>

<pre class="wikiPreformatted">
Session s = HibernateUtil.getSessionFactory().getCurrentSession();
s.beginTransaction();
    
s.save(item); // or
HibernateUtil.getSessionFactory().getCurrentSession().save(item);
    
s.getTransaction().commit();

ThreadLocalSessionContext.unbind().close(); // Only needed for non-JTA</pre>


<p class="wikiPara">
With <tt>HibernateUtil</tt> we don't really care where the SessionFactory is coming from, either static singleton or from JNDI. The last line is only needed for the built-in <q>thread</q> context handling outside of an application server, as explained above. The rest of the code is the same everywhere, in all deployment situations.  Usually you would unbind and close the Session in some kind of interceptor and encapsulate the last line in some system class that knows when request processing completes. The two lines of code saving an item are equivalent, the purpose here is to show you that you can call <tt>getCurrentSession()</tt> as many times and in as many different (DAO) classes as you like.
</p>

<p class="wikiPara">
For all of you who don't want to build Hibernate from CVS to try this new feature: I've prepared an <a href="http://caveatemptor.hibernate.org/2.html" target="" class="regularLink">updated CaveatEmptor release</a> that includes a snapshot of Hibernate 3.1 from CVS, updated HibernateUtil, and updated DAO/unit test classes. The other Hibernate documentation (and the popular Wiki pages about Session handling) will be updated later, when an actual 3.1 release is available.
</p>
</div>

