---
title: "What are scalar types anyway?"
author: "Christian Bauer"
blogger_name: "Christian"
creation_date: "05-12-2003"
original_tags: []
tags: []

relative_url: /2003/12/05/what-are-scalar-types-anyway
slug: what-are-scalar-types-anyway
lace: http://in.relation.to/1227.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2003/12/05/what-are-scalar-types-anyway
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
About two years ago, a co-worker asked me innocently: <q>What are scalar types anyway?</q>
</p>

<p class="wikiPara">
I realized that I had used that term one too often and he was really asking if I can
define it, not just use it.
</p>

<p class="wikiPara">
On my way to the JavaPolis conference I had some time to write up what I understand
about /scalar types/. The truth is, I had a lot of time, because my train got the
wrong route (twice!), and we even had to go backwards several times.
</p>

<p class="wikiPara">
Just to make this entry even more exciting, I'll also explain what I understand as
a /variable/ and a /value/.
</p>


<p class="wikiPara">
A type names a /set of values/. So, a type has a name, we know that. But what is
this <q>set of values</q>? According to Chris Date, a value is an /individual constant/.
Now, stop thinking in software terms, and think about information and data. A
value has, by definition, no location in time and space. For example, we don't know
where or when the value <tt>Hibernate</tt> is located, this question doesn't even make
sense. It's a value nevertheless, just as the number <tt>4</tt> and the number <tt>2</tt>.
</p>

<p class="wikiPara">
We know that in a strongly typed language such as Java, every value has to have
a type. This means that every value in our software carries its type with
it. Instead of working with value literals, as I did in the previous paragraph,
we assign them to variables. A variable gives a value a location in time and space.
In Java, the type of a value is associated with the variable.
</p>

<pre class="wikiPreformatted">
String projectName;
projectName = "Hibernate"</pre>


<p class="wikiPara">
In the first line, we declare that <tt>String</tt> is the type of the variable <tt>projectName</tt>.
The values that can be assigned to <tt>projectName</tt> are therefore limited to the set
of values allowed for the <tt>String</tt> type, i.e., all character strings. In the next line,
we assign the value <tt>Hibernate</tt> to the variable <tt>projectName</tt>. The assignment operator
(<tt>=</tt>) checks both operands for compatibility: Is the given value in the set of values
allowed for the variables type? Strong typing means that this check is performed for all
operations, including all method (operator) calls, not only assignment.
</p>

<p class="wikiPara">
Let's talk about types in Java. We have built-in types such as <tt>String</tt>, but also custom
user-defined types, such as <tt>Project</tt>. But a Java /class/ is only the mechanism used for
type declaration and implementation. Sometimes we are sloppy and say <q>a class is
a type</q>, but strictly speaking, it is not. A type is all externally visible elements of
a class, that is all operators (methods) and components (attributes) declared public. We
just use the mechanism of a class to define this, and of course, to implement the actual
(internal) representation. So the following class defines and implements the <tt>Project</tt>
type:
</p>

<pre class="wikiPreformatted">
public Project {

   public String projectName;

   public void makeOpenSource() {
      ...
   }

   public Team getProjectTeam() {
      ...
  }

}</pre>


<p class="wikiPara">
The <tt>Project</tt> type has one component and two operators. But where is this <q>set of values</q> defined?
</p>

<p class="wikiPara">
Consider the type <tt>Object</tt> in Java: This type implies a set with all possible values. So, in fact,
the set is implicit if you create a type. In other words, if you declare a variable of type
<tt>Object</tt>, you can assign whatever value you want. By creating a type (writing a class or interface),
you narrow that set. For example, a type <tt>Project</tt> might imply a set of all possible projects. You
can of course further restrict the allowed values by adding constraints to that type (<q>only projects
with a name shorter than 10 characters</q>), but thats not the issue here.
</p>

<p class="wikiPara">
Back to the initial question: A scalar type is a type that is /encapsulated/, that is, it
doesn't have any user-visible components. The <tt>Project</tt> type in the example above is
non-scalar, it has the user-visible component (attribute) <tt>projectName</tt>.
</p>

<p class="wikiPara">
On the other hand, the <tt>Team</tt> returned by the select operator <tt>getProjectTeam</tt> does not reveal
a component, but only gives us a part of the possible representation of a <tt>Project</tt>. We simply
don't now (and shouldn't care) if the <tt>Team</tt> returned is internally a component (attribute)
of the <tt>Project</tt> or something completely different. The implementation is hidden.
</p>

<p class="wikiPara">
If we follow the Best Practices for POJOs (or JavaBeans), we automatically create scalar
types. Adding a select operator such as <tt>getProjectName</tt> and removing the public visible
component <tt>projectName</tt> would make the example <tt>Project</tt> type scalar, that is encapsulated or
atomic.
</p>

<p class="wikiPara">
Keep in mind that /scalar/ is not related to /complexity/ in any way. Just because we call
Java primitives <q>scalar</q>, doesn't make all scalar types primitive.
</p>
</div>

