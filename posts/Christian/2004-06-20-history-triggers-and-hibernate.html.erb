---
title: "History triggers and Hibernate"
author: "Christian Bauer"
blogger_name: "Christian"
creation_date: "20-06-2004"
original_tags: []
tags: []

relative_url: /2004/06/20/history-triggers-and-hibernate
slug: history-triggers-and-hibernate
lace: http://in.relation.to/1236.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2004/06/20/history-triggers-and-hibernate
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
Recently, I helped one of our customers migrating a legacy database to Hibernate;
one of the more interesting topics was versioning and audit logging. Actually, in the
last couple of months, the subject of historical data came up several times. No
matter if it was a legacy SQL schema or a migration from a broken object-oriented
database, everyone had their own way to log data changes. 
</p>

<p class="wikiPara">
In this entry, I'll introduce a clean and nice solution for this issue. My proposal
naturally integrates with Hibernate. Let's use database triggers and views instead
of code in the application layer.
</p>

<p class="wikiPara">
While it is in fact quite easy to write a Hibernate <tt>Interceptor</tt> for audit logging
(an example can be found in <a href="http://www.manning.com/catalog/view.php?book=bauer" target="" class="regularLink">Hibernate in Action </a>
or on the <a href="http://www.hibernate.org/37.html?cmd=srchdoc&amp;q=interceptor" target="" class="regularLink">Hibernate Wiki </a>), we
always like to use the features of the database system. Implementing audit logging
in the database is the best choice if many applications share the same schema and data,
and usually much less hassle to maintain in the long run.
</p>

<p class="wikiPara">
First, let's create an entity we want to implement a change history for, a simple
Item. In Java, this entity is implemented as the <tt>Item</tt> class. As usual for a 
Hibernate application that uses Detached Objects and automatic optimistic concurrency
control, we give it an <tt>id</tt> and a <tt>version</tt> property:
</p>

<pre class="wikiPreformatted">
public class Item {

    private Long id = null
    private int version;
    private String description;
    private BigDecimal price;

    Item() {}
    
    ... // Accessor and business methods    
}</pre>


<p class="wikiPara">
This class is then mapped to a table using Hibernate metadata:
</p>

<pre class="wikiPreformatted">
&lt;hibernate-mapping&gt;
&lt;class name="Item" table="ITEM_VERSIONED&gt;
    &lt;id name="id" column="ITEM_ID"&gt;
        &lt;generator class="native"/&gt;
    &lt;/id&gt;
    &lt;version name="version" column="VERSION"/&gt;
    &lt;property name="description" column="DESC"/&gt;
    &lt;property name="price" column="PRICE"/&gt;
&lt;/class&gt;
&lt;/hibernate-mapping&gt;</pre>


<p class="wikiPara">
The name of the mapped table is <tt>ITEM_VERSIONED</tt>. This is actually not a normal
base table, but a database view that joins the data from two base tables. Let's
have a look at the two tables in Oracle:
</p>

<pre class="wikiPreformatted">
create table ITEM (
    ITEM_ID    NUMBER(19) NOT NULL,
    DESC       VARCHAR(255) NOT NULL,
    PRICE      NUMBER(19,2) NOT NULL,
    PRIMARY KEY(ITEM_ID)
)

create table ITEM_HISTORY (
    ITEM_ID    NUMBER(19) NOT NULL,
    DESC       VARCHAR(255) NOT NULL,
    PRICE      NUMBER(19,2) NOT NULL,
    VERSION    NUMBER(10) NOT NULL,
    PRIMARY KEY(ITEM_ID, VERSION)
)</pre>


<p class="wikiPara">
The <tt>ITEM</tt> table is our real entity relation. The <tt>ITEM_HISTORY</tt> table
has a different primary key, using the <tt>ITEM_ID</tt> and <tt>VERSION</tt> column. Our
goal is to have one row per entity instance in <tt>ITEM</tt> (the newest version
of our data) and one row for each item version in <tt>ITEM_HISTORY</tt>:
</p>

<pre class="wikiPreformatted">
ITEM_ID   DESC            PRICE
1         A nice Item.    123,99
2         Another one.     34,44

ITEM_ID   DESC            PRICE      VERSION
1         The original.   123,99     0
1         An update.      123,99     1
1         A nice Item.    123,99     2
2         Another one.     34,44     0</pre>


<p class="wikiPara">
So, instead of mapping our Java entity to any of the two tables, we map it
to a new virtual table, <tt>ITEM_VERSIONED</tt>. This view merges the data from both
base tables:
</p>

<pre class="wikiPreformatted">
create or replace view ITEM_VERSIONED (ITEM_ID, VERSION, DESC, PRICE) as
    select I.ITEM_ID as ITEM_ID,
        (select max(IH.VERSION)
            from ITEM_HISTORY HI
            where HI.ITEM_ID = I.ITEM_ID) as VERSION,
        I.DESC as DESC,
        I.PRICE as PRICE
    from   ITEM I</pre>


<p class="wikiPara">
The <tt>ITEM_VERSIONED</tt> view uses a correlated subquery and a theta-style join to get
the highest version number for a particular item from the history table, while
selecting the current values from the row in <tt>ITEM</tt>. Of course we could also directly
read all data from <tt>ITEM_HISTORY</tt>, but this query is more flexible, for example
if you don't want to include all original columns in the history.
</p>

<p class="wikiPara">
Hibernate can now read entities and it has a version number for automatic
optimistic locking. However, we can not save entities, since the view is
read-only. (In Oracle and most other databases, views created using a join
can not be updated.) You will get an exception if you try to update an entity.
</p>

<p class="wikiPara">
We solve this problem by writing a database trigger. The trigger will intercept
all updates and insertions for the view and redirect the data to the base tables.
This kind of trigger is called an /INSTEAD OF/ trigger. Let's first handle
insertion:
</p>

<pre class="wikiPreformatted">
create or replace trigger ITEM_INSERT
    instead of insert on ITEM_VERSIONED begin
    
    insert into ITEM(ITEM_ID, DESC, PRICE)
           values (:n.ITEM_ID, :n.DESC, :n.PRICE);
           
    insert into ITEM_HISTORY(ITEM_ID, DESC, PRICE, VERSION)
           values (:n.ITEM_ID, :n.DESC, :n.PRICE, :n.VERSION);
end;</pre>


<p class="wikiPara">
This trigger will execute two inserts and split the data between the entity and
entity history table. Next, update operations:
</p>

<pre class="wikiPreformatted">
create or replace trigger ITEM_UPDATE
    instead of update on ITEM_VERSIONED begin
    
    update ITEM set
            DESC = :n.DESC,
            PRICE = :n.PRICE,
           where
            ITEM_ID = :n.ITEM_ID;
           
    insert into ITEM_HISTORY(ITEM_ID, DESC, PRICE, VERSION)
           values (:n.ITEM_ID, :n.DESC, :n.PRICE, :n.VERSION);
end;</pre>


<p class="wikiPara">
The entity table is updated first, with the new data. Then, a new row is
written to the <tt>ITEM_HISTORY</tt> table.
</p>

<p class="wikiPara">
This is actually all you need to implement a basic history functionality, just
check /INSTEAD OF/ trigger support in your database management system. You can
even enhance this pattern and make it much more flexible: write a new
<tt>Auditinfo</tt> value type class with user and timestamp information and add an <tt>auditinfo</tt>
property to your entity class in Java. Map this to some new columns in your
view using a Hibernate custom UserType and track the information by
setting the property in a Hibernate <tt>Interceptor</tt> when updates and inserts
occur. Use AOP to externalize this aspect from your POJOs...
</p>

<p class="wikiPara">
HTH
</p>
</div>

