---
title: "Options for Entity Dirtness Checking"
author: "Steve Ebersole"
blogger_name: "Steve"
creation_date: "10-04-2013"
original_tags: [dirtiness,feature,orm]
tags: [Hibernate ORM]

relative_url: /2013/04/10/options-for-entity-dirtness-checking
slug: options-for-entity-dirtness-checking
lace: http://in.relation.to/24105.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2013/04/10/options-for-entity-dirtness-checking
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
At flush-time, Hibernate needs to know what entity state has become dirty (changed) so that it knows what data needs to be written to the database and what data does not.  Historically Hibernate only defined one means of such dirtiness checking, but has since added multiple additional schemes which seem to be not as well known.  The intent for this blog is to start a base for improving the documentation around dirty checking and these various options.
</p>


<h2 class="wikiHeadline2" id="H-FlushtimeStateComparisonStrategy"><a href="/2013/04/10/options-for-entity-dirtness-checking#H-FlushtimeStateComparisonStrategy">flush-time state comparison strategy</a></h2>

<p class="wikiPara">
In such a scheme, the <q>loaded state</q> of an entity is kept around as part of the persistence context (Session/EntityManager).  This loaded state is the last known state of the entity data as it exists in the database.  That happens whenever the entity is loaded or whenever we update the entity from that persistence context.  But either way, we have a <q>last, well-known state</q> of the entity in the database as part of this transaction.
</p>

<p class="wikiPara">
This strategy, then, at flush time, performs a deep comparison between that loaded state and the entity's current state.  This happens for every entity associated with the persistence context on every flush, which can be a bit of a performance drain in long running persistence contexts and batch processing use-cases.  In fact this is why the documentation discusses the importance of evicting as part of batch processing use-cases, but the same thing applies to long running persistence contexts.  The best way to mitigate the performance impact of this strategy is to either:
</p>

<ol class="wikiOrderedList">
<li class="wikiOrderedListItem"> minimize the number of flushes that occur on a given persistence context (always a good idea anyway)</li>
<li class="wikiOrderedListItem"> minimize the number of entities that are associated with the persistence context during each flush</li>
</ol>

<p class="wikiPara">
Such a strategy falls into a category of dirtiness checking that I call computed.  Initially, this was the only strategy supported by Hibernate.  However even as far back as 3.0 (which dates back 8-9 years ago!) Hibernate started branching out into <q>tracked</q> dirtiness checking strategies.  The most well known general approach to this is using bytecode enhancement.
</p>

<h2 class="wikiHeadline2" id="H-TrackedApproachBytecodeEnhancement"><a href="/2013/04/10/options-for-entity-dirtness-checking#H-TrackedApproachBytecodeEnhancement">Tracked approach : bytecode enhancement</a></h2>

<p class="wikiPara">
Hibernate's first foray into tracked strategies was through bytecode enhancement, which was how most other JPA providers did tracked dirty checking.  This is a process whereby your Java Class's bytecode is read and enhanced (changed) to introduce new bytecode level instructions.  Hibernate supports this as an Ant task and also through runtime enhancment, although runtime enhancement currently requires a JPA container and container-managed EntityManagerFactory bootstrapping.  Basically, Hibernate does not provide a Java agent to perform the enhancement at classload time.  We are not against it so much as we just do not have time and no one has contributed such support to-date; though if you are interested... ;)  
</p>

<p class="wikiPara">
The enhancement weaves in support for the entity itself keeping track of when its state has changed.  At flush time we can then check that flag rather than performing the state comparison computation.  
</p>

<p class="wikiPara">
To apply the build-time enhancement using the Ant task, you'd specify the Ant task like:
</p>

<pre class="wikiPreformatted">&lt;target name="instrument" depends="compile"&gt;
    &lt;taskdef name="instrument" classname="org.hibernate.tool.instrument.javassist.InstrumentTask"&gt;
        &lt;classpath ... &gt;
    &lt;/taskdef&gt;

    &lt;instrument verbose="true"&gt;
        &lt;fileset dir="${yourClassesDir}"&gt;
            &lt;include name="*.class"/&gt;
        &lt;/fileset&gt;
    &lt;/instrument&gt;
&lt;/target&gt;</pre>


<p class="wikiPara">
which performs the enhancement/instrumentation on your classes as defined by the nested Ant fileset.  It is important that the classpath used to define the task contain the Hibernate jar, all its dependencies <i class="wikiEmphasis">and</i> your classes.
</p>

<p class="wikiPara">
To use runtime enhancement, simply enable the setting <tt>hibernate.ejb.use_class_enhancer</tt> to <tt>true</tt>.  Again, this requires that your application be using JPA container-managed EMF bootstrapping.
</p>

<p class="wikiPara">
There are also third party maven plugins support Hibernate bytecode enhancement within a Maven build.
</p>

<p class="wikiPara">
Be aware that work is under way (actually its first steps are already in the 4.2 release) to revamp bytecode enhancement support.  See <a href="http://hibernate.onjira.com/browse/HHH-7667" target="" class="regularLink">HHH-7667</a> and <a href="http://hibernate.onjira.com/browse/HHH-7963" target="" class="regularLink">HHH-7963</a> for details.
</p>


<h2 class="wikiHeadline2" id="H-TrackedApproachDelegation"><a href="/2013/04/10/options-for-entity-dirtness-checking#H-TrackedApproachDelegation">Tracked approach : delegation</a></h2>

<p class="wikiPara">
A new feature added in 4.1 allows all dirtiness checking to be delegated to application code.  See <a href="http://hibernate.onjira.com/browse/HHH-3910" target="" class="regularLink">HHH-3910</a> and <a href="http://hibernate.onjira.com/browse/HHH-6998" target="" class="regularLink">HHH-6998</a> for complete design discussions.  But essentially this feature allows your application to control how dirtiness checking happens.  The idea is that your application model classes are monitoring their own dirtiness.  Imagine an entity class like:
</p>

<pre class="wikiPreformatted">@Entity
public class MyEntity {
    private Long id;
    private String name;

    @Id 
    public Long getId() { ... }
    public void setId(Long id) { ... }

    public Long getName() { ... }
    public void setName(String name) {
        if ( ! areEqual( this.name, name ) ) {
            trackChange( "name", this.name );
        }
        this.name = name;
    }

    private Map&lt;String,?&gt; tracker;

    private void trackChange(String attributeName, Object value) {
        if ( tracker == null ) {
            tracker = new HashMap&lt;String,Object&gt;();
        }
        else if ( tracker.containsKey( attributeName ) {
            // no need to re-put, we want to keep the original value
            return;
        }
        tracker.put( attributeName, value );
    }

    public boolean hadDirtyAttributes() {
        return tracker != null &amp;&amp; ! tracker.isEmpty();
    }

    public Set&lt;String&gt; getDirtyAttributeNames() {
        return tracker.keySet();
    }

    public void resetDirtiness() {
        if ( tracker != null ) {
            tracker.clear();
        }
    }
}</pre>


<p class="wikiPara">
Using the <tt>org.hibernate.CustomEntityDirtinessStrategy</tt> introduced in 4.1 as part of HHH-3910 we can easily tie the entity's intrinsic dirty checking into Hibernate's dirty checking:
</p>

<pre class="wikiPreformatted">public class CustomEntityDirtinessStrategyImpl implements CustomEntityDirtinessStrategy {
    @Override
    public boolean canDirtyCheck(Object entity, EntityPersister persister, Session session) {
        // we only manage dirty checking for MyEntity instances (for this example; a CustomEntityDirtinessStrategy
        // manage dirty checking for any number of entity types).
        return MyEntity.class.isInstance( entity );
    }

    @Override
    public boolean isDirty(Object entity, EntityPersister persister, Session session) {
        return ( (MyEntity) entity ).hadDirtyAttributes();
    }

    @Override
    public void findDirty(Object entity, EntityPersister persister, Session session, DirtyCheckContext dirtyCheckContext) {
        final MyEntity myEntity = (MyEntity) entity;
        final Set&lt;String&gt; dirtyAttributeNames = entity.getDirtyAttributeNames();

        dirtyCheckContext.doDirtyChecking(
                new AttributeChecker() {
                        @Override
                        public boolean isDirty(AttributeInformation attributeInformation) {
                            return dirtyAttributeNames.contains( attributeInformation.getName() );
                        }
                }
        );
    }

    @Override
    public void resetDirty(Object entity, EntityPersister persister, Session session) {
        return ( (MyEntity) entity ).resetDirtiness();
    }
}</pre>


<p class="wikiPara">
This delegation could even be combined with some custom bytecode enhancement that you apply to your domain model in order to weave in dirtiness tracking.  It also fits very nicely with dynamic models (using Map-backed proxies, etc).
</p>

<p class="wikiPara">
There can currently be only one <tt>CustomEntityDirtinessStrategy</tt> associated with a SessionFactory/EntityManagerFactory.  The <tt>CustomEntityDirtinessStrategy</tt> implementation to use is defined by the <tt>hibernate.entity_dirtiness_strategy</tt> setting.
</p>


<h2 class="wikiHeadline2" id="H-Conclusion"><a href="/2013/04/10/options-for-entity-dirtness-checking#H-Conclusion">Conclusion</a></h2>

<p class="wikiPara">
Hopefully this gives a more clear picture of the possibilities for managing dirtiness checking in Hibernate.  If things are still unclear discuss in comments and I'll try to aggregate all constructive criticisms and suggestions into the docs.</p>
</div>

