---
title: "Event Listener Registration"
author: "Steve Ebersole"
blogger_name: "Steve"
creation_date: "09-01-2012"
original_tags: [EventListeners,Hibernate]
tags: [Event]

relative_url: /2012/01/09/event-listener-registration
slug: event-listener-registration
lace: http://in.relation.to/22722.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2012/01/09/event-listener-registration
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
4.0 changes the way event listeners get registered to leverage some added capabilities, namely services and integrators.  I won't get into services too much as they are covered elsewhere.  But lets start with the notion of an Integrator.
</p>

<h1 class="wikiHeadline1" id="H-IntegratorContract"><a href="/2012/01/09/event-listener-registration#H-IntegratorContract">Integrator contract</a></h1>

<p class="wikiPara">
Specifically, we are talking about the <code>org.hibernate.integrator.spi.Integrator</code> interface.  The idea behind an <code>org.hibernate.integrator.spi.Integrator</code> is to provide a simple means to allow developers to hook into the process of building a functioning <code>SessionFactory</code>.  A standard service provided by Hibernate is the ability to discover <code>org.hibernate.integrator.spi.Integrator</code> implementations by utilizing the Java <code>java.util.ServiceLoader</code> mechanism.  Developers simply define a file named <code>/META-INF/services/org.hibernate.integrator.spi.Integrator</code> and make it available on the classpath.  Essentially, the content of this file is one or more fully-qualified <code>org.hibernate.integrator.spi.Integrator</code> implementation class names, one per line each.  Please see the <code>java.util.ServiceLoader</code> JavaDocs for the complete spec of the allowed syntax of content in this file.
</p>

<p class="wikiPara">
The <code>org.hibernate.integrator.spi.Integrator</code> interface defines 2 methods of interest:
</p>

<pre class="wikiPreformatted">public interface Integrator {
    /**
     * Perform integration.
     *
     * @param configuration The configuration used to create the session factory
     * @param sessionFactory The session factory being created
     * @param serviceRegistry The session factory's service registry
     */
    public void integrate(Configuration configuration, SessionFactoryImplementor sessionFactory, SessionFactoryServiceRegistry serviceRegistry);

    /**
     * Tongue-in-cheek name for a shutdown callback.
     *
     * @param sessionFactory The session factory being closed.
     * @param serviceRegistry That session factory's service registry
     */
    public void disintegrate(SessionFactoryImplementor sessionFactory, SessionFactoryServiceRegistry serviceRegistry);

    /** 
     * Ignore this form!  Just do nothing in impl.  It uses the new metamodel api slated for completion in 5.0
     */
    public void integrate(MetadataImplementor metadata, SessionFactoryImplementor sessionFactory, SessionFactoryServiceRegistry serviceRegistry );
}</pre>


<p class="wikiPara">
The method <code>integrate</code> allows us to hook into the building process; <code>disintegrate</code> allows us to hook into a <code>SessionFactory</code> shutting down.
</p>

<h1 class="wikiHeadline1" id="H-Registration"><a href="/2012/01/09/event-listener-registration#H-Registration">Registration</a></h1>

<p class="wikiPara">
Hibernate itself has a few implementations of the <code>org.hibernate.integrator.spi.Integrator</code> interface that perform event listener registration that might be good to look at for reference.
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> <a href="https://github.com/hibernate/hibernate-orm/blob/master/hibernate-envers/src/main/java/org/hibernate/envers/event/EnversIntegrator.java" target="" class="regularLink">https://github.com/hibernate/hibernate-orm/blob/master/hibernate-envers/src/main/java/org/hibernate/envers/event/EnversIntegrator.java</a>
</li>
<li class="wikiUnorderedListItem"> <a href="https://github.com/hibernate/hibernate-orm/blob/master/hibernate-entitymanager/src/main/java/org/hibernate/ejb/event/JpaIntegrator.java" target="" class="regularLink">https://github.com/hibernate/hibernate-orm/blob/master/hibernate-entitymanager/src/main/java/org/hibernate/ejb/event/JpaIntegrator.java</a>
</li>
</ul>

<p class="wikiPara">
The general process for registering listeners is as follows
</p>

<pre class="wikiPreformatted">    public void integrate(Configuration configuration, SessionFactoryImplementor sessionFactory, SessionFactoryServiceRegistry serviceRegistry) {
        // As you might expect, an EventListenerRegistry is the place with which event listeners are registered  It is a service
        // so we look it up using the service registry
        final EventListenerRegistry eventListenerRegistry = serviceRegistry.getService( EventListenerRegistry.class );

        // If you wish to have custom determination and handling of "duplicate" listeners, you would have to add an implementation
        // of the org.hibernate.event.service.spi.DuplicationStrategy contract like this
        eventListenerRegistry.addDuplicationStrategy( myDuplicationStrategy );

        // EventListenerRegistry defines 3 ways to register listeners:
        //     1) This form overrides any existing registrations with 
        eventListenerRegistry.setListeners( EventType.AUTO_FLUSH, myCompleteSetOfListeners );
        //     2) This form adds the specified listener(s) to the beginning of the listener chain
        eventListenerRegistry.prependListeners( EventType.AUTO_FLUSH, myListenersToBeCalledFirst );
        //     3) This form adds the specified listener(s) to the end of the listener chain
        eventListenerRegistry.appendListeners( EventType.AUTO_FLUSH, myListenersToBeCalledLast );
    }
</pre>

</div>

