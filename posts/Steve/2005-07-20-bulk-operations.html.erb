---
title: "Bulk Operations"
author: "Steve Ebersole"
blogger_name: "Steve"
creation_date: "20-07-2005"
original_tags: []
tags: []

relative_url: /2005/07/20/bulk-operations
slug: bulk-operations
lace: http://in.relation.to/2065.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2005/07/20/bulk-operations
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
The <a href="http://www.jcp.org/en/jsr/detail?id=220" target="" class="regularLink">EJB3 </a> persistence specification calls for implementors to 
support <q>Bulk Operations</q> in EJB-QL (the <q>EJB Query Language</q>).  As part of Hibernate's implementation of 
EJB3 persistence, HQL (the <q>Hibernate Query Language</q> : which is a superset of EJB-QL) needed to support 
these <q>Bulk Operations</q>.  This support is now code complete, even going beyond what is offered in the EJB3 
persistence specification.  There is one task outstanding against this bulk operation support in HQL, but 
this is completely beyond the scope of the support called for in the EJB3 persistence specification.  
I'll blog about this one later as it simply rocks ;)
</p>

<p class="wikiPara">
So what exactly are <q>Bulk Operations</q>?  Well for those of you familiar with SQL, it is analogous to <q>Data Manipulation Language</q> (DML) but, just like HQL and EJB-QL, defined in terms of the object model. What is DML?  DML is the SQL statements which actually manipulate the state of the tabular data:
INSERT, UPDATE, and DELETE.
</p>

<p class="wikiPara">
Essentially, all that is to say that EJB-QL and HQL now support UPDATE and DELETE statements (HQL also 
supports INSERT statements, but more about that at a later time).
</p>

<p class="wikiPara">
In its basic form, this support is not really all that difficult.  I mean Hibernate already knows
all the information pertaining to tables and columns; it already knows how to parse WHERE-clauses
and the like.  So what's the big deal?  Well, in implementation, we ran across a few topics that 
make this support more challenging; which of course made it all the more fun to implement ;)
</p>

<h2 class="wikiHeadline2" id="H-UpdateStatements"><a href="/2005/07/20/bulk-operations#H-UpdateStatements">Update Statements</a></h2>

<p class="wikiPara">
From the EJB3 persistence specification:
</p>

<pre class="wikiPreformatted">
Bulk update and delete operations apply to entities of a single entity class 
(together with its subclasses, if any). Only one entity abstract schema type 
may be specified in the FROM or UPDATE clause.
</pre>


<p class="wikiPara">
The specification-defined psuedo-grammar for the update syntax:
</p>

<pre class="wikiPreformatted">
update_statement ::= update_clause [where_clause]

update_clause ::=UPDATE abstract_schema_name [[AS ] identification_variable]
    SET update_item {, update_item}*

update_item ::= [identification_variable.]state_field = new_value

new_value ::=
    simple_arithmetic_expression |
    string_primary |
    datetime_primary |
    boolean_primary
</pre>


<p class="wikiPara">
The basic jist is:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> There can only be a single entity (abstract<u>schema</u>name) named in the update-clause; it can optionally be aliased.  If the entity name is aliased, then any property references must be qualified using that alias; if the entity name is not aliased, then it is illegal for any property references to be qualified.</li>
</ul>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> No joins (either implicit or explicit) can be specified in the update.  Sub-queries may be used in the where-clause; the subqueries, themselves, can contain joins.</li>
</ul>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> The where-clause is also optional.</li>
</ul>


<p class="wikiPara">
Two interesting things to point out:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> According to the specification, an UPDATE against a versioned entity <i class="wikiEmphasis">should not</i> cause the version to <q>be bumped</q>
</li>
</ul>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> According to the specification, the assigned new_value does not allow subqueries; HQL supports this!</li>
</ul>

<p class="wikiPara">
Even though the spec disallows bumping the version on an update of a versioned 
entity, this is more-often-than-not the desired behavior.  Because of the 
spec, Hibernate cannot do this by default so we introduced a new keyword 
VERSIONED into the grammar instead.  The syntax is <q>update versioned MyEntity ...</q>, 
which will cause the version column values to get bumped for any affected entities.
</p>

<h2 class="wikiHeadline2" id="H-DeleteStatements"><a href="/2005/07/20/bulk-operations#H-DeleteStatements">Delete Statements</a></h2>

<p class="wikiPara">
From the EJB3 persistence specification:
</p>

<pre class="wikiPreformatted">
Bulk update and delete operations apply to entities of a single entity class 
(together with its subclasses, if any). Only one entity abstract schema type 
may be specified in the FROM or UPDATE clause.

A delete operation only applies to entities of the specified class and its 
subclasses. It does not cascade to related entities.
</pre>


<p class="wikiPara">
The specification-defined psuedo-grammar for the delete syntax:
</p>

<pre class="wikiPreformatted">
delete_statement ::= delete_clause [where_clause]

delete_clause ::= DELETE FROM abstract_schema_name [[AS ] identification_variable]
</pre>


<p class="wikiPara">
The basic jist is:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> There can only be a single entity (abstract<u>schema</u>name) named in the from-clause; it can optionally be aliased.  If the entity name is aliased, then any property references must be qualified using that alias; if the entity name is not aliased, then it is illegal for any property references to be qualified.</li>
</ul>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> No joins (either implicit or explicit) can be specified in the delete.  Sub-queries may be used in the where-clause; the subqueries, themselves, can contain joins.</li>
</ul>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> The where-clause is also optional.</li>
</ul>


<p class="wikiPara">
One <i class="wikiEmphasis">very</i> interesting thing to point out there.  The specification specifically disallows
cascading of the delete to releated entities (not including, abviously, db-level cascades).
</p>

<h2 class="wikiHeadline2" id="H-Caching"><a href="/2005/07/20/bulk-operations#H-Caching">Caching</a></h2>

<p class="wikiPara">
Automatic and transparent object/relational mapping is concerned with the management of 
object state. This implies that the object state is available in memory.  <q>Bulk Operations</q>,
to a large extent, undermine that concern.  The biggest issue is that of caching performed by the
ORM tool/EJB3 persistence implementor.
</p>

<p class="wikiPara">
The spec even makes a point to caution regarding this:
</p>

<pre class="wikiPreformatted">
Caution should be used when executing bulk update or delete operations because 
they may result in inconsistencies between the database and the entities in the 
active persistence context. In general, bulk update and delete operations 
should only be performed within a separate transaction or at the beginning of a 
transaction (before entities have been accessed whose state might be affected 
by such operations).</pre>


<p class="wikiPara">
In Hibernate terms, be sure to perform any needed <q>Bulk Operations</q> prior to pulling 
entities into the session, as failing to do so poses a risk for inconsistencies 
between the session (the /active persistence context/) and the database.
</p>

<p class="wikiPara">
Hibernate also offers, as do most ORM tools, a shared cache (the <i class="wikiEmphasis">second level cache</i>).
Executing <q>Bulk Operations</q> also poses a risk of inconsistencies between the shared cache
and the database.  Hibernate actually takes the responsility of managing this risk for
you.  Upon completion of a <q>Bulk Operation</q>, Hibernate invalidates any needed region(s)
within the shared cache to maintain consistency.  It has to be done through invalidation
because the UPDATE or DELETE is executed solely on the database server; thus Hibernate
has no idea about the ids of any affected entities, nor (in the case of updates) what 
the new state might be.
</p>

<h2 class="wikiHeadline2" id="H-Conclusion"><a href="/2005/07/20/bulk-operations#H-Conclusion">Conclusion</a></h2>

<p class="wikiPara">
 <q>Bulk Operations</q> are complimentary to the functionality provided by ORM tools.
Especially in the case of batch processes, <q>Bulk Operations</q> coupled with the new
StatelessSession functionlity (available &gt; 3.1beta1) offer a more performant
alternative to the normal row-based ORM focus.
</p>

<h2 class="wikiHeadline2" id="H-Thisnthat"><a href="/2005/07/20/bulk-operations#H-Thisnthat">This-n-that</a></h2>

<p class="wikiPara">
Entities which are contained across multiple tables (not counting associations) cause particular
challenges that I'll blog about later.
</p>

<p class="wikiPara">
Have a look at the reference <a href="http://www.hibernate.org/hib_docs/v3/reference/en/html/batch.html#batch-direct" target="" class="regularLink">manual </a>
for discussion of these Bulk Operations within HQL.
</p>

<p class="wikiPara">
For those of you familiar with ANTLR and its grammar definitions, the authoritative source for what is supported
by HQL is the grammar <a href="http://cvs.sourceforge.net/viewcvs.py/hibernate/Hibernate3/grammar/" target="" class="regularLink">files </a> themselves.
</p>
</div>

