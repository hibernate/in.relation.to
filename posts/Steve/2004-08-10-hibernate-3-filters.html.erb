---
title: "Hibernate3 Filters"
author: "Steve Ebersole"
blogger_name: "Steve"
creation_date: "10-08-2004"
original_tags: []
tags: [Hibernate ORM]

relative_url: /2004/08/10/hibernate-3-filters
slug: hibernate-3-filters
lace: http://in.relation.to/2002.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2004/08/10/hibernate-3-filters
---
<div id="documentDisplay" class="documentDisplay">


<p class="wikiPara">
Hibernate3 adds the ability to pre-define filter criteria and attach those filters at both a class and a collection level.  What's a <q>pre-defined filter criteria</q>?  Well, it's the ability to define a limit clause very similiar to the existing <q>where</q> attribute available on the class and various collection elements.  Except these filter conditions can be parameterized!  The application can then make the decision at runtime whether given filters should be enabled and what their parameter values should be.
</p>

<h2 class="wikiHeadline2" id="H-Configuration"><a href="/2004/08/10/hibernate-3-filters#H-Configuration">Configuration</a></h2>

<p class="wikiPara">
In order to use filters, they must first be defined and then attached to the appropriate mapping elements.  To define a filter, use the new <tt>&lt;filter-def/&gt;</tt> element within a <tt>&lt;hibernate-mapping/&gt;</tt> element:
</p>

<pre class="wikiPreformatted">
&lt;filter-def name="myFilter"&gt;
    &lt;filter-param name="myFilterParam" type="string"/&gt;
&lt;/filter-def&gt;</pre>


<p class="wikiPara">
Then, this filter can be attched to a class:
</p>

<pre class="wikiPreformatted">
&lt;class name="myClass" ...&gt;
    ...
    &lt;filter name="myFilter" condition=":myFilterParam = my_filtered_column"/&gt;
&lt;/class&gt;</pre>


<p class="wikiPara">
or, to a collection:
</p>

<pre class="wikiPreformatted">
&lt;set ...&gt;
    &lt;filter name="myFilter" condition=":myFilterParam = my_filtered_column"/&gt;
&lt;/set&gt;</pre>


<p class="wikiPara">
or, even to both (or multiples of each) at the same time!
</p>

<h2 class="wikiHeadline2" id="H-Usage"><a href="/2004/08/10/hibernate-3-filters#H-Usage">Usage</a></h2>

<p class="wikiPara">
In support of this, a new interface was added to Hibernate3, org.hibernate.Filter, and some new methods added to org.hibernate.Session.  The new methods on Session are: enableFilter(String filterName), getEnabledFilter(String filterName), and disableFilter(String filterName).  By default, filters are <i class="wikiEmphasis">not</i> enabled for a given session; they must be explcitly enabled through use of the Session.enabledFilter() method, which returns an instance of the new Filter interface.  Using the simple filter defined above, this would look something like:
</p>

<pre class="wikiPreformatted">
session.enableFilter("myFilter").setParameter("myFilterParam", "some-value");</pre>


<p class="wikiPara">
Note that methods on the org.hibernate.Filter interface do allow the method-chaining common to much of Hibernate.
</p>

<h2 class="wikiHeadline2" id="H-BigDeal"><a href="/2004/08/10/hibernate-3-filters#H-BigDeal">Big Deal</a></h2>

<p class="wikiPara">
This is all functionality that was available in Hibernate before version 3, right?  Of course.  But before version 3, this was all manual processes by application code.  To filter a collection you'd need to load the entity containing the collection and then apply the collection to the Session.filter() method.  And for entity filtration you'd have to write stuff that manually modified the HQL string by hand or a custom Interceptor.
</p>

<p class="wikiPara">
This new feature provides a clean and consistent way to apply these types of constraints.  The Hibernate team envisions the usefulness of this feature in everything from internationalization to temporal data to security considerations (and even combinations of these at the same time) and much more.  Of course it's hard to envision the potential power of this feature given the simple example used so far, so let's look at some slightly more in depth usages. 
</p>

<h2 class="wikiHeadline2" id="H-TemporalDataExample"><a href="/2004/08/10/hibernate-3-filters#H-TemporalDataExample">Temporal Data Example</a></h2>

<p class="wikiPara">
Say you have an entity that follows the <q>effective record</q> database pattern.  This entity has multiple rows each varying based on the date range during which that record was effective (possibly even maintained via a Hibernate Interceptor).  An employment record might be a good example of such data, since employees might come and go and come back again.  Further, say you are developing a UI which always needs to deal in current records of employment data.  To use the new filter feature to acheive these goals, we would first need to define the filter and then attach it to our Employee class: 
</p>

<pre class="wikiPreformatted">
&lt;filter-def name="effectiveDate"&gt;
    &lt;filter-param name="asOfDate" type="date"/&gt;
&lt;/filter-def&gt;

&lt;class name="Employee" ...&gt;
    ...
    &lt;many-to-one name="department" column="dept_id" class="Department"/&gt;
    &lt;property name="effectiveStartDate" type="date" column="eff_start_dt"/&gt;
    &lt;property name="effectiveEndDate" type="date" column="eff_end_dt"/&gt;
    ...
    &lt;!--
        Note that this assumes non-terminal records have an eff_end_dt set to a max db date
        for simplicity-sake
    --&gt;
    &lt;filter name="effectiveDate" condition=":asOfDate BETWEEN eff_start_dt and eff_end_dt"/&gt;
&lt;/class&gt;

&lt;class name="Department" ...&gt;
    ...
    &lt;set name="employees" lazy="true"&gt;
        &lt;key column="dept_id"/&gt;
        &lt;one-to-many class="Employee"/&gt;
        &lt;filter name="effectiveDate" condition=":asOfDate BETWEEN eff_start_dt and eff_end_dt"/&gt;
    &lt;/set&gt;
&lt;/class&gt;</pre>


<p class="wikiPara">
Then, in order to ensure that you always get back currently effective records, simply enable the filter on the session prior to retrieving employee data:
</p>

<pre class="wikiPreformatted">
Session session = ...;
session.enabledFilter("effectiveDate").setParameter("asOfDate", new Date());
List results = session.createQuery("from Employee as e where e.salary &gt; :targetSalary")
        .setLong("targetSalary", new Long(1000000))
        .list();</pre>


<p class="wikiPara">
In the HQL above, even though we only explicitly mentioned a salary constraint on the results, because of the enabled filter the query will return only currently active employees who have a salary greater than a million dollars (lucky stiffs).
</p>

<p class="wikiPara">
Even further, if a given department is loaded from a session with the <q>effectiveDate</q> filter enabled, its employee collection will only contain active employees. 
</p>

<h2 class="wikiHeadline2" id="H-SecurityExample"><a href="/2004/08/10/hibernate-3-filters#H-SecurityExample">Security Example</a></h2>

<p class="wikiPara">
Imagine we have an application that assigns each user an access level, and that some sensitive entities in the system are assigned access levels (way simplistic, I understand, but this is just illustration).  So a user should be able to see anything where their assigned access level is greater than that assigned to the entity they are trying to see.  Again, first we need to define the filter and apply it:
</p>

<pre class="wikiPreformatted">
&lt;filter-def name="accessLevel"&gt;
    &lt;filter-param name="userLevel" type="int"/&gt;
&lt;/filter-def&gt;

&lt;class name="Opportunity" ...&gt;
    ...
    &lt;many-to-one name="region" column="region_id" class="Region"/&gt;
    &lt;property name="amount" type="Money"&gt;
        &lt;column name="amt"/&gt;
        &lt;cloumn name="currency"/&gt;
    &lt;/property&gt;
    &lt;property name="accessLevel" type="int" column="access_lvl"/&gt;
    ...
    &lt;filter name="accessLevel"&gt;&lt;![CDATA[:userLevel &gt;= access_lvl]]&gt;&lt;/filter&gt;
&lt;/class&gt;

&lt;class name="Region" ...&gt;
    ...
    &lt;set name="opportunities" lazy="true"&gt;
        &lt;key column="region_id"/&gt;
        &lt;one-to-many class="Opportunity"/&gt;
        &lt;filter name="accessLevel"&gt;&lt;![CDATA[:userLevel &gt;= access_lvl]]&gt;&lt;/filter&gt;
    &lt;/set&gt;
    ...
&lt;/class&gt;</pre>


<p class="wikiPara">
Next, our application code would need to enable the filter:
</p>

<pre class="wikiPreformatted">
User user = ...;
Session session = ...;
session.enableFilter("accessLevel").setParameter("userLevel", user.getAccessLevel());</pre>


<p class="wikiPara">
At this point, loading a Region would filter its opportunities collection based on the current user's access level:
</p>

<pre class="wikiPreformatted">
Region region = (Region) session.get(Region.class, "EMEA");
region.getOpportunities().size(); // &lt;- limited to those accessible by the user's level
</pre>


<h2 class="wikiHeadline2" id="H-Conclusion"><a href="/2004/08/10/hibernate-3-filters#H-Conclusion">Conclusion</a></h2>

<p class="wikiPara">
These were some pretty simple examples.  But hopefully, they'll give you a glimpse of how powerful these filters can be and maybe sparked some thoughts as to where you might be able to apply such constraints within your own application.  This can become even more powerful in combination with various interception methods, like web filters, etc. 
 
Also a note: if you plan on using filters with outer joining (either through HQL or load fetching) be careful of the direction of the condition expression.  Its safest to set this up for left outer joining; in general, place the parameter first followed by the column name(s) after the operator.
</p>
</div>

