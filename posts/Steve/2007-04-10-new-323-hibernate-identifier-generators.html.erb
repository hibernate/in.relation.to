---
title: "New (3.2.3) Hibernate identifier generators"
author: "Steve Ebersole"
blogger_name: "Steve"
creation_date: "10-04-2007"
original_tags: []
tags: []

relative_url: /2007/04/10/new-323-hibernate-identifier-generators
slug: new-323-hibernate-identifier-generators
lace: http://in.relation.to/2082.lace

layout: blog-post

disqus_thread_id: http://in.relation.to/2007/04/10/new-323-hibernate-identifier-generators
---
<div id="documentDisplay" class="documentDisplay">


<h2 class="wikiHeadline2" id="H-Introducing"><a href="/2007/04/10/new-323-hibernate-identifier-generators#H-Introducing">Introducing...</a></h2>

<p class="wikiPara">
Starting in 3.2.3, I include 2 new identifier generators targetted at portability.  They take a differect approach to portability than do the older <q>native</q> generator.  Typically speaking using a 
synthetic identifier generation strategy while eyeing portability really comes down to wanting the capabilities that a sequence provides even though the database may not support sequences.  Note 
that I explicitly leave off IDENTITY-style generators because generally speaking an Object/Relational Mapping technology will prefer identifier generation strategies where the identifier value can be retrieved 
before performing (and without having to actually perform) the insert statement; this is certainly true of Hibernate and other <q>transactional write behind</q> technologies because in the case of IDENTITY columns
the insert must be performed immediately (and furthermore, because JDBC does not define a mechanism to retrieve batches of IDENTITY generated values, batching must be impliciitly disabled for entities using an 
IDENTITY generator), circumventing the <q>transactional write behind</q> behavior.
</p>

<p class="wikiPara">
The two generators are:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> org.hibernate.id.enhanced.SequenceStyleGenerator - the approach it takes to portability is that really you dont care whether you are physically using a SEQUENCE in the database; really you just want a sequence-like generation of values.  On databases which support SEQUENCES, SequenceStyleGenerator will in fact use a SEQUNCE as the value generator; for those database which do not support SEQUENCES, it will instead use a <i class="wikiEmphasis">single-row</i> table as the value generator, but with the same exact charecteristics as a SEQUENCE value generator (namely it deals with the <q>sequence table</q> in a separate transaction at all times).</li>
</ul>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> org.hibernate.id.enhanced.TableGenerator - while not specifically targetting portability, TableGenerator  can certainly be used across all databases.  It uses a <i class="wikiEmphasis">multi-row</i> table where the rows are keyed by a (configurable) <q>sequence_name</q> column; one approach would be to have each entity define a unique <q>sequence_name</q> value in the table to segment its identifier values.  It grew out of the older org.hibernate.id.MultipleHiLoPerTableGenerator and uses basically the same table structure.  However, while MultipleHiLoPerTableGenerator inherently applies a hi-lo algorithm to the value generation, this new TableGenerator was added to be able to take advantage of the pluggable optimizers.</li>
</ul>


<p class="wikiPara">
Both generators, in addition to other specific parameters, share 3 useful configuration parameters:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> optimizer</li>
</ul>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> initial_value</li>
</ul>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> increment_size</li>
</ul>


<p class="wikiPara">
The role of the optimizer is to limit the number of times we actually need to hit the database in order to determine the <q>next identifier value</q>.  The exact effect of initial_value and increment_size somewhat depend on the optimizer chosen.  optimizer provides 3 choices:
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> none - says to hit the database on each and every request</li>
</ul>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> hilo - says to use an in-memory <q>pooling</q> technique which is the same basic logic as the older Hibernate <q>hilo</q> or <q>seqhilo</q> generators.  In terms of the database values, they are incremented one at a time; in other words, increment_size applies to the in-memory algorithm</li>
</ul>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> pooled - says to use a <q>stored</q> pooling technique.  Unlike hilo, where incremental values are stored and retrieved from the database sequence/table, pooled stores the actual current hi-value into the database.  As an example, consider increment_size=10</li>
</ul>


<h2 class="wikiHeadline2" id="H-UnderTheCovers"><a href="/2007/04/10/new-323-hibernate-identifier-generators#H-UnderTheCovers">Under the covers</a></h2>

<p class="wikiPara">
So generally speaking, both the hilo and pooled optimizer seeks to optimize performance by minimizing the number of times we need to hit the database.  Great!  So then exactly how are they different?  
Well, lets take a look at the values stored in the database as a means to illustrate the distinction.  
</p>

<h3 class="wikiHeadline3" id="H-OptimizerhiloTtincrementsize10tt"><a href="/2007/04/10/new-323-hibernate-identifier-generators#H-OptimizerhiloTtincrementsize10tt">optimizer=hilo (<tt>increment_size=10</tt>)</a></h3>

<p class="wikiPara">
After the initial request, we will have:
</p>

<pre class="wikiPreformatted">
|  value (db)  |  value (in-memory)  |  hi (in-memory)  |
| 1            | 1                   | 11               |
</pre>


<p class="wikiPara">
The db-value and <i class="wikiEmphasis">hi</i> will remain the same until the 12th request, at which point we would <q>clock over</q>:
</p>

<pre class="wikiPreformatted">
|  value (db)  |  value (in-memory)  |  hi (in-memory)  |
| 2            | 12                  | 21               |
</pre>


<p class="wikiPara">
Essentially, <i class="wikiEmphasis">hi</i> defines the <q>clock-over</q> value; once the in-memory value reaches the <i class="wikiEmphasis">hi</i> value, we need to hit the database and define a new bucket of values.  The major drawback to this approach is when using this strategy with legacy applications that also need to insert values; those other applications must also understand and use this hilo algorithm.
</p>

<h3 class="wikiHeadline3" id="H-OptimizerpooledTtincrementsize10tt"><a href="/2007/04/10/new-323-hibernate-identifier-generators#H-OptimizerpooledTtincrementsize10tt">optimizer=pooled (<tt>increment_size=10</tt>)</a></h3>

<p class="wikiPara">
After the initial request, we will have:
</p>

<pre class="wikiPreformatted">
|  value (db)  |  value (in-memory)  |  hi (in-memory)  |
| 11           | 1                   | 11               |
</pre>


<p class="wikiPara">
The db-value and <i class="wikiEmphasis">hi</i> will remain the same until the 12th request, at which point we would <q>clock over</q>:
</p>

<pre class="wikiPreformatted">
|  value (db)  |  value (in-memory)  |  hi (in-memory)  |
| 21           | 12                  | 31               |
</pre>


<p class="wikiPara">
As you can see, with this optimizer the increment_size is actually encoded into the database values.  This is perfect for databases which
support sequences because typically they also define an /INCREMENT BY/ option to creating the sequence such that calls to get the next 
sequence value <i class="wikiEmphasis">automatically</i> apply the proper increment_size.  Even if other applications are also inserting values, we'll be perfectly
safe because the SEQUENCE itself will handle applying this increment_size.  And in practice, it turns out, you will also be safe if 
SequenceStyleGenerator reverts to using a table in the same situation because of how the clock over happens.
</p>

<h2 class="wikiHeadline2" id="H-Conclusion"><a href="/2007/04/10/new-323-hibernate-identifier-generators#H-Conclusion">Conclusion</a></h2>

<p class="wikiPara">
I would expect that these two new generators actually replace currently existing ones in terms of <q>short-hand names</q>.  Specifically, I would expect
</p>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> the implementation behind <q>sequence</q> to change from org.hibernate.SequenceGenerator to the new org.hibernate.id.enhanced.SequenceStyleGenerator</li>
</ul>

<ul class="wikiUnorderedList">
<li class="wikiUnorderedListItem"> the implementation behing <q>table</q> to change from org.hibernate.TableGenerator to the new org.hibernate.id.enhanced.TableGenerator</li>
</ul>

<p class="wikiPara">
The second is the more risky replacement because of the big difference between the two.  But we've all along discouraged direct use of the current <q>table</q> generator so I think we should be safe there.  I am still uncertain when that replacement will happen (probably 4.0?), but in the meantime, the new generators are available and <i class="wikiEmphasis">highly</i> recommended for use.
</p>
</div>

